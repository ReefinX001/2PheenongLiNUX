const BranchStock = require('../models/POS/BranchStock');

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó IMEI
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó IMEI ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô status ‡πÄ‡∏õ‡πá‡∏ô inactive ‡πÅ‡∏ó‡∏ô
 */
exports.checkAndUpdateIMEIStock = async (req, res) => {
  const io = req.app.get('io');

  try {
    console.log('üîç IMEI Stock Update Request:', new Date().toISOString());
    console.log('üì¶ Request body:', JSON.stringify(req.body, null, 2));

    const { items, branch_code, checkOnly = false } = req.body;

    if (!items || !Array.isArray(items) || items.length === 0) {
      return res.status(400).json({
        success: false,
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
      });
    }

    if (!branch_code) {
      return res.status(400).json({
        success: false,
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤'
      });
    }

    const results = [];
    let successCount = 0;
    let failedCount = 0;
    const failedItems = [];

    for (const item of items) {
      const { product_id, imei, quantity } = item;

      if (!product_id) {
        results.push({
          product_id,
          imei,
          success: false,
          error: '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏ product_id'
        });
        failedCount++;
        continue;
      }

      try {
        // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢ IMEI ‡∏´‡∏£‡∏∑‡∏≠ product_id
        let query = {
          branch_code,
          status: 'active'
        };

        if (imei) {
          // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ IMEI ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ IMEI ‡∏´‡∏£‡∏∑‡∏≠ barcode
          query.$or = [
            { imei: imei },
            { barcode: imei }
          ];
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ IMEI ‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ product_id
          query._id = product_id;
        }

        console.log(`üîç Searching BranchStock with query:`, query);

        const stock = await BranchStock.findOne(query);

        if (!stock) {
          const errorMsg = imei
            ? `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ IMEI: ${imei} ‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å`
            : `‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${product_id} ‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å`;

          results.push({
            product_id,
            imei,
            success: false,
            error: errorMsg
          });
          failedCount++;
          failedItems.push({
            product_id,
            imei,
            error: errorMsg
          });
          continue;
        }

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if (stock.status !== 'active') {
          const errorMsg = `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${stock.name} (${stock.imei || stock.barcode}) ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢ (status: ${stock.status})`;
          results.push({
            product_id: stock._id,
            imei: stock.imei || stock.barcode,
            name: stock.name,
            success: false,
            error: errorMsg
          });
          failedCount++;
          failedItems.push({
            product_id: stock._id,
            imei: stock.imei || stock.barcode,
            error: errorMsg
          });
          continue;
        }

        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô checkOnly ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
        if (checkOnly) {
          results.push({
            product_id: stock._id,
            imei: stock.imei || stock.barcode,
            name: stock.name,
            success: true,
            available: true,
            message: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢'
          });
          successCount++;
        } else {
          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó status ‡πÄ‡∏õ‡πá‡∏ô inactive (‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß)
          stock.status = 'inactive';
          stock.pending = false;
          stock.verified = true;
          stock.last_updated = new Date();

          await stock.save();

          console.log(`‚úÖ Updated stock status to inactive for: ${stock.name} (${stock.imei || stock.barcode})`);

          results.push({
            product_id: stock._id,
            imei: stock.imei || stock.barcode,
            name: stock.name,
            success: true,
            message: '‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
          });
          successCount++;

          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Socket.IO
          if (io) {
            io.emit('stockUpdated', {
              id: stock._id,
              product_id: stock._id,
              imei: stock.imei || stock.barcode,
              name: stock.name,
              status: 'inactive'
            });
          }
        }

      } catch (itemError) {
        console.error(`Error processing item ${product_id}:`, itemError);
        results.push({
          product_id,
          imei,
          success: false,
          error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•'
        });
        failedCount++;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà checkOnly mode
    if (failedCount > 0 && !checkOnly) {
      return res.status(400).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏î‡πâ',
        data: {
          summary: {
            total: results.length,
            success: successCount,
            failed: failedCount,
            checkOnly: checkOnly
          },
          results: results,
          failedItems: failedItems
        },
        message: failedItems.map(item => `‚Ä¢ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.product_id}${item.imei ? ` (${item.imei})` : ''} - ${item.error}`).join('\n')
      });
    }

    return res.json({
      success: true,
      data: {
        summary: {
          total: results.length,
          success: successCount,
          failed: failedCount,
          checkOnly: checkOnly
        },
        results: results
      },
      message: checkOnly
        ? `‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£${failedCount > 0 ? ` (‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${failedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)` : ' (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢)'}`
        : `‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${successCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
    });

  } catch (err) {
    console.error('‚ùå checkAndUpdateIMEIStock error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å',
      details: err.message
    });
  }
};