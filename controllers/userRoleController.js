// controllers/userRoleController.js
const UserRole = require('../models/User/UserRole');
const mongoose = require('mongoose');

/**
 * Helper function: Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
 */
async function syncUsersWithUpdatedRole(roleId, updatedRole, io) {
  try {
    const User = require('../models/User/User');

    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ
    const usersWithRole = await User.find({
      role: roleId,
      deleted_at: null
    })
    .populate('employee', 'name email imageUrl position department')
    .populate('role', 'name allowedPages permissions')
    .populate('allowedBranches', 'name branch_code')
    .populate('defaultBranches', 'name branch_code')
    .select('-password -currentSession.token')
    .lean();

    console.log(`üîÑ Syncing ${usersWithRole.length} users with updated role: ${updatedRole.name}`);

    // ‡∏™‡πà‡∏á event ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ
    if (io && usersWithRole.length > 0) {
      usersWithRole.forEach(user => {
        // ‡∏™‡πà‡∏á event ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏à‡∏≤‡∏∞‡∏à‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
        io.emit('userRoleUpdated', {
          userId: user._id,
          username: user.username,
          updatedRole: {
            _id: updatedRole._id,
            name: updatedRole.name,
            description: updatedRole.description,
            allowedPages: updatedRole.allowedPages,
            permissions: updatedRole.permissions
          },
          timestamp: new Date()
        });
      });

      // ‡∏™‡πà‡∏á event ‡∏£‡∏ß‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin/HR
      io.emit('roleUsersUpdated', {
        roleId: roleId,
        roleName: updatedRole.name,
        affectedUsers: usersWithRole.map(u => ({
          userId: u._id,
          username: u.username,
          employeeName: u.employee?.name || u.username
        })),
        timestamp: new Date()
      });
    }

    return {
      success: true,
      affectedUsers: usersWithRole.length,
      users: usersWithRole.map(u => ({
        userId: u._id,
        username: u.username,
        employeeName: u.employee?.name || u.username
      }))
    };

  } catch (error) {
    console.error('Error in syncUsersWithUpdatedRole:', error);
    throw error;
  }
}

/**
 * POST /api/user-role
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Role ‡πÉ‡∏´‡∏°‡πà ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏≥‡∏´‡∏ô‡∏î allowedPages ‡πÅ‡∏•‡∏∞ allowedBranches
 */
exports.createRole = async (req, res) => {
  try {
    const {
      name,
      description = '',
      allowedPages = [],
      allowedBranches = [],
      permissions = []
    } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ä‡∏∑‡πà‡∏≠ role ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const existingRole = await UserRole.findOne({
      name: name,
      deleted_at: null
    });

    if (existingRole) {
      return res.status(400).json({
        success: false,
        error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô'
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á role ‡πÉ‡∏´‡∏°‡πà
    const newRole = new UserRole({
      name: name.trim(),
      description: description.trim(),
      allowedPages,
      allowedBranches,
      permissions
    });

    await newRole.save();

    // ‡∏™‡πà‡∏á event ‡∏ú‡πà‡∏≤‡∏ô Socket.IO (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const io = req.app.get('io');
    if (io) {
      io.emit('roleCreated', {
        id: newRole._id,
        data: newRole
      });
    }

    return res.status(201).json({
      success: true,
      data: newRole,
      message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "${name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    });

  } catch (err) {
    console.error('createRole error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå',
      details: err.message
    });
  }
};

/**
 * GET /api/user-role
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Role ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏•‡∏ö)
 */
exports.getAllRoles = async (req, res) => {
  try {
    const {
      page = 1,
      limit = 100,
      search = '',
      sortBy = 'createdAt',
      sortOrder = 'desc'
    } = req.query;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const query = { deleted_at: null };

    if (search.trim()) {
      query.$or = [
        { name: { $regex: search, $options: 'i' } },
        { description: { $regex: search, $options: 'i' } }
      ];
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á sort object
    const sort = {};
    sort[sortBy] = sortOrder === 'desc' ? -1 : 1;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• roles
    const roles = await UserRole.find(query)
      .sort(sort)
      .limit(parseInt(limit))
      .skip((parseInt(page) - 1) * parseInt(limit))
      .lean();

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const total = await UserRole.countDocuments(query);

    return res.json({
      success: true,
      data: roles,
      pagination: {
        page: parseInt(page),
        limit: parseInt(limit),
        total,
        pages: Math.ceil(total / parseInt(limit))
      }
    });

  } catch (err) {
    console.error('getAllRoles error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó',
      details: err.message
    });
  }
};

/**
 * GET /api/user-role/:id
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Role ‡∏ï‡∏≤‡∏° ID
 */
exports.getRoleById = async (req, res) => {
  try {
    const { id } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ObjectId
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    const role = await UserRole.findOne({
      _id: id,
      deleted_at: null
    }).lean();

    if (!role) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    return res.json({
      success: true,
      data: role
    });

  } catch (err) {
    console.error('getRoleById error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó',
      details: err.message
    });
  }
};

/**
 * PATCH /api/user-role/:id
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Role
 */
exports.updateRole = async (req, res) => {
  try {
    const { id } = req.params;
    const {
      name,
      description,
      allowedPages,
      allowedBranches,
      permissions
    } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ObjectId
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏´‡∏≤ role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ lean ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ save ‡πÑ‡∏î‡πâ)
    const role = await UserRole.findOne({
      _id: id,
      deleted_at: null
    });

    if (!role) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠)
    if (name && name.trim() !== role.name) {
      const existingRole = await UserRole.findOne({
        name: name.trim(),
        deleted_at: null,
        _id: { $ne: id }
      });

      if (existingRole) {
        return res.status(400).json({
          success: false,
          error: '‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∑‡πà‡∏ô'
        });
      }
      role.name = name.trim();
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ
    if (description !== undefined) role.description = description.trim();
    if (allowedPages !== undefined) role.allowedPages = allowedPages;
    if (allowedBranches !== undefined) role.allowedBranches = allowedBranches;
    if (permissions !== undefined) role.permissions = permissions;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
    await role.save();

    // ‡∏™‡πà‡∏á event ‡∏ú‡πà‡∏≤‡∏ô Socket.IO (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const io = req.app.get('io');
    if (io) {
      io.emit('roleUpdated', {
        id: role._id,
        data: role
      });
    }

    // üîÑ Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ
    try {
      await syncUsersWithUpdatedRole(role._id, role, io);
    } catch (syncError) {
      console.error('Error syncing users with updated role:', syncError);
      // ‡πÑ‡∏°‡πà return error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ role update ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
    }

    return res.json({
      success: true,
      data: role,
      message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "${role.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    });

  } catch (err) {
    console.error('updateRole error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó',
      details: err.message
    });
  }
};

/**
 * DELETE /api/user-role/:id
 * ‡∏•‡∏ö Role (Soft Delete)
 */
exports.deleteRole = async (req, res) => {
  try {
    const { id } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ObjectId
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏´‡∏≤ role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö
    const role = await UserRole.findOne({
      _id: id,
      deleted_at: null
    });

    if (!role) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏ ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ role ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const User = require('../models/User/User'); // ‡∏ï‡πâ‡∏≠‡∏á import User model
    const usersUsingRole = await User.countDocuments({
      role: id,
      deleted_at: null
    });

    if (usersUsingRole > 0) {
      return res.status(400).json({
        success: false,
        error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${usersUsingRole} ‡∏Ñ‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà`
      });
    }

    // ‡∏•‡∏ö‡∏î‡πâ‡∏ß‡∏¢ soft delete
    if (typeof role.softDelete === 'function') {
      await role.softDelete();
    } else {
      role.deleted_at = new Date();
      await role.save();
    }

    // ‡∏™‡πà‡∏á event ‡∏ú‡πà‡∏≤‡∏ô Socket.IO (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    const io = req.app.get('io');
    if (io) {
      io.emit('roleDeleted', {
        id: role._id,
        data: role
      });
    }

    return res.json({
      success: true,
      data: role,
      message: `‡∏•‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó "${role.name}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`
    });

  } catch (err) {
    console.error('deleteRole error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó',
      details: err.message
    });
  }
};

/**
 * GET /api/user-role/stats
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á Role
 */
exports.getRoleStats = async (req, res) => {
  try {
    const totalRoles = await UserRole.countDocuments({ deleted_at: null });
    const adminRoles = await UserRole.countDocuments({
      deleted_at: null,
      $or: [
        { allowedPages: { $in: ['*'] } },
        { name: { $regex: /(admin|ceo|super)/i } }
      ]
    });
    const deletedRoles = await UserRole.countDocuments({ deleted_at: { $ne: null } });

    return res.json({
      success: true,
      data: {
        total: totalRoles,
        admin: adminRoles,
        deleted: deletedRoles,
        active: totalRoles - deletedRoles
      }
    });

  } catch (err) {
    console.error('getRoleStats error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó',
      details: err.message
    });
  }
};

/**
 * POST /api/user-role/seed
 * Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API call)
 */
exports.seedDefaultRoles = async (req, res) => {
  try {
    const { seedRoles } = require('../seeders/roleSeeder');

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå (‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
    // const user = req.user;
    // if (!user || !user.role || user.role.name !== 'Admin') {
    //   return res.status(403).json({
    //     success: false,
    //     error: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    //   });
    // }

    await seedRoles();

    return res.json({
      success: true,
      message: 'Seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à'
    });

  } catch (err) {
    console.error('seedDefaultRoles error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ seed ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      details: err.message
    });
  }
};

/**
 * POST /api/user-role/sync-users
 * Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏±‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡πÉ‡∏´‡∏°‡πà (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö force sync)
 */
exports.syncAllUsersWithRoles = async (req, res) => {
  try {
    const User = require('../models/User/User');
    const io = req.app.get('io');

    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const users = await User.find({ deleted_at: null })
      .populate('role', 'name allowedPages permissions')
      .populate('employee', 'name email')
      .select('-password -currentSession.token')
      .lean();

    const syncResults = [];

    // Sync ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô
    for (const user of users) {
      if (user.role) {
        // ‡∏™‡πà‡∏á event ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
        if (io) {
          io.emit('userRoleUpdated', {
            userId: user._id,
            username: user.username,
            updatedRole: {
              _id: user.role._id,
              name: user.role.name,
              allowedPages: user.role.allowedPages,
              permissions: user.role.permissions
            },
            timestamp: new Date()
          });
        }

        syncResults.push({
          userId: user._id,
          username: user.username,
          roleName: user.role.name,
          synced: true
        });
      }
    }

    // ‡∏™‡πà‡∏á event ‡∏£‡∏ß‡∏°
    if (io) {
      io.emit('allUsersSynced', {
        totalUsers: users.length,
        syncedUsers: syncResults.length,
        timestamp: new Date()
      });
    }

    return res.json({
      success: true,
      message: `Sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ${syncResults.length} ‡∏Ñ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
      data: {
        totalUsers: users.length,
        syncedUsers: syncResults.length,
        results: syncResults
      }
    });

  } catch (err) {
    console.error('syncAllUsersWithRoles error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ sync ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      details: err.message
    });
  }
};

/**
 * GET /api/user-role/:id/users
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ
 */
exports.getUsersByRole = async (req, res) => {
  try {
    const { id } = req.params;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ObjectId
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        error: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ role ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
    const role = await UserRole.findOne({
      _id: id,
      deleted_at: null
    }).lean();

    if (!role) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏ó‡∏ö‡∏≤‡∏ó‡∏ô‡∏µ‡πâ
    const User = require('../models/User/User');
    const users = await User.find({
      role: id,
      deleted_at: null
    })
    .populate('employee', 'name email imageUrl position department')
    .populate('allowedBranches', 'name branch_code')
    .populate('defaultBranches', 'name branch_code')
    .select('-password -currentSession.token')
    .sort({ createdAt: -1 })
    .lean();

    const usersList = users.map(user => ({
      _id: user._id,
      username: user.username,
      employee: user.employee,
      allowedBranches: user.allowedBranches,
      defaultBranches: user.defaultBranches,
      isOnline: user.isOnline,
      lastSeen: user.lastSeen,
      createdAt: user.createdAt
    }));

    return res.json({
      success: true,
      data: {
        role: {
          _id: role._id,
          name: role.name,
          description: role.description,
          allowedPages: role.allowedPages
        },
        users: usersList,
        totalUsers: usersList.length
      }
    });

  } catch (err) {
    console.error('getUsersByRole error:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
      details: err.message
    });
  }
};
