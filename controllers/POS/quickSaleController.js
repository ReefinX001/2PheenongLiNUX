const Product = require('../../models/Stock/Product');
const BranchStock = require('../../models/POS/BranchStock');
const BranchStockHistory = require('../../models/POS/BranchStockHistory');
const PurchaseOrder = require('../../models/Stock/purchaseOrderModel');
const AuditLog = require('../../models/Account/AuditLog');
const Supplier = require('../../models/Stock/Supplier');
const ProductImage = require('../../models/Stock/ProductImage'); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• price, purchaseType, productType
const Counter = require('../../models/POS/Counter'); // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á poNumber ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥

/**
 * Quick Sale Controller - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ PO ‡∏õ‡∏Å‡∏ï‡∏¥
 */

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç PO ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quick Sale (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô PO.html)
 * ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: QS-YYYYMM-NNNN
 */
async function generateQuickSalePONumber() {
  const prefix = 'QS-';
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const yearMonth = `${year}${month}`;

  try {
    // ‡πÉ‡∏ä‡πâ Counter model ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
    const counter = await Counter.findOneAndUpdate(
      { key: 'quick_sale_po', reference_value: yearMonth },
      { $inc: { seq: 1 } },
      { new: true, upsert: true }
    );

    const runningNumber = String(counter.seq).padStart(4, '0');
    return `${prefix}${yearMonth}-${runningNumber}`;
  } catch (error) {
    console.error('Error generating PO number:', error);
    // Fallback: ‡πÉ‡∏ä‡πâ timestamp
    const timestamp = Date.now().toString().slice(-4);
    return `${prefix}${yearMonth}-${timestamp}`;
  }
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ProductImage ‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 * ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• price, purchaseType, productType
 */
async function getProductImageData(productName, brand) {
  try {
    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå
    const productImage = await ProductImage.findOne({
      name: { $regex: productName, $options: 'i' }, // case-insensitive search
      brand: { $regex: brand, $options: 'i' }
    }).lean();

    if (productImage) {
      console.log(`‚úÖ Found ProductImage for ${productName} (${brand}):`, {
        price: productImage.price,
        purchaseType: productImage.purchaseType,
        productType: productImage.productType,
        stockType: productImage.stockType
      });
      return productImage;
    } else {
      console.log(`‚ö†Ô∏è No ProductImage found for ${productName} (${brand}), using defaults`);
      return null;
    }
  } catch (error) {
    console.error('Error fetching ProductImage data:', error);
    return null;
  }
}

/**
 * ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
 * POST /api/quick-sale
 */
exports.createQuickSale = async (req, res) => {
  try {
    const { imei, name, brand, cost, supplierId, supplier, branchCode, urgentSale, timestamp } = req.body;
    const userId = req.user?.id;
    const userName = req.user?.employee?.name || req.user?.username;
    const userRole = req.user?.role;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö authentication ‡∏Å‡πà‡∏≠‡∏ô
    if (!userId || !userName) {
      return res.status(401).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà',
        code: 'AUTHENTICATION_REQUIRED'
      });
    }

    // Validation - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    if (!imei || !name || !brand || !branchCode) {
      return res.status(400).json({
        success: false,
        error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö',
        code: 'MISSING_REQUIRED_FIELDS'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IMEI ‡∏ã‡πâ‡∏≥ - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
    const existingProduct = await Product.findOne({ imei: imei });
    if (existingProduct) {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏´‡∏ô
      const branchStock = await BranchStock.findOne({
        imei: imei,
        branchCode: branchCode,
        status: { $in: ['available', 'reserved'] }
      });

      if (branchStock) {
        return res.status(400).json({
          success: false,
          error: `IMEI ${imei} ‡∏°‡∏µ‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß (${branchStock.status})`,
          code: 'DUPLICATE_IMEI_IN_BRANCH',
          existingProduct: {
            id: existingProduct._id,
            name: existingProduct.name,
            brand: existingProduct.brand,
            branchCode: branchStock.branchCode,
            status: branchStock.status
          }
        });
      }

      // ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô pending/unverified ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ
      console.log(`[Quick Sale] IMEI ${imei} exists but not in branch ${branchCode}, allowing addition to this branch`);
    }

    // ‡∏ú‡πà‡∏≠‡∏ô‡∏ú‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IMEI format ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Serial Number ‡∏≠‡∏∑‡πà‡∏ô‡πÜ)
    if (imei.length < 5) {
      return res.status(400).json({
        success: false,
        error: 'IMEI/Serial Number ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£',
        code: 'INVALID_IMEI_FORMAT'
      });
    }

    // üî• ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö price, purchaseType, productType
    console.log(`[Quick Sale] Fetching ProductImage data for: ${name} (${brand})`);
    const productImageData = await getProductImageData(name, brand);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á poNumber ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô PO.html)
    const poNumber = await generateQuickSalePONumber();
    console.log(`[Quick Sale] Generated PO Number: ${poNumber}`);

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
    const defaultCost = cost || 0; // ‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ô PO

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏à‡∏≤‡∏Å ProductImage
    const priceData = {
      // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏î (‡∏Ç‡∏≤‡∏¢‡∏™‡∏î)
      cashPrice: productImageData?.price || (defaultCost > 0 ? defaultCost * 1.2 : 0),
      // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≠‡∏ô (‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô)
      installmentPrice: productImageData?.pricePayOff || (productImageData?.price ? productImageData.price + 2590 : (defaultCost > 0 ? (defaultCost * 1.2) + 2590 : 2590)),
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      downAmount: productImageData?.downAmount || 0,
      downInstallmentCount: productImageData?.downInstallmentCount || 0,
      downInstallment: productImageData?.downInstallment || 0,
      creditThreshold: productImageData?.creditThreshold || 0,
      payUseInstallmentCount: productImageData?.payUseInstallmentCount || 0,
      payUseInstallment: productImageData?.payUseInstallment || 0,
      docFee: productImageData?.docFee || 0
    };

    // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö (‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏î)
    const productPrice = priceData.cashPrice;
    const purchaseType = productImageData?.purchaseType || ['installment'];
    const productType = productImageData?.productType || 'mobile';
    const stockType = productImageData?.stockType || 'imei';

    const defaultSupplierId = supplierId || null; // ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏≤ supplier default
    const defaultSupplier = supplier || {
      name: '‡∏£‡∏≠‡∏£‡∏∞‡∏ö‡∏∏‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå',
      phone: '',
      address: '',
      note: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    };

    console.log(`[Quick Sale] Using pricing data:`, {
      cashPrice: priceData.cashPrice,
      installmentPrice: priceData.installmentPrice,
      cost: defaultCost,
      purchaseType,
      productType,
      stockType,
      poNumber,
      additionalPricing: {
        downAmount: priceData.downAmount,
        downInstallment: priceData.downInstallment,
        payUseInstallment: priceData.payUseInstallment,
        docFee: priceData.docFee
      }
    });

    // ‡∏´‡∏≤ default supplier ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    let supplierObjectId = defaultSupplierId;
    if (!supplierObjectId) {
      let quickSaleSupplier = await Supplier.findOne({ name: '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô' });
      if (!quickSaleSupplier) {
        quickSaleSupplier = new Supplier({
          name: '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
          code: 'QUICK_SALE',
          phone: '',
          address: '',
          note: '‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'
        });
        await quickSaleSupplier.save();
      }
      supplierObjectId = quickSaleSupplier._id;
    }

    let savedProduct;

    // ‡∏ñ‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°
    if (existingProduct) {
      savedProduct = existingProduct;
      console.log(`[Quick Sale] Using existing product ${imei} for branch ${branchCode}`);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      if (!existingProduct.barcode) {
        existingProduct.barcode = imei; // ‡πÉ‡∏ä‡πâ IMEI ‡πÄ‡∏õ‡πá‡∏ô barcode ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
        await existingProduct.save();
      }
    } else {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
      const productSku = `QS-${branchCode}-${imei.slice(-8)}`;
      const productPrice = defaultCost > 0 ? defaultCost * 1.2 : 0;

      const product = new Product({
        name: name,
        brand: brand,
        model: '', // ‡πÄ‡∏û‡∏¥‡πà‡∏° model field
        imei: imei,
        barcode: imei, // ‡πÉ‡∏ä‡πâ IMEI ‡πÄ‡∏õ‡πá‡∏ô barcode
        sku: productSku, // ‡πÉ‡∏ä‡πâ SKU ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö BranchStock
        cost: defaultCost,
        price: priceData.cashPrice, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏î
        purchasePrice: defaultCost,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏à‡∏≤‡∏Å ProductImage)
        pricePayOff: priceData.installmentPrice,
        downAmount: priceData.downAmount,
        downInstallmentCount: priceData.downInstallmentCount,
        downInstallment: priceData.downInstallment,
        creditThreshold: priceData.creditThreshold,
        payUseInstallmentCount: priceData.payUseInstallmentCount,
        payUseInstallment: priceData.payUseInstallment,
        docFee: priceData.docFee,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
        supplier: supplierObjectId,
        branch_code: branchCode,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage)
        category: productType === 'mobile' ? '‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠' : '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°',
        productType: productType,
        stockType: stockType,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ
        taxType: '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ',
        taxRate: 0,

        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        status: 'active',
        verified: true,
        pending: false,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage)
        purchaseType: purchaseType,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
        quickSale: true,
        urgentSale: urgentSale || true,
        description: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô - ${name}`,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
        createdBy: userId,
        created_at: new Date(),
        updated_at: new Date()
      });

      savedProduct = await product.save();
      console.log(`[Quick Sale] Created new product ${imei} for branch ${branchCode}`);
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Stock Entry ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠ PO) - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
    // ‡πÉ‡∏ä‡πâ productPrice ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å ProductImage ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å cost

    const branchStock = new BranchStock({
      product_id: savedProduct._id,
      name: savedProduct.name,
      brand: savedProduct.brand,
      model: savedProduct.model || '',
      imei: savedProduct.imei,
      barcode: savedProduct.barcode || imei,
      sku: `QS-${branchCode}-${imei.slice(-8)}`, // ‡∏™‡∏£‡πâ‡∏≤‡∏á SKU ‡∏à‡∏≤‡∏Å Quick Sale
      branch_code: branchCode,
      status: 'active',

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° categoryGroup ‡πÄ‡∏õ‡πá‡∏ô null ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô PO.html
      categoryGroup: req.body.categoryGroup || null,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏à‡∏≤‡∏Å ProductImage)
      price: priceData.cashPrice, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏î
      cost: defaultCost,
      purchasePrice: defaultCost,
      stock_value: 1, // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô POS

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏à‡∏≤‡∏Å ProductImage)
      pricePayOff: priceData.installmentPrice, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≠‡∏ô (‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô)
      downAmount: priceData.downAmount,
      downInstallmentCount: priceData.downInstallmentCount,
      downInstallment: priceData.downInstallment,
      creditThreshold: priceData.creditThreshold,
      payUseInstallmentCount: priceData.payUseInstallmentCount,
      payUseInstallment: priceData.payUseInstallment,
      docFee: priceData.docFee,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PO ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ poNumber ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
      poNumber: poNumber,
      documentNumber: poNumber,
      description: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô - ${savedProduct.name}`,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå
      supplier: supplierObjectId,

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á
      addedBy: userId,
      addedByName: req.body.addedByName || userName || '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
      timestamp: req.body.timestamp || new Date().toISOString(),

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage)
      purchaseType: purchaseType,
      productType: productType,
      stockType: stockType,
      taxType: '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ',
      taxRate: 0,

      // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
      verified: true, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô POS
      pending: false, // ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô false ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô POS

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏∞‡∏ö‡∏ö
      productModel: 'Product',
      updated_by: userId,
      last_updated: new Date()
    });

    const savedStock = await branchStock.save();

    // ‡∏™‡πà‡∏á socket.io event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á BranchStock
    const io = req.app.get('io');
    if (io) {
      io.emit('branchstockCreated', {
        data: savedStock,
        type: 'quick_sale',
        branchCode: branchCode,
        message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô: ${name} (IMEI: ${imei})`
      });
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô BranchStockHistory
    try {
      const stockHistory = new BranchStockHistory({
        branch_code: branchCode,
        change_type: 'IN',
        reason: '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
        performed_by: userId,

        items: [{
          product_id: savedProduct._id,
          productImageId: null,
          image: savedProduct.image || '',
          poNumber: poNumber, // ‡πÄ‡∏û‡∏¥‡πà‡∏° poNumber
          documentNumber: poNumber, // ‡πÄ‡∏û‡∏¥‡πà‡∏° documentNumber
          barcode: savedProduct.barcode || imei,
          sku: `QS-${branchCode}-${imei.slice(-8)}`, // ‡πÄ‡∏û‡∏¥‡πà‡∏° SKU
          imei: imei,
          category: productType === 'mobile' ? '‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠' : '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°', // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage
          name: name,
          brand: brand,
          status: 'active',
          qty: 1,
          price: priceData.cashPrice, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏î (‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage)
          cost: defaultCost,

          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏à‡∏≤‡∏Å ProductImage)
          pricePayOff: priceData.installmentPrice, // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡πà‡∏≠‡∏ô
          downAmount: priceData.downAmount,
          downInstallmentCount: priceData.downInstallmentCount,
          downInstallment: priceData.downInstallment,
          creditThreshold: priceData.creditThreshold,
          payUseInstallmentCount: priceData.payUseInstallmentCount,
          payUseInstallment: priceData.payUseInstallment,
          docFee: priceData.docFee,
          unit: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á', // ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
          remainQty: 1 // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤ 1 ‡∏ä‡∏¥‡πâ‡∏ô
        }],

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
        quantity: 1,
        stock_value: 1,
        sub_total: defaultCost,
        vat_amount: 0,
        discount: 0,
        total_amount: defaultCost,
        net_amount: defaultCost,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        invoiceNumber: '',
        invoice_no: '',

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡∏±‡∏û‡∏û‡∏•‡∏≤‡∏¢‡πÄ‡∏≠‡∏≠‡∏£‡πå
        supplier: supplierObjectId,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô)
        customerType: 'individual',
        customerInfo: {
          prefix: '',
          firstName: '‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
          lastName: '',
          phone: '',
          taxId: '',
          birthDate: null,
          age: null,
          address: {
            houseNo: '',
            moo: '',
            subDistrict: '',
            district: '',
            province: '',
            zipcode: ''
          }
        },

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ
        taxType: '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ',

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        performed_at: new Date(),
        performed_by: userId,
        scanned_by: userId,
        verified_by: userId,
        staff_name: userName,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
        quickSale: true,
        urgentSale: urgentSale || true,

        notes: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô\nIMEI: ${imei}\nPO Number: ${poNumber}\n‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢: ${userName}\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp || new Date().toISOString()}`,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        sale_date: null, // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ç‡∏≤‡∏¢
        categoryGroup: null, // ‡∏≠‡∏≤‡∏à‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
        installment_id: null, // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏ú‡πà‡∏≠‡∏ô ‡∏ì ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
        contract_no: '', // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏±‡∏ç‡∏ç‡∏≤
        order_id: null, // ‡πÑ‡∏°‡πà‡∏°‡∏µ order
        customer: null // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      });

      const savedHistory = await stockHistory.save();
      console.log(`[Quick Sale] Created stock history for IMEI ${imei} in branch ${branchCode}`);

      // ‡∏™‡πà‡∏á socket.io event ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏à‡πâ‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á BranchStockHistory
      const io = req.app.get('io');
      if (io) {
        io.emit('branchstockhistoryCreated', {
          data: savedHistory,
          type: 'quick_sale_in',
          branchCode: branchCode,
          message: `‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô: ${name} (IMEI: ${imei})`
        });
      }
    } catch (historyError) {
      console.error('Failed to create stock history:', historyError);
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ history error ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Purchase Order ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°) - ‡πÉ‡∏ä‡πâ poNumber ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const purchaseOrder = new PurchaseOrder({
      poNumber: poNumber, // ‡πÉ‡∏ä‡πâ poNumber ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö BranchStock
      supplier: supplierObjectId,
      branch_code: branchCode,
      documentNumber: poNumber, // ‡πÉ‡∏ä‡πâ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô

      items: [{
        productId: savedProduct._id,
        name: savedProduct.name,
        brand: savedProduct.brand,
        imei: savedProduct.imei,
        barcode: savedProduct.barcode || imei,
        sku: `QS-${branchCode}-${imei.slice(-8)}`,
        category: productType === 'mobile' ? '‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠' : '‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡πÄ‡∏™‡∏£‡∏¥‡∏°', // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage
        qty: 1,
        cost: defaultCost,
        discount: 0,
        taxRate: 0,
        taxType: '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ',
        stockType: stockType, // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å ProductImage
        netAmount: defaultCost,
        taxAmount: 0,
        totalItemAmount: defaultCost,
        poNumber: poNumber
      }],

      totalAmount: defaultCost,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      createdBy: userId,
      createdByName: userName,
      status: '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏à‡∏≤‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤', // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏û‡∏¥‡πÄ‡∏®‡∏©

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
      quickSale: true,
      urgentSale: urgentSale,
      actualReceiveDate: new Date(), // ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ

      orderDate: new Date(),
      createdBy: userId,
      createdAt: new Date(),

      notes: `‡πÇ‡∏´‡∏°‡∏î‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢\nIMEI: ${imei}\n‡∏ú‡∏π‡πâ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£: ${userName} (${userRole})\n‡πÄ‡∏ß‡∏•‡∏≤: ${timestamp}`
    });

    const savedPO = await purchaseOrder.save();

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Audit Log
    try {
      const auditLog = new AuditLog({
        action: 'QUICK_SALE_PRODUCT_CREATED',
        resource: 'QuickSale',
        resourceId: savedProduct._id,
        resourceName: savedProduct.name,
        userId: userId,
        userName: userName,
        userRole: userRole,

        details: {
          imei: imei,
          productName: name,
          brand: brand,
          cost: cost,
          supplierId: supplierId,
          supplierName: supplier?.name,
          branchCode: branchCode,
          poNumber: savedPO.poNumber,
          stockId: savedStock._id,
          urgentSale: urgentSale,
          timestamp: timestamp
        },

        severity: 'HIGH', // ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
        category: 'QUICK_SALE',
        branchCode: branchCode,
        timestamp: new Date()
      });

      await auditLog.save();
    } catch (auditError) {
      console.error('Failed to create audit log:', auditError);
      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ audit error ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
    }

    // ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
    res.status(201).json({
      success: true,
      message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (‡∏£‡∏ß‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)',
      data: {
        product: {
          _id: savedProduct._id,
          name: savedProduct.name,
          brand: savedProduct.brand,
          imei: savedProduct.imei,
          barcode: savedProduct.barcode,
          cost: savedProduct.cost,
          price: savedProduct.price,
          quickSale: true
        },
        stock: {
          _id: savedStock._id,
          branchCode: savedStock.branchCode,
          status: savedStock.status,
          receiveDate: savedStock.receiveDate,
          receiveType: 'quick_sale'
        },
        purchaseOrder: {
          _id: savedPO._id,
          poNumber: savedPO.poNumber,
          status: savedPO.status,
          totalAmount: savedPO.totalAmount
        },
        stockHistory: {
          recorded: true,
          reason: '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
          changeType: 'IN',
          note: '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô'
        },
        supplier: supplier,
        metadata: {
          quickSale: true,
          urgentSale: urgentSale,
          createdBy: userName,
          createdAt: new Date(),
          branchCode: branchCode,
          historyRecorded: true
        }
      }
    });

  } catch (error) {
    console.error('Quick Sale Error:', error);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Audit Log ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Error
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á audit log
      if (req.user?.id && (req.user?.employee?.name || req.user?.username)) {
        const auditLog = new AuditLog({
          action: 'QUICK_SALE_ERROR',
          resource: 'QuickSale',
          userId: req.user.id,
          userName: req.user.employee?.name || req.user.username,
          userRole: req.user.role || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',

          details: {
            error: error.message,
            stack: error.stack,
            requestBody: req.body,
            timestamp: new Date()
          },

          severity: 'CRITICAL', // ‡πÉ‡∏ä‡πâ CRITICAL ‡πÅ‡∏ó‡∏ô ERROR
          category: 'QUICK_SALE',
          branchCode: req.body?.branchCode,
          timestamp: new Date()
        });

        await auditLog.save();
      } else {
        console.log('Skipping audit log creation - no valid user data');
      }
    } catch (auditError) {
      console.error('Failed to create error audit log:', auditError);
    }

    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
      code: 'INTERNAL_SERVER_ERROR',
      details: process.env.NODE_ENV === 'development' ? error.message : undefined
    });
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
 * GET /api/quick-sale
 */
exports.getQuickSaleProducts = async (req, res) => {
  try {
    const { branchCode, page = 1, limit = 100 } = req.query;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BranchStock ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
    const query = {
      poNumber: { $regex: /^QS-/ }, // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏à‡∏∞‡∏°‡∏µ poNumber ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ QS-
      verified: true,
      pending: false
    };

    if (branchCode) {
      query.branch_code = branchCode;
    }

    const branchStocks = await BranchStock.find(query)
      .populate('supplier', 'name code type')
      .populate('product_id', 'name brand cost categoryGroup')
      .sort({ last_updated: -1, createdAt: -1 })
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await BranchStock.countDocuments(query);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö backdated_purchase_order.html
    const formattedData = branchStocks.map(stock => ({
      _id: stock._id,
      name: stock.name,
      brand: stock.brand,
      imei: stock.imei,
      cost: stock.cost || 0,
      price: stock.price || 0,
      branchCode: stock.branch_code,
      categoryGroup: stock.categoryGroup,
      timestamp: stock.timestamp || stock.createdAt,
      addedBy: stock.addedBy,
      addedByName: stock.addedByName || '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
      supplier: stock.supplier,
      poNumber: stock.poNumber,
      productType: stock.productType,
      stockType: stock.stockType,
      taxType: stock.taxType || '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ',
      status: 'pending_po',
      urgentSale: true,
      type: 'backdated'
    }));

    res.json({
      success: true,
      data: formattedData,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(total / limit),
        totalItems: total,
        limit: parseInt(limit)
      }
    });

  } catch (error) {
    console.error('Get Quick Sale Products Error:', error);
    res.status(500).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡πÑ‡∏î‡πâ',
      code: 'FETCH_ERROR'
    });
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ (pending: true)
 */
exports.getQuickSalePendingProducts = async (req, res) => {
  try {
    const { branchCode, page = 1, limit = 100 } = req.query;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å BranchStock ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
    const query = {
      poNumber: { $regex: /^QS-/ }, // ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏à‡∏∞‡∏°‡∏µ poNumber ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ QS-
      pending: true,  // ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      verified: false // ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    };

    if (branchCode) {
      query.branch_code = branchCode;
    }

    const branchStocks = await BranchStock.find(query)
      .populate('supplier', 'name code type')
      .populate('product_id', 'name brand cost categoryGroup')
      .sort({ createdAt: -1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      .limit(limit * 1)
      .skip((page - 1) * limit);

    const total = await BranchStock.countDocuments(query);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö frontend
    const formattedData = branchStocks.map(stock => ({
      _id: stock._id,
      name: stock.name,
      brand: stock.brand,
      imei: stock.imei,
      cost: stock.cost || 0,
      price: stock.price || 0,
      branchCode: stock.branch_code,
      categoryGroup: stock.categoryGroup,
      timestamp: stock.createdAt,
      addedBy: stock.addedBy,
      addedByName: stock.addedByName || '‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô',
      supplier: stock.supplier,
      poNumber: stock.poNumber,
      productType: stock.productType,
      stockType: stock.stockType,
      taxType: stock.taxType || '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ',
      status: 'pending_approval', // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
      urgentSale: true,
      type: 'backdated',
      note: stock.note || '',
      sku: stock.sku,
      barcode: stock.barcode,
      stock_value: stock.stock_value,
      pending: stock.pending,
      verified: stock.verified
    }));

    console.log(`‚úÖ Found ${formattedData.length} pending quick sale products for branch ${branchCode || 'all branches'}`);

    res.json({
      success: true,
      data: formattedData,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(total / limit),
        totalItems: total,
        limit: parseInt(limit)
      }
    });

  } catch (error) {
    console.error('Get Quick Sale Pending Products Error:', error);
    res.status(500).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ',
      code: 'FETCH_PENDING_ERROR'
    });
  }
};

/**
 * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô
 * GET /api/quick-sale/stats
 */
exports.getQuickSaleStats = async (req, res) => {
  try {
    const { branchCode, startDate, endDate } = req.query;

    const matchQuery = { quickSale: true };

    if (branchCode) {
      matchQuery.branchCode = branchCode;
    }

    if (startDate && endDate) {
      matchQuery.createdAt = {
        $gte: new Date(startDate),
        $lte: new Date(endDate)
      };
    }

    const stats = await Product.aggregate([
      { $match: matchQuery },
      {
        $group: {
          _id: null,
          totalQuickSales: { $sum: 1 },
          totalValue: { $sum: '$cost' },
          avgCost: { $avg: '$cost' },
          maxCost: { $max: '$cost' },
          minCost: { $min: '$cost' }
        }
      }
    ]);

    const branchStats = await Product.aggregate([
      { $match: { quickSale: true } },
      {
        $group: {
          _id: '$branchCode',
          count: { $sum: 1 },
          totalValue: { $sum: '$cost' }
        }
      },
      { $sort: { count: -1 } }
    ]);

    res.json({
      success: true,
      data: {
        overall: stats[0] || {
          totalQuickSales: 0,
          totalValue: 0,
          avgCost: 0,
          maxCost: 0,
          minCost: 0
        },
        byBranch: branchStats
      }
    });

  } catch (error) {
    console.error('Get Quick Sale Stats Error:', error);
    res.status(500).json({
      success: false,
      error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏î‡πà‡∏ß‡∏ô‡πÑ‡∏î‡πâ',
      code: 'STATS_ERROR'
    });
  }
};