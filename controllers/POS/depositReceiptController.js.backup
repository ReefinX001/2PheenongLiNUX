// controllers/depositReceiptController.js
const DepositReceipt = require('../../models/POS/DepositReceipt');
const Customer = require('../../models/Customer/Customer');
const BranchStock = require('../../models/POS/BranchStock');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
async function getNextReceiptNumber() {
  try {
    const count = await DepositReceipt.countDocuments();
    const nextNumber = count + 1;
    return `DEP${String(nextNumber).padStart(5, '0')}`;
  } catch (error) {
    console.error('Error generating receipt number:', error);
    return `DEP${String(Date.now()).substr(-5)}`;
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÉ‡∏´‡∏°‡πà (POST /api/deposit-receipts)
exports.createDepositReceipt = async (req, res) => {
  const io = req.app.get('io');
  try {
    console.log('üìù Creating deposit receipt with data:', req.body);

    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
    const {
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡∏à‡∏≤‡∏Å deposits.html
      receiptNumber,
      receiptDate,
      customerId,
      productId,
      depositAmount,
      paymentMethod,
      notes,
      branchId,
      
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å DepositReceipt.html
      branchCode,
      branchName,
      depositType,
      saleType,
      depositDate,
      customer,
      product,
      amounts,
      salesperson,
      documents,
      expectedDeliveryDate,
      preorderNote
    } = req.body;

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
    const finalDepositDate = depositDate || receiptDate;
    const finalDepositAmount = amounts?.depositAmount || depositAmount;
    const finalBranchCode = branchCode || branchId;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    if (!finalDepositDate || !finalDepositAmount || finalDepositAmount <= 0) {
      return res.status(400).json({ 
        success: false, 
        error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥' 
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    const finalReceiptNumber = receiptNumber || await getNextReceiptNumber();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡∏ã‡πâ‡∏≥
    const existingReceipt = await DepositReceipt.findOne({ receiptNumber: finalReceiptNumber });
    if (existingReceipt) {
      return res.status(400).json({
        success: false,
        error: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
    let customerData = {};
    if (customer) {
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
      customerData = {
        customerId: null, // ‡∏à‡∏∞‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö Customer collection
        customerName: customer.name,
        customerAddress: customer.address || '',
        customerPhone: customer.phone || '',
        customerTaxId: customer.taxId || ''
      };
    } else if (customerId) {
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
      const customerRecord = await Customer.findById(customerId).lean();
      if (customerRecord) {
        if (customerRecord.customerType === 'individual') {
          customerData = {
            customerId: customerRecord._id,
            customerName: `${customerRecord.individual?.firstName || ''} ${customerRecord.individual?.lastName || ''}`.trim(),
            customerAddress: customerRecord.individual?.address || '',
            customerPhone: customerRecord.individual?.phone || '',
            customerTaxId: customerRecord.individual?.taxId || ''
          };
        } else {
          customerData = {
            customerId: customerRecord._id,
            customerName: customerRecord.corporate?.companyName || '',
            customerAddress: customerRecord.corporate?.companyAddress || '',
            customerPhone: customerRecord.corporate?.corporatePhone || '',
            customerTaxId: customerRecord.corporate?.companyTaxId || ''
          };
        }
      }
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
    let productData = {};
    if (product) {
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
      productData = {
        productId: product.id,
        productName: product.name,
        productBrand: product.brand,
        productModel: product.model,
        productIMEI: product.imei,
        productPrice: product.price || 0,
        productImage: product.image,
        downAmount: product.downAmount || 0,
        downInstallment: product.downInstallment || 0,
        downInstallmentCount: product.downInstallmentCount || 0,
        inStock: product.inStock || false,
        isPreorder: product.isPreorder || false
      };
    } else if (productId) {
      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤
      const productRecord = await BranchStock.findById(productId).lean();
      if (productRecord) {
        productData = {
          productId: productRecord._id,
          productName: productRecord.name,
          productPrice: productRecord.price || 0
        };
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á deposit receipt data
    const depositReceiptData = {
      receiptNumber: finalReceiptNumber,
      documentNumber: finalReceiptNumber, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
      receiptDate: new Date(finalDepositDate),
      depositDate: new Date(finalDepositDate), // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
      depositType: depositType || 'preorder',
      saleType: saleType || 'cash',
      ...customerData,
      ...productData,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      subtotal: amounts?.totalAmount || finalDepositAmount,
      depositAmount: finalDepositAmount,
      totalAmount: amounts?.totalAmount || finalDepositAmount,
      remainingAmount: amounts?.remainingAmount || 0,
      shippingCost: amounts?.shippingCost || 0,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      paymentType: paymentMethod || 'cash',
      paymentDate: new Date(finalDepositDate),
      paymentAmount: finalDepositAmount,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
      status: 'pending',
      progress: {
        stockAvailable: !product?.isPreorder && product?.inStock,
        proceedToCash: false,
        proceedToInstallment: false
      },
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
      branch_code: finalBranchCode || req.user?.branch || 'MAIN',
      branchName: branchName || '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å',
      createdBy: salesperson?.id || req.user?.id || req.user?._id,
      salespersonName: salesperson?.name || req.user?.name,
      
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      documents: {
        documentChoice: documents?.documentChoice || 'both',
        receiptGenerated: false,
        taxInvoiceGenerated: false
      },
      
      // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
      notes: notes || preorderNote || '',
      expectedDeliveryDate: expectedDeliveryDate ? new Date(expectedDeliveryDate) : null
    };

    console.log('üíæ Saving deposit receipt with processed data:', depositReceiptData);

    const newReceipt = new DepositReceipt(depositReceiptData);
    const createdReceipt = await newReceipt.save();

    // ‡∏™‡πà‡∏á Socket.IO event
    if (io) {
      io.emit('newreceiptCreated', {
        id: createdReceipt._id,
        data: createdReceipt
      });
    }

    console.log('‚úÖ Deposit receipt created successfully:', createdReceipt._id);

    return res.status(201).json({
      success: true,
      data: createdReceipt,
      message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢'
    });
  } catch (err) {
    console.error('‚ùå Error creating deposit receipt:', err);
    return res.status(500).json({ 
      success: false, 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥: ' + err.message 
    });
  }
};

// ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (GET /api/deposit-receipts)
exports.getAllDepositReceipts = async (req, res) => {
  try {
    const { 
      startDate, 
      endDate, 
      status, 
      branchCode,  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å branchId ‡πÄ‡∏õ‡πá‡∏ô branchCode
      search,
      page = 1, 
      limit = 50 
    } = req.query;

    console.log('üîç Getting deposit receipts with filters:', req.query);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á filter
    const filter = {};
    
    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á receiptDate ‡πÅ‡∏•‡∏∞ depositDate
    if (startDate || endDate) {
      const dateFilter = {};
      if (startDate) {
        dateFilter.$gte = new Date(startDate);
      }
      if (endDate) {
        const endDateObj = new Date(endDate);
        endDateObj.setHours(23, 59, 59, 999);
        dateFilter.$lte = endDateObj;
      }
      // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á receiptDate ‡πÅ‡∏•‡∏∞ depositDate
      filter.$or = [
        { receiptDate: dateFilter },
        { depositDate: dateFilter }
      ];
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (status && status !== 'all') {
      filter.status = status;
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤
    if (branchCode && branchCode !== 'all') {
      filter.branch_code = branchCode;
    }

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    if (search) {
      const searchFilter = [
        { receiptNumber: { $regex: search, $options: 'i' } },
        { documentNumber: { $regex: search, $options: 'i' } },
        { customerName: { $regex: search, $options: 'i' } },
        { productName: { $regex: search, $options: 'i' } },
        { productBrand: { $regex: search, $options: 'i' } },
        { productModel: { $regex: search, $options: 'i' } }
      ];
      
      if (filter.$or) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ date filter ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Å‡∏±‡∏ö search filter
        filter.$and = [
          { $or: filter.$or },
          { $or: searchFilter }
        ];
        delete filter.$or;
      } else {
        filter.$or = searchFilter;
      }
    }

    // Pagination
    const skip = (parseInt(page) - 1) * parseInt(limit);

    const receipts = await DepositReceipt.find(filter)
      .populate('customerId', 'individual corporate customerType')
      .populate('productId', 'name price model brand')
      .sort({ createdAt: -1 })
      .skip(skip)
      .limit(parseInt(limit))
      .lean();

    const total = await DepositReceipt.countDocuments(filter);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö frontend
    const processedReceipts = receipts.map(receipt => {
      const processedReceipt = {
        _id: receipt._id,
        documentNumber: receipt.documentNumber || receipt.receiptNumber,
        receiptNumber: receipt.receiptNumber,
        depositDate: receipt.depositDate || receipt.receiptDate,
        documentDate: receipt.receiptDate,
        depositType: receipt.depositType,
        saleType: receipt.saleType || receipt.purchaseType || 'cash',
        status: receipt.status,
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customer: {
          id: receipt.customerId?._id,
          name: receipt.customerName,
          address: receipt.customerAddress,
          phone: receipt.customerPhone,
          taxId: receipt.customerTaxId
        },
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        product: {
          id: receipt.productId?._id,
          name: receipt.productName,
          brand: receipt.productBrand,
          model: receipt.productModel,
          imei: receipt.productIMEI,
          price: receipt.productPrice,
          image: receipt.productImage,
          downAmount: receipt.downAmount,
          downInstallment: receipt.downInstallment,
          downInstallmentCount: receipt.downInstallmentCount
        },
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
        amounts: {
          totalAmount: receipt.totalAmount,
          depositAmount: receipt.depositAmount,
          remainingAmount: receipt.remainingAmount || (receipt.totalAmount - receipt.depositAmount),
          shippingCost: receipt.shippingCost || 0
        },
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        branchCode: receipt.branch_code,
        branchName: receipt.branchName,
        salespersonName: receipt.salespersonName,
        
        // ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤
        progress: receipt.progress || {
          stockAvailable: receipt.inStock || false,
          proceedToCash: false,
          proceedToInstallment: false
        },
        
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        documents: receipt.documents || {
          documentChoice: 'both',
          receiptGenerated: false,
          taxInvoiceGenerated: false
        },
        
        // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        notes: receipt.notes,
        expectedDeliveryDate: receipt.expectedDeliveryDate,
        
        // timestamps
        createdAt: receipt.createdAt,
        updatedAt: receipt.updatedAt
      };
      
      return processedReceipt;
    });

    console.log(`‚úÖ Found ${total} deposit receipts, returning ${processedReceipts.length} items`);

    return res.json({
      success: true,
      data: processedReceipts,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(total / parseInt(limit)),
        totalItems: total,
        itemsPerPage: parseInt(limit)
      }
    });
  } catch (err) {
    console.error('‚ùå Error getting deposit receipts:', err);
    return res.status(500).json({ 
      success: false, 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥: ' + err.message 
    });
  }
};

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö frontend
    const processedReceipts = receipts.map(receipt => ({
      _id: receipt._id,
      receiptNumber: receipt.receiptNumber,
      receiptDate: receipt.receiptDate,
      customerName: receipt.customerName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      productName: receipt.productName || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      totalAmount: receipt.totalAmount || receipt.depositAmount || 0,
      branchName: receipt.branch_code || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
      status: receipt.status,
      createdAt: receipt.createdAt
    }));

    console.log(`‚úÖ Retrieved ${processedReceipts.length} deposit receipts`);

    return res.json({ 
      success: true, 
      data: processedReceipts,
      pagination: {
        total,
        page: parseInt(page),
        limit: parseInt(limit),
        totalPages: Math.ceil(total / parseInt(limit))
      }
    });
  } catch (err) {
    console.error('‚ùå Error fetching deposit receipts:', err);
    return res.status(500).json({ 
      success: false, 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + err.message 
    });
  }
};

// ‡∏î‡∏∂‡∏á‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏ï‡∏≤‡∏° ID (GET /api/deposit-receipts/:id)
exports.getDepositReceiptById = async (req, res) => {
  try {
    const { id } = req.params;
    
    const receipt = await DepositReceipt.findById(id)
      .populate('customerId', 'individual corporate customerType')
      .populate('productId', 'name price model brand')
      .populate('createdBy', 'name email')
      .lean();

    if (!receipt) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥'
      });
    }

    return res.json({
      success: true,
      data: receipt
    });
  } catch (err) {
    console.error('‚ùå Error getting deposit receipt by ID:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + err.message
    });
  }
};

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥ (PUT /api/deposit-receipts/:id)
exports.updateDepositReceipt = async (req, res) => {
  const io = req.app.get('io');
  try {
    const { id } = req.params;
    const updateData = req.body;
    
    // ‡∏•‡∏ö fields ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
    delete updateData._id;
    delete updateData.createdAt;
    delete updateData.updatedAt;

    const updatedReceipt = await DepositReceipt.findByIdAndUpdate(
      id, 
      updateData, 
      { new: true, runValidators: true }
    );

    if (!updatedReceipt) {
      return res.status(404).json({ 
        success: false, 
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥' 
      });
    }

    // ‡∏™‡πà‡∏á Socket.IO event
    if (io) {
      io.emit('depositreceiptUpdated', {
        id: updatedReceipt._id,
        data: updatedReceipt
      });
    }

    return res.json({ 
      success: true, 
      data: updatedReceipt, 
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' 
    });
  } catch (err) {
    console.error('‚ùå Error updating deposit receipt:', err);
    return res.status(500).json({ 
      success: false, 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + err.message 
    });
  }
};

// ‡∏•‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥ (DELETE /api/deposit-receipts/:id)
exports.deleteDepositReceipt = async (req, res) => {
  const io = req.app.get('io');
  try {
    const { id } = req.params;
    
    const receipt = await DepositReceipt.findById(id);
    if (!receipt) {
      return res.status(404).json({ 
        success: false, 
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥' 
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (receipt.status === 'completed') {
      return res.status(400).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏ó‡∏µ‡πà‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß'
      });
    }

    const deletedReceipt = await DepositReceipt.findByIdAndDelete(id);

    // ‡∏™‡πà‡∏á Socket.IO event
    if (io) {
      io.emit('depositreceiptDeleted', {
        id: deletedReceipt._id,
        data: deletedReceipt
      });
    }

    console.log('‚úÖ Deposit receipt deleted successfully:', id);

    return res.json({ 
      success: true, 
      data: deletedReceipt, 
      message: '‡∏•‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢' 
    });
  } catch (err) {
    console.error('‚ùå Error deleting deposit receipt:', err);
    return res.status(500).json({ 
      success: false, 
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ' + err.message 
    });
  }
};

// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥ PDF (GET /api/deposit-receipts/:id/pdf)
exports.downloadDepositReceiptPdf = async (req, res) => {
  try {
    const { id } = req.params;
    
    const receipt = await DepositReceipt.findById(id)
      .populate('customerId', 'individual corporate customerType')
      .populate('productId', 'name price model brand')
      .lean();

    if (!receipt) {
      return res.status(404).json({
        success: false,
        error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥'
      });
    }

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ redirect ‡πÑ‡∏õ‡∏¢‡∏±‡∏á print view
    // ‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏î‡πâ
    const printUrl = `/loan/deposits/${id}/print`;
    return res.redirect(printUrl);

  } catch (err) {
    console.error('‚ùå Error generating PDF:', err);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF: ' + err.message
    });
  }
};
