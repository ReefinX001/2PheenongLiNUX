/**
 * @file QuotationPdfController.js
 * @description Controller for creating minimalist-style PDF Quotations with a blue theme, including installment details.
 * @version 1.3.8
 * @date 2025-05-04
 */

const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const http = require('http');
const https = require('https');

// ‡πÄ‡∏û‡∏¥‡πà‡∏° import models ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Schema registration
try {
  require('../models/HR/Employee');
  require('../models/POS/BranchStock');
  require('../models/POS/BranchStockHistory');
} catch (err) {
  console.warn('‚ö†Ô∏è Model import failed:', err.message);
}

// --- Configuration ---
const CONFIG = {
  page: { size: 'A4', margin: 40 },
  font: {
    name: 'THSarabun', boldName: 'THSarabun-Bold',
    path: path.join(__dirname, '..', 'fonts', 'THSarabunNew.ttf'),
    boldPath: path.join(__dirname, '..', 'fonts', 'THSarabunNew Bold.ttf')
  },
  color: {
    primaryBlue: '#3498DB', textHeader: '#FFFFFF', textBlack: '#000000', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å #2C3E50 ‡πÄ‡∏õ‡πá‡∏ô #000000 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
    textDark: '#222222', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å #444444 ‡πÄ‡∏õ‡πá‡∏ô #222222 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
    textLight: '#555555', lineLight: '#E0E0E0', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å #777777 ‡πÄ‡∏õ‡πá‡∏ô #555555 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏∂‡πâ‡∏ô
    lineDark: '#CCCCCC', sigLine: '#888888', bgWhite: '#FFFFFF', bgAccent: '#3498DB', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å #AAAAAA ‡πÄ‡∏õ‡πá‡∏ô #888888
   },
  sizes: {
    logo: { w: 145 }, // ‡∏•‡∏î‡∏•‡∏á 10% ‡∏à‡∏≤‡∏Å 170
    heading1: 16, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 16 ‡πÄ‡∏õ‡πá‡∏ô 20
    heading2: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 12 ‡πÄ‡∏õ‡πá‡∏ô 14
    heading3: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 12 ‡πÄ‡∏õ‡πá‡∏ô 14
    textBody: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 11 ‡πÄ‡∏õ‡πá‡∏ô 13
    textLabel: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 9 ‡πÄ‡∏õ‡πá‡∏ô 11
    textSmall: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 8 ‡πÄ‡∏õ‡πá‡∏ô 10
    tableHeader: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 10 ‡πÄ‡∏õ‡πá‡∏ô 12
    tableRow: 10, // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 10 ‡πÄ‡∏õ‡πá‡∏ô 12
    lineSpacing: 1.4 // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1.3 ‡πÄ‡∏õ‡πá‡∏ô 1.4 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡πÅ‡∏ô‡πà‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
  },
  layout: {
    tableCols: {
      no: 35,
      desc: 225,  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏ß‡∏° IMEI ‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏ß‡∏¢ (‡∏•‡∏î‡∏à‡∏≤‡∏Å 125 + 100)
      qty: 45,
      unit: 70,
      disc: 55,
      amt: 85
    }
  }
};

// --- Helpers ---
function ensureNumberData(value, fallback = 0) {
    const num = Number(value);
    return isNaN(num) ? fallback : num;
}
function ensureHeight(value, fallback = 10) {
    const num = Number(value);
    return isNaN(num) || num <= 0 ? fallback : num;
}

async function loadImageBuffer(url) {
  if (!url) {
    console.log('üñºÔ∏è loadImageBuffer: No URL provided');
    return null;
  }

  console.log('üñºÔ∏è loadImageBuffer called with:', typeof url, url.substring(0, 100) + (url.length > 100 ? '...' : ''));

  // --- 0) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ö‡∏ô‡∏î‡∏¥‡∏™‡∏Å‡πå (absolute path ‡∏´‡∏£‡∏∑‡∏≠ path ‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads) ---
  const filePath = path.normalize(url);
  if (fs.existsSync(filePath)) {
    console.log('üñºÔ∏è Found local file:', filePath);
    return fs.readFileSync(filePath);
  }

  // --- 0.1) ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå uploads ‡∏Ç‡∏≠‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå ---
  const uploadFilePath = path.join(process.cwd(), 'uploads', path.basename(url));
  if (fs.existsSync(uploadFilePath)) {
    console.log('üñºÔ∏è Found upload file:', uploadFilePath);
    return fs.readFileSync(uploadFilePath);
  }

  // --- 1) Data URI ---
  if (url.startsWith('data:image')) {
    console.log('üñºÔ∏è Processing data URI, size:', url.length);
    try {
      const base64 = url.split(',')[1];
      if (!base64) {
        console.error('üñºÔ∏è Invalid data URI: no base64 data found');
        return null;
      }
      const buffer = Buffer.from(base64, 'base64');
      console.log('üñºÔ∏è Data URI converted to buffer, size:', buffer.length);
      return buffer;
    } catch (error) {
      console.error('üñºÔ∏è Error processing data URI:', error.message);
      return null;
    }
  }

  // --- 2) HTTP(S) URL ---
  if (/^https?:\/\//.test(url)) {
    const client = url.startsWith('https://') ? https : http;
    return new Promise(resolve => {
      client.get(url, res => {
        const chunks = [];
        res.on('data', c => chunks.push(c));
        res.on('end', () => resolve(Buffer.concat(chunks)));
      }).on('error', () => resolve(null));
    });
  }

  // --- 3) ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå public ‡πÉ‡∏ô project root ---
  const projectRoot = process.cwd();
  const relPath     = url.replace(/^\/+/, '');
  const tryPaths    = [
    path.join(projectRoot, 'public', relPath),
    path.join(projectRoot,         relPath),
  ];
  for (const p of tryPaths) {
    if (fs.existsSync(p)) {
      return fs.readFileSync(p);
    }
  }

  console.warn('loadImageBuffer: file not found at any of:\n' +
    tryPaths.map(p => `  ‚Ä¢ ${p}`).join('\n'));
  return null;
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏≠‡∏£‡πå‡πÅ‡∏°‡∏ï‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
function formatThaiDate(dateString) {
  if (!dateString) return '-';
  try {
    const date = new Date(dateString);
    if (isNaN(date.getTime())) return '-';

    // ‡∏ß‡∏±‡∏ô ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡∏û.‡∏®.
    const day = date.getDate();
    const month = date.toLocaleDateString('th-TH', {month: 'long'});
    // ‡∏õ‡∏µ ‡∏û.‡∏®. (‡πÄ‡∏û‡∏¥‡πà‡∏° 543 ‡∏à‡∏≤‡∏Å ‡∏Ñ.‡∏®.)
    const thaiYear = date.getFullYear() + 543;

    return `${day} ${month} ${thaiYear}`;
  } catch (e) {
    return '-';
  }
}

// ‡πÉ‡∏ä‡πâ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ thai-baht-text (npm install thai-baht-text)
const bahtText = require('thai-baht-text');

function toThaiBahtText(n) {
  // ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏õ‡πá‡∏ô '‡∏™‡∏≤‡∏°‡∏´‡∏°‡∏∑‡πà‡∏ô‡πÅ‡∏õ‡∏î‡∏û‡∏±‡∏ô‡∏ö‡∏≤‡∏ó‡∏ñ‡πâ‡∏ß‡∏ô'
  return bahtText(n);
}

class QuotationPdfController {

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö (‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å InvoiceReceiptController)
   * @param {string} prefix - ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (QT, INV, TX, RE)
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   */
  static async generateDocumentNumber(prefix = 'QT') {
    const DocumentNumberSystem = require('../utils/DocumentNumberSystem');

    switch (prefix) {
      case 'QT':
        return await DocumentNumberSystem.generateQuotationNumber();
      default:
        return await DocumentNumberSystem.generateQuotationNumber();
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
   * @param {object} order ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
   * @returns {Promise<{buffer: Buffer, fileName: string}>} Promise ‡∏ó‡∏µ‡πà resolve ‡πÄ‡∏õ‡πá‡∏ô buffer ‡∏Ç‡∏≠‡∏á PDF ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
   */
  static async createQuotationPdf(order) {
      // Preload signatures directly from order
      order.customer    = order.customer    || {};
      order.salesperson = order.salesperson || {}; // Ensure salesperson object exists

      // ‡πÇ‡∏´‡∏•‡∏î signature ‡∏ó‡∏±‡πâ‡∏á 3 ‡πÅ‡∏•‡∏∞‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏õ‡∏£‡∏∞‡∏ó‡∏±‡∏ö‡∏ï‡∏£‡∏≤
        console.log('üñãÔ∏è QuotationPDF Signature Data (Enhanced Debug):', {
    customer: order.customerSignature ? 'Data URL (' + order.customerSignature.substring(0, 50) + '...)' : (order.customerSignatureUrl ? 'URL (' + order.customerSignatureUrl.substring(0, 50) + '...)' : 'None'),
    salesperson: order.employeeSignature ? 'Data URL (' + order.employeeSignature.substring(0, 50) + '...)' : (order.salespersonSignatureUrl ? 'URL (' + order.salespersonSignatureUrl.substring(0, 50) + '...)' : 'None'),
    authorized: order.authorizedSignature ? 'Data URL (' + order.authorizedSignature.substring(0, 50) + '...)' : (order.authorizedSignatureUrl ? 'URL (' + order.authorizedSignatureUrl.substring(0, 50) + '...)' : 'None'),
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö order structure
    hasCustomer: !!order.customer,
    hasSalesperson: !!order.salesperson,
    hasEmployee: !!order.employee,
    orderKeys: Object.keys(order || {})
  });

      // ‡πÇ‡∏´‡∏•‡∏î signatures ‡∏û‡∏£‡πâ‡∏≠‡∏° error handling
      let custBuf = null, salesBuf = null, authBuf = null, companyStampBuf = null;

      try {
        const [custResult, salesResult, authResult, stampResult] = await Promise.allSettled([
          loadImageBuffer(order.customerSignature || order.customerSignatureUrl).catch(() => null),
          loadImageBuffer(order.employeeSignature || order.salespersonSignatureUrl).catch(() => null),
          loadImageBuffer(order.authorizedSignature || order.authorizedSignatureUrl).catch(() => null),
          loadImageBuffer('/uploads/S__15892486-Photoroom.png').catch(() => null)
        ]);

        custBuf = custResult.status === 'fulfilled' ? custResult.value : null;
        salesBuf = salesResult.status === 'fulfilled' ? salesResult.value : null;
        authBuf = authResult.status === 'fulfilled' ? authResult.value : null;
        companyStampBuf = stampResult.status === 'fulfilled' ? stampResult.value : null;

        console.log('üñãÔ∏è Signature loading results:', {
          customer: custBuf ? 'OK' : 'Failed',
          salesperson: salesBuf ? 'OK' : 'Failed',
          authorized: authBuf ? 'OK' : 'Failed',
          companyStamp: companyStampBuf ? 'OK' : 'Failed'
        });

        // üîç Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å Frontend
        console.log('üîç QuotationPDF Raw signature data received:', {
          customerSignature: order.customerSignature ? order.customerSignature.substring(0, 100) + '...' : 'EMPTY',
          customerSignatureUrl: order.customerSignatureUrl || 'EMPTY',
          employeeSignature: order.employeeSignature ? order.employeeSignature.substring(0, 100) + '...' : 'EMPTY',
          salespersonSignatureUrl: order.salespersonSignatureUrl || 'EMPTY',
          authorizedSignature: order.authorizedSignature ? order.authorizedSignature.substring(0, 100) + '...' : 'EMPTY',
          authorizedSignatureUrl: order.authorizedSignatureUrl || 'EMPTY'
        });
      } catch (signatureError) {
        console.warn('‚ö†Ô∏è Error loading signatures (continuing without signatures):', signatureError.message);
        // ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÇ‡∏´‡∏•‡∏î signature ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
      }

      console.log('üñãÔ∏è QuotationPDF Signature Buffers:', {
        customer: custBuf ? 'OK' : 'NULL',
        salesperson: salesBuf ? 'OK' : 'NULL',
        authorized: authBuf ? 'OK' : 'NULL',
        companyStamp: companyStampBuf ? 'OK' : 'NULL'
      });

      // ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á order ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ _drawSignatures ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
      order.customer.signature    = custBuf;
      order.salesperson.signature = salesBuf;
      order.authorizedSignature   = authBuf;
      order.companyStamp          = companyStampBuf;

    // ‚úÖ FIX: ‡πÉ‡∏ä‡πâ quotationNumber ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤‡∏à‡∏≤‡∏Å quotationController ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    const existingQuotationNo = order.quotationNumber || order.quotationNo || order.order_number;
    if (existingQuotationNo && existingQuotationNo !== 'undefined' && !existingQuotationNo.includes('undefined')) {
      order.quotationNo = existingQuotationNo;
      order.order_number = existingQuotationNo;
      order.quotationNumber = existingQuotationNo;
      console.log('üìÑ Using existing quotation number:', existingQuotationNo);
    } else {
      // üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ existing ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏õ‡πá‡∏ô undefined
      console.log('üìÑ No valid quotation number found, generating new one...');
      const newQuotationNo = await this.generateDocumentNumber('QT');
      order.quotationNo = newQuotationNo;
      order.order_number = newQuotationNo;
      order.quotationNumber = newQuotationNo;
      console.log('üìÑ Generated new quotation number:', newQuotationNo);
    }

    // 2.3 ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡πà‡∏≠‡∏¢‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà Promise ‡πÄ‡∏î‡∏¥‡∏°
    return new Promise((resolve, reject) => {
      try {
        // --- Font Setup ---
        let boldFontPath = CONFIG.font.boldPath;
        let boldFontName = CONFIG.font.boldName;
        if (!fs.existsSync(CONFIG.font.path)) return reject(new Error(`Font not found: ${CONFIG.font.path}`));
        if (!fs.existsSync(boldFontPath)) {
          boldFontName = CONFIG.font.name; boldFontPath = CONFIG.font.path;
        }

        // // console.log("Initializing PDFDocument...");
        const doc = new PDFDocument({
          size: CONFIG.page.size,
          margins: { top: 20, bottom: 40, left: 40, right: 40 },
          autoFirstPage: true
        });
        // // console.log("PDFDocument initialized.");

        const { width: W, height: H } = doc.page;
        let margins = doc.page.margins;

        // Check margins object
        if (!margins || typeof margins.top !== 'number' || typeof margins.bottom !== 'number' || typeof margins.left !== 'number' || typeof margins.right !== 'number') {
             const defaultMargins = { top: 50, bottom: 50, left: 50, right: 50 };
             margins = {
                top: typeof margins?.top === 'number' ? margins.top : defaultMargins.top, bottom: typeof margins?.bottom === 'number' ? margins.bottom : defaultMargins.bottom,
                left: typeof margins?.left === 'number' ? margins.left : defaultMargins.left, right: typeof margins?.right === 'number' ? margins.right : defaultMargins.right,
             };
             if (typeof margins.top !== 'number' || typeof margins.bottom !== 'number' || typeof margins.left !== 'number' || typeof margins.right !== 'number') {
                return reject(new Error('Invalid page margins received and failed to construct valid margins.'));
             }
        }
        // Check W, H
        if (typeof W !== 'number' || typeof H !== 'number' || isNaN(W) || isNaN(H) || W <= 0 || H <= 0) {
             return reject(new Error(`Invalid page dimensions: Width=${W}, Height=${H}`));
        }
        const bodyW = W - margins.left - margins.right;
        if (isNaN(bodyW) || bodyW <= 0) {
            return reject(new Error(`Calculated invalid body width: ${bodyW}`));
        }

        // --- Buffer ---
        const chunks = [];
        doc.on('data', chunks.push.bind(chunks));
        doc.on('end', () => {
            const buffer = Buffer.concat(chunks);
            const qNum = order?.quotationNo || order?.order_number || order?._id || Date.now();
            // ‡∏ñ‡πâ‡∏≤ qNum ‡∏°‡∏µ QT- ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢ ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏° QT-
            const fileName = qNum.toString().startsWith('QT-') ? `${qNum}.pdf` : `QT-${qNum}.pdf`;
            resolve({ buffer, fileName });
        });
        doc.on('error', (err) => { console.error('PDFKit stream error:', err); reject(err); });

        // --- Register Fonts ---
        doc.registerFont(CONFIG.font.name, CONFIG.font.path);
        doc.registerFont(boldFontName, boldFontPath);
        doc.font(CONFIG.font.name); // Set default

        // --- Drawing ---
        let currentY = margins.top;
        let previousY = -1;
        order = order || {};
        order.customer = order.customer || {};
        order.company = order.company || {};
        order.items = Array.isArray(order.items) ? order.items : [];

        // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å Promise
        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡πÑ‡∏ó‡∏¢
        order.issueDateFormatted = order.issueDate ? formatThaiDate(order.issueDate) : '-';
        // normalize items ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ description, quantity, unitPrice, discount, amount
        const rawItems = order.items;
        order.items = rawItems.map(i => {
  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
  const qty = ensureNumberData(i.quantity, 1);

  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ field ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤
  const down = ensureNumberData(
    i.downAmount    ??
    i.downPayment   ??
    i.down_amount
  );
  const termCount = ensureNumberData(
    i.termCount     ??
    i.term_count
  );
  const instAmount = ensureNumberData(
    i.installmentAmount     ??
    i.installment_amount
  );

  // ‚úÖ FIX: ‡πÉ‡∏ä‡πâ price ‡∏à‡∏≤‡∏Å item ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° docFee ‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤)
  const isDocumentFee = (i.name || i.description || '').toLowerCase().includes('‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°');

  let displayUnitPrice = 0;

  if (isDocumentFee) {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
    displayUnitPrice = ensureNumberData(i.price) || ensureNumberData(i.unitPrice) || ensureNumberData(i.amount);
  } else {
    // ‚úÖ FIX: ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÉ‡∏ä‡πâ price ‡∏´‡∏£‡∏∑‡∏≠ sale_price ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß)
    displayUnitPrice = ensureNumberData(i.price) || ensureNumberData(i.sale_price) || ensureNumberData(i.unitPrice);

    // ‚úÖ FIX: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å down + installment ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° docFee
    if (!displayUnitPrice) {
      displayUnitPrice = (down + termCount * instAmount) || 0;

      console.warn('‚ö†Ô∏è QuotationPDF: No item price found, calculated from installment:', {
        itemName: i.name,
        down: down,
        termCount: termCount,
        instAmount: instAmount,
        calculatedPrice: displayUnitPrice
      });
    }
  }

  const discount = ensureNumberData(i.discount);
  const amount   = displayUnitPrice * qty - discount;

  console.log('üí∞ QuotationPDF Item Price Debug (FIXED):', {
    itemName: i.name,
    price: i.price,        // ‚úÖ ‡πÉ‡∏ä‡πâ price ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
    sale_price: i.sale_price,
    unitPrice: i.unitPrice,
    displayUnitPrice: displayUnitPrice,
    isDocumentFee: isDocumentFee,
    finalAmount: amount,
    priorityOrder: 'price -> sale_price -> unitPrice'  // ‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡πâ price ‡∏°‡∏≤‡∏Å‡πà‡∏≠‡∏ô
  });

  return {
    description:       i.description    || i.name || '-',
    imei:              i.imei,
    quantity:          qty,
    unitPrice:         displayUnitPrice,
    totalPrice:        displayUnitPrice,
    downAmount:        down,
    termCount:         termCount,
    installmentAmount: instAmount,
    discount:          discount,
    amount:            amount,
   // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏° 2 ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ PDFController ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT ‡πÑ‡∏î‡πâ
   taxRate:           ensureNumberData(i.taxRate, 0),
   taxType:           (typeof i.taxType === 'string' ? i.taxType : '‡πÑ‡∏°‡πà‡∏°‡∏µ VAT')
  };
        });

        // --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Subtotal, VAT ‡πÅ‡∏•‡∏∞ Grand Total ‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏° taxType ---

        // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö step4.html
        function getDocumentFee(order) {
          try {
            // üîß ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ docFee ‡∏à‡∏≤‡∏Å order ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 0 ‡∏ö‡∏≤‡∏ó)
            if (order.docFee !== undefined && order.docFee !== null) {
              return ensureNumberData(order.docFee);
            }

            // ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å step3Data (‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô order)
            if (order.step3Data?.docFee !== undefined) {
              return ensureNumberData(order.step3Data.docFee);
            }

            // ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback - ‡πÅ‡∏™‡∏î‡∏á warning ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default 0
            console.warn('‚ö†Ô∏è QuotationPDF: DocFee not provided! Please ensure user enters document fee in step3.');
            return 0;
          } catch (error) {
            console.warn('‚ö†Ô∏è Error getting document fee, using default 500:', error);
            return 500;
          }
        }

        const docFee = getDocumentFee(order);
        const shipFee = ensureNumberData(order.shippingFee);

        console.log('üí∞ QuotationPDF Document Fee Calculation:', {
          orderDocFee: order.docFee,
          step3DocFee: order.step3Data?.docFee,
          fallbackDocFee: typeof localStorage !== 'undefined' ? localStorage.getItem('globalDocumentFee') : 'N/A',
          finalDocFee: docFee,
          orderType: 'QUOTATION',
          quotationNumber: order.quotationNo || order.order_number || order.quotationNumber,
          invoiceNumber: order.invoiceNumber || 'N/A'
        });

        // Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• taxType ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö
        console.log('üîç QuotationPDF Tax Debug:', {
          taxType: order.taxType,
          documentType: order.documentType,
          docFee: order.docFee,
          originalData: {
            taxType: order.taxType,
            vatAmount: order.vatAmount,
            docFee: order.docFee
          }
        });

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        let itemsSubtotal = order.items.reduce((sum, item) => sum + (item.amount || 0), 0);

        let vatTotal = 0;

        if (order.taxType === 'inclusive') {
          // ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡πâ‡∏ß
          const totalBeforeTax = itemsSubtotal + docFee + shipFee;
          vatTotal = totalBeforeTax * 0.07 / 1.07;

          order.summary = order.summary || {};
          order.summary.beforeTax = totalBeforeTax - vatTotal;
          order.summary.tax = vatTotal;
          order.summary.netTotal = totalBeforeTax;
        } else if (order.taxType === 'exclusive' || order.taxType === 'vat') {
          // ‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤
          vatTotal = (itemsSubtotal + docFee + shipFee) * 0.07;
          const totalBeforeTax = itemsSubtotal + docFee + shipFee;

          order.summary = order.summary || {};
          order.summary.beforeTax = totalBeforeTax;
          order.summary.tax = vatTotal;
          order.summary.netTotal = totalBeforeTax + vatTotal;
        } else {
          // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ
          vatTotal = 0;
          order.summary = order.summary || {};
          order.summary.beforeTax = itemsSubtotal + docFee + shipFee;
          order.summary.tax = vatTotal;
          order.summary.netTotal = order.summary.beforeTax;
        }

        order.vatTotal = vatTotal;
        order.grandTotal = order.summary.netTotal;

        console.log('üí∞ QuotationPDF Price Calculation (updated to match InvoicePDF):', {
          itemsSubtotal,
          docFee,
          shipFee,
          vatTotal,
          taxType: order.taxType,
          summary: order.summary,
          grandTotal: order.grandTotal
        });

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ docFee ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô order ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ _drawItemsTable ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
        order.docFee = docFee;

        // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏≥ - ‚úÖ FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà NaN ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        if (!isNaN(order.summary.netTotal) && isFinite(order.summary.netTotal)) {
          order.amountInWords = toThaiBahtText(order.summary.netTotal);
        } else {
          console.error('‚ö†Ô∏è QuotationPDF: Cannot convert NaN to Thai Baht Text, using default');
          order.amountInWords = toThaiBahtText(0); // ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default ‡∏≠‡∏∑‡πà‡∏ô
        }

        // Function to check Y advancement (moved inside for scope, but could be a static helper)
        function checkYAdvance(sectionName, newY) {
             if (typeof newY !== 'number' || isNaN(newY)) throw new Error(`Invalid Y value (NaN) from ${sectionName}.`);
             if (newY < previousY) console.error(`${sectionName} Y went backwards! Prev: ${previousY}, New: ${newY}`);
             else if (newY === previousY && sectionName !== 'Terms') console.warn(`${sectionName} did not advance Y. Prev: ${previousY}, New: ${newY}`);
             previousY = newY;
             return newY;
        }

        // // console.log(`Starting PDF Draw. Initial Y: ${currentY}`);

        // 1. Header
        currentY = this._drawHeader(doc, order, margins, W, currentY);
        currentY = checkYAdvance('Header', currentY);

        // 2. Customer/Quote Info (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡πÉ‡∏´‡πâ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á)
        currentY = this._drawCustomerAndQuoteInfo(doc, order, margins, bodyW, currentY);
        currentY = checkYAdvance('Customer/Quote Info', currentY); currentY += 5;

        // 3. Items Table
        if (order.items.length > 0) {
            currentY = this._drawItemsTable(doc, order, margins, bodyW, currentY, H);
            currentY += 10;

            // ‡∏ß‡∏≤‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            currentY += 10;
            const summaryY = currentY;

            // ‡∏ß‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç Summary (Subtotal/VAT/Grand Total) ‡∏ù‡∏±‡πà‡∏á‡∏Ç‡∏ß‡∏≤
            currentY = this._drawSummary(doc, order, margins, bodyW, summaryY);
            currentY += 10;

            // ‡∏ß‡∏≤‡∏î‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢‡πÉ‡∏ï‡πâ summary
            const boxW_th = bodyW * 0.6;
            const boxH_th = 25;
            const pad_th = 5;

            // ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢
            doc.rect(margins.left, currentY, boxW_th, boxH_th)
               .fill(CONFIG.color.bgAccent);
            // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡πÑ‡∏ó‡∏¢
            doc.fillColor(CONFIG.color.textHeader)
               .font(CONFIG.font.boldName)
               .fontSize(CONFIG.sizes.textBody)
               .text(
                 order.amountInWords,
                 margins.left + pad_th,
                 currentY + (boxH_th - CONFIG.sizes.textBody) / 2,
                 { width: boxW_th - pad_th * 2, align: 'left' }
               );

            currentY += boxH_th + 20;

            // --- ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ö‡∏•‡πá‡∏≠‡∏Å "‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô" ‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö ---
            const signaturesHeight = 50; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 65 ‡πÄ‡∏õ‡πá‡∏ô 50
            const pageFooterHeight = 15; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 15
            const termsHeight = 25; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö

            // 2) ‡∏ß‡∏≤‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÉ‡∏´‡πâ‡∏û‡πâ‡∏ô summary)
            const signatureOffset = 40;   // ‡∏Ç‡∏¢‡∏±‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å signature ‡∏•‡∏á‡∏≠‡∏µ‡∏Å 40pt
            const sigY             = currentY + signatureOffset;
            this._drawSignatures(doc, order, margins, bodyW, sigY);

            // 3) ‡∏´‡∏•‡∏±‡∏á signature ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏µ‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÑ‡∏°‡πà‡∏ä‡∏ô
            const sigBlockH      = 68;    // ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö height ‡πÉ‡∏ô _drawSignatures
            const paddingBetween = 10;    // ‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô
            const termsOffset    = 20;    // ‡∏Ç‡∏¢‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏•‡∏á‡∏≠‡∏µ‡∏Å 20pt
            const termsY         = sigY + sigBlockH + paddingBetween + termsOffset;
            this._drawTerms(doc, order, margins, bodyW, termsY);

            // 4) ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ ‡∏ß‡∏≤‡∏î Page Footer ‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î PDF
            this._drawPageFooter(doc, margins, W, H);
            doc.end();

    } else {
      previousY = currentY;
    }

      } catch (err) {
        console.error(`Error in createQuotationPdf: ${err.message}\nStack: ${err.stack}`);
        reject(err);
      }
    });
  }

  // ===========================================
  // Drawing Helper Functions
  // ===========================================

  /** @private ‡∏ß‡∏≤‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß */
  static _drawHeader(doc, order, margins, pageW, startY) {
    const fullW    = pageW - margins.left - margins.right;
    const logoPath = path.join(__dirname, '..', 'Logo', 'Logo2png.png');
    const logoW    = CONFIG.sizes.logo.w;
    let   logoH    = 0;

    // 1) ‡∏ß‡∏≤‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏ù‡∏±‡πà‡∏á‡∏ã‡πâ‡∏≤‡∏¢‡∏™‡∏∏‡∏î
    if (fs.existsSync(logoPath)) {
      try {
        const img = doc.openImage(logoPath);
        if (img && img.width && img.height) {
          logoH = (img.height * logoW) / img.width;
        } else {
          logoH = logoW * 0.6; // ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì
        }
        doc.image(logoPath, margins.left, startY, { width: logoW });
      } catch (logoError) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÑ‡∏î‡πâ:', logoError.message);
        logoH = 60; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á
      }
    }

    // 2) ‡∏ß‡∏≤‡∏î title "‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ / QUOTATION" ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á 10px)
const titleText = '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ / QUOTATION';
const titleFont = CONFIG.font.boldName;
const titleSize = CONFIG.sizes.heading1 + 2;
doc.font(titleFont).fontSize(titleSize);
const titleW = doc.widthOfString(titleText);

// ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏•‡∏á‡∏≠‡∏µ‡∏Å 10
const TITLE_OFFSET = 30;

doc.fillColor(CONFIG.color.primaryBlue)
   .text(
     titleText,
     margins.left + fullW - titleW,
     startY + TITLE_OFFSET,           // <-- ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
     { width: titleW, align: 'right' }
   );

    // 3) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡∏Å‡∏±‡∏ö title
    const padding = 10;
    const compX    = margins.left + logoW + padding;
    const compW    = fullW - logoW - padding - titleW - padding;

    // 4) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    const branch = order.branch || {};
    const lines = [
      { text: order.company?.name || '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        opts: { font: CONFIG.font.boldName, fontSize: CONFIG.sizes.heading1 - 2 } },
      ...(branch.name
        ? [{ text: `‡∏™‡∏≤‡∏Ç‡∏≤: ${branch.name} ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤ ${branch.code || '-'}`,
             opts: { font: CONFIG.font.name, fontSize: CONFIG.sizes.textBody } }]
        : []),
      ...(branch.address
        ? [{ text: branch.address, opts: { font: CONFIG.font.name, fontSize: CONFIG.sizes.textBody } }]
        : []),
      { text: `‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£ ${branch.taxId || '0945566000616'}`,
        opts: { font: CONFIG.font.name, fontSize: CONFIG.sizes.textBody } },
      { text: `‡πÇ‡∏ó‡∏£: ${branch.tel || '09-2427-0769'}`,
        opts: { font: CONFIG.font.name, fontSize: CONFIG.sizes.textBody } },
    ];

    // 5) ‡∏ß‡∏≤‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á ‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏ã‡πâ‡∏≤‡∏¢ (align:'left')
    let y = startY;
    lines.forEach(({ text, opts }) => {
      doc
        .font(opts.font)
        .fontSize(opts.fontSize)
        .fillColor(CONFIG.color.textDark)
        .text(text, compX, y, { width: compW, align: 'left' });
      y += doc.currentLineHeight(true) * CONFIG.sizes.lineSpacing;
    });

    // 6) ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ Y ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏ß‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏ï‡πâ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ô‡∏µ‡πâ
    return Math.max(startY + logoH, y) + 10;
  }

  /** @private ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ */
  static _drawCustomerAndQuoteInfo(doc, order, margins, bodyW, startY) {
    const lineSpacing = CONFIG.sizes.lineSpacing; const leftColX = margins.left;
    const leftColW = bodyW * 0.55 - 10; const rightColX = margins.left + bodyW * 0.55 + 10;
    const rightColW = bodyW * 0.45 - 10; const labelW = 75;
    const valueIndent = 5;
    let leftY = startY; let rightY = startY;

// ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á order.customer: name, taxId, address, phone
    const customerFields = [
      { label: '‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',       labelEn: 'Customer Name', value: order.customer.name    || '-' },
      { label: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£', labelEn: 'Tax ID',        value: order.customer.taxId  || '-' },
      { label: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà',           labelEn: 'Address',       value: order.customer.address|| '-' },
      { label: '‡πÇ‡∏ó‡∏£.',             labelEn: 'Tel.',          value: order.customer.phone  || '-' }
    ];

    customerFields.forEach(field => {
        const fieldStartY = leftY;
        doc.font(CONFIG.font.boldName).fontSize(CONFIG.sizes.textBody).fillColor(CONFIG.color.textBlack);
        doc.text(field.label, leftColX, leftY, { width: labelW });
        let labelH1 = ensureHeight(doc.heightOfString(field.label, { width: labelW }) * 0.8);
        let currentLabelY = leftY + labelH1;
        doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textLabel).fillColor(CONFIG.color.textLight);
        doc.text(field.labelEn, leftColX, currentLabelY, { width: labelW });
        let labelH2 = ensureHeight(doc.heightOfString(field.labelEn, { width: labelW }));
        const labelBlockHeight = (currentLabelY - fieldStartY) + labelH2;

        doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textBody).fillColor(CONFIG.color.textDark);
        const valueX = leftColX + labelW + valueIndent; const valueW = leftColW - labelW - valueIndent;
        // ‚úÖ FIX: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà '-' ‡∏´‡∏£‡∏∑‡∏≠ empty
        const valueStr = field.value && field.value !== '-' ? String(field.value) : '-';
        doc.text(valueStr, valueX, fieldStartY, { width: valueW });
        const valueHeight = ensureHeight(doc.heightOfString(valueStr, { width: valueW }));
        leftY = fieldStartY + Math.max(labelBlockHeight, valueHeight) + (CONFIG.sizes.textBody * lineSpacing * 0.7);
    });

    const quoteFields = [
        {
          label:    '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà',
          labelEn:  'Quotation No.',
          value:    (() => {
            // ‚úÖ FIX: Debug ‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ quotationNumber ‡∏à‡∏≤‡∏Å backend ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            const quotationNum = order.quotationNumber || order.quotationNo;
            const orderNum = order.order_number || order.number;
            const contractId = order._id;

            console.log('üîç QuotationPDF Debug - Number fields received:', {
              quotationNumber: order.quotationNumber,
              quotationNo: order.quotationNo,
              order_number: order.order_number,
              number: order.number,
              _id: order._id,
              selectedValue: quotationNum || orderNum || contractId || '-'
            });

            // ‚úÖ FIX: ‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ quotationNumber ‡πÅ‡∏•‡∏∞ quotationNo ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            // ‡∏´‡πâ‡∏≤‡∏°‡πÉ‡∏ä‡πâ order.number ‡∏´‡∏£‡∏∑‡∏≠ order._id ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô INST
            if (!quotationNum) {
              console.error('‚ùå QuotationPDF: Missing quotationNumber! Expected QT-YYMMDD-XXXX format');
              console.error('‚ùå Received order data:', {
                quotationNumber: order.quotationNumber,
                quotationNo: order.quotationNo,
                fallbackOrderNumber: orderNum,
                contractId: contractId
              });
            }
            return quotationNum || 'QT-ERROR-MISSING';
          })()
        },
        {
          label:    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
          labelEn:  'Issue Date',
          value:    order.issueDateFormatted
                  || (order.issueDate
                      ? new Date(order.issueDate).toLocaleDateString('th-TH')
                      : '-')
        },
        { label: '‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', labelEn: 'Credit Term', value: order.creditTerm || order.paymentMethod || '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î' },
        { label: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢',  labelEn: 'Salesman',    value: order.salesperson?.name || '-' }
    ];
    quoteFields.forEach(field => {
        const fieldStartY = rightY; const labelText = field.label + ' :';
        doc.font(CONFIG.font.boldName).fontSize(CONFIG.sizes.textBody).fillColor(CONFIG.color.textBlack);
        doc.text(labelText, rightColX, rightY, { width: labelW + 5 });
        let labelH1 = ensureHeight(doc.heightOfString(labelText, { width: labelW + 5 }) * 0.8);
        let currentLabelY = rightY + labelH1;
        doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textLabel).fillColor(CONFIG.color.textLight);
        doc.text(field.labelEn, rightColX, currentLabelY, { width: labelW });
        let labelH2 = ensureHeight(doc.heightOfString(field.labelEn, { width: labelW }));
        const labelBlockHeight = (currentLabelY - fieldStartY) + labelH2;

        doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textBody).fillColor(CONFIG.color.textDark);
        const valueX = rightColX + labelW + 5 + valueIndent; const valueW = rightColW - labelW - 5 - valueIndent;
        const valueStr = String(field.value); doc.text(valueStr, valueX, fieldStartY, { width: valueW });
        const valueHeight = ensureHeight(doc.heightOfString(valueStr, { width: valueW }));
        rightY = fieldStartY + Math.max(labelBlockHeight, valueHeight) + (CONFIG.sizes.textBody * lineSpacing * 0.7);
    });

    const bottomY = Math.max(leftY, rightY);
    if (isNaN(bottomY)) { console.error('bottomY in Customer/Quote Info is NaN!'); return startY + 120; }
    doc.moveTo(margins.left, bottomY + 5).lineTo(margins.left + bodyW, bottomY + 5).strokeColor(CONFIG.color.lineLight).lineWidth(0.5).stroke();
    return bottomY + 10;
  }

  /** @private ‡∏ß‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ */
  static _drawItemsTable(doc, order, margins, bodyW, startY, pageH) {
    const leftX = margins.left;
    const headerH = 30;
    // ‡πÄ‡∏≠‡∏≤ rowH ‡∏ï‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏≠‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡∏ô‡∏≤‡∏°‡∏¥‡∏Å‡πÅ‡∏ó‡∏ô)
    const cols = { ...CONFIG.layout.tableCols };
    let currentY = startY;

    // ‡πÄ‡∏≠‡∏≤ padV/padH ‡∏°‡∏≤‡πÑ‡∏ß‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ô header ‡πÅ‡∏•‡∏∞ data rows
    const padH = 5;
    const defaultPadV = 4; // padding ‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥

    // --- Header row ---
    doc.rect(leftX, currentY, bodyW, headerH).fill(CONFIG.color.bgAccent);
    const headers = [
      { th: '‡∏•‡∏≥‡∏î‡∏±‡∏ö',            en: 'No',           key: 'no',    align: 'center' },
      { th: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',           en: 'Description',  key: 'desc',  align: 'left'   },
      { th: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',            en: 'Quantity',     key: 'qty',   align: 'center' },
      { th: '‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢',       en: 'Unit Price',   key: 'unit',  align: 'right'  },
      { th: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î',           en: 'Discount',     key: 'disc',  align: 'right'  },
      { th: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)',  en: 'Amount',       key: 'amt',   align: 'right'  }
    ];
    let currentX = leftX;
    const headerPaddingV = 5;
    const thY = currentY + headerPaddingV;
    const enY = thY + CONFIG.sizes.tableHeader * 0.9 + 2;
    doc.fillColor(CONFIG.color.textHeader);

    headers.forEach(h => {
      // ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏ö‡∏ô (‡πÑ‡∏ó‡∏¢) ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤ padH ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏î width ‡∏•‡∏á 2*padH
      doc
        .font(CONFIG.font.boldName).fontSize(CONFIG.sizes.textBody)
        .text(
          h.th,
          currentX + padH,
          thY,
          { width: cols[h.key] - 2*padH, align: h.align }
        );
      // ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏•‡πà‡∏≤‡∏á (Eng) ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
      doc
        .font(CONFIG.font.name).fontSize(CONFIG.sizes.textLabel)
        .text(
          h.en,
          currentX + padH,
          enY,
          { width: cols[h.key] - 2*padH, align: h.align }
        );
      currentX += cols[h.key];
    });

    currentY += headerH;
    doc.moveTo(leftX, currentY).lineTo(leftX + bodyW, currentY).strokeColor(CONFIG.color.lineDark).lineWidth(0.7).stroke();

    // --- Data rows ---
    doc.font(CONFIG.font.name)
       .fontSize(CONFIG.sizes.tableRow)
       .fillColor(CONFIG.color.textDark);

    order.items.forEach((item, i) => {
      // ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
      const qty = ensureNumberData(item.quantity, 1);
      const unitPrice = ensureNumberData(item.unitPrice || item.price || item.sale_price, 0);
      const discount = ensureNumberData(item.discount, 0);

      // ‚úÖ FIX: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      const displayUnitPrice = item.isDocumentFee ? unitPrice : (item.sale_price || item.price || unitPrice);
      const amount = (displayUnitPrice * qty) - discount;

      // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      const itemDescription = item.description || item.name || '-';
      const itemNo = (i + 1).toString();

      // 1. ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + IMEI
      const desc = itemDescription;

      // ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.tableRow);
      const descW = cols.desc - 2 * padH; // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X
      const descHeight = doc.heightOfString(desc, { width: descW });

      // ‡∏ß‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á IMEI ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      let imeiHeight = 0;
      if (item.imei) {
        doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textLabel);
        imeiHeight = doc.heightOfString(`IMEI: ${item.imei}`, { width: descW });
      }

      // ‡∏£‡∏ß‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡∏ö‡∏ô‚Äì‡∏•‡πà‡∏≤‡∏á
      const contentH = descHeight + imeiHeight;
      const rowH = Math.max(26, contentH + defaultPadV * 2);

      // 2. ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      const y = currentY + (rowH - contentH) / 2;  // ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á

      let x = leftX;
      // ‡∏ß‡∏≤‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå Description
      doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.tableRow).fillColor(CONFIG.color.textDark);
      doc.text(itemNo, x, y, { width: cols.no, align: 'center' });
      x += cols.no;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á Description/IMEI ‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå No ‡πÅ‡∏•‡πâ‡∏ß
      const descX = x + padH;

      // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ + IMEI ‡πÉ‡∏ï‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      // 1) ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      doc
        .font(CONFIG.font.name)
        .fontSize(CONFIG.sizes.tableRow)
        .fillColor(CONFIG.color.textDark)
        .text(desc, descX, y, {
          width: descW,
          align: 'left'
        });

      // 2) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ imei ‡πÉ‡∏´‡πâ‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ï‡πâ‡∏ä‡∏∑‡πà‡∏≠
      if (item.imei) {
        const imeiY = y + descHeight;
        doc
          .font(CONFIG.font.name)
          .fontSize(CONFIG.sizes.textLabel)
          .fillColor(CONFIG.color.textLight)
          .text(`IMEI: ${item.imei}`, descX, imeiY, {
            width: descW,
            align: 'left'
          });
      }
      x += cols.desc;

      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
      doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.tableRow).fillColor(CONFIG.color.textDark);
      doc.text(qty, x, y, { width: cols.qty, align: 'center' });
      x += cols.qty;

      // ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢
      doc.text(displayUnitPrice.toLocaleString('en-US', { minimumFractionDigits: 2 }), x, y, {
        width: cols.unit - padH, align: 'right'
      });
      x += cols.unit;

      // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
      doc.text(discount.toLocaleString('en-US', { minimumFractionDigits: 2 }), x, y, {
        width: cols.disc - padH, align: 'right'
      });
      x += cols.disc;

      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      doc.text(amount.toLocaleString('en-US', { minimumFractionDigits: 2 }), x, y, {
        width: cols.amt - padH, align: 'right'
      });

      // 3. ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô currentY ‡∏ï‡∏≤‡∏° rowH ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡πÉ‡∏ï‡πâ
      currentY += rowH;
      doc.moveTo(leftX, currentY)
         .lineTo(leftX + bodyW, currentY)
         .strokeColor(CONFIG.color.lineLight)
         .lineWidth(0.5)
         .stroke();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Ç‡∏∂‡πâ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
      if (currentY > pageH - 150) {
        currentY = this._checkPageBreak(doc, currentY, pageH, margins);
        // Note: _redrawTableHeader method doesn't exist, so we'll skip it for now
        // This means table headers won't be redrawn on new pages, but the PDF will still work
      }
    });

        // --- Document Fee row ---
    const docFeeForTable = ensureNumberData(order.docFee) || 0; // üîß ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback 500 - ‡πÉ‡∏ä‡πâ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (docFeeForTable > 0) {
      let x = leftX;
      const rowH = 26; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
      const y = currentY + defaultPadV;

      // 1. No
      doc.text(order.items.length + 1, x, y, { width: cols.no, align: 'center' });
      x += cols.no;

      // 2. Description
      doc.text('‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', x + padH, y, {
        width: cols.desc - 2 * padH, align: 'left'
      });
      x += cols.desc;

      // 3. Quantity
      doc.text('1', x, y, { width: cols.qty, align: 'center' });
      x += cols.qty;

      // 4. Unit Price
      doc.text(
        docFeeForTable.toLocaleString('en-US', { minimumFractionDigits: 2 }),
        x, y,
        { width: cols.unit - padH, align: 'right' }
      );
      x += cols.unit;

      // 5. Discount
      doc.text('-', x, y, { width: cols.disc, align: 'right' });
      x += cols.disc;

      // 6. Amount
      doc.text(docFeeForTable.toLocaleString('en-US', { minimumFractionDigits: 2 }), x, y, {
        width: cols.amt - padH, align: 'right'
      });
      currentY += rowH;
      doc.moveTo(leftX, currentY)
         .lineTo(leftX + bodyW, currentY)
       .strokeColor(CONFIG.color.lineLight)
         .lineWidth(0.5)
       .stroke();
    }

    // --- Shipping Fee row (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå) ---
    const shipFee = ensureNumberData(order.shippingFee);
    if (order.pickupMethod === 'online' && shipFee > 0) {
        let x = leftX;
        const rowH = 26; // ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
        const y = currentY + defaultPadV;

        // 1. ‡∏•‡∏≥‡∏î‡∏±‡∏ö
        doc.text(order.items.length + 1 + (docFeeForTable>0?1:0), x, y, { width: cols.no, align: 'center' });
        x += cols.no;

        // 2. ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
        doc.text('‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á', x + padH, y, { width: cols.desc - 2*padH, align: 'left' });
        x += cols.desc;

        // 3. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        doc.text('1', x, y, { width: cols.qty, align: 'center' });
        x += cols.qty;

        // 4. ‡∏£‡∏≤‡∏Ñ‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢
        doc.text(shipFee.toLocaleString('en-US', { minimumFractionDigits: 2 }), x, y, {
          width: cols.unit - padH, align: 'right'
        });
        x += cols.unit;

        // 5. ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
        doc.text('-', x, y, { width: cols.disc, align: 'right' });
        x += cols.disc;

        // 6. ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô (‡∏ö‡∏≤‡∏ó)
        doc.text(shipFee.toLocaleString('en-US', { minimumFractionDigits: 2 }), x, y, {
          width: cols.amt - padH, align: 'right'
        });

        currentY += rowH;
        doc.moveTo(leftX, currentY)
           .lineTo(leftX + bodyW, currentY)
           .strokeColor(CONFIG.color.lineLight)
           .lineWidth(0.5)
           .stroke();
      }

    return currentY;
  }

   /** @private ‡∏ß‡∏≤‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° */
  static _drawSummary(doc, order, margins, bodyW, startY) {
    console.log('üìä Drawing summary section...');

    const rightAlign = margins.left + bodyW;
    const lineHeight = 18;
    const summaryWidth = 200;
    let currentY = startY;

    // üîß FIX: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å order.summary ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
    console.log('üí∞ Using pre-calculated summary data:', {
      orderSummary: order.summary,
      orderVatTotal: order.vatTotal,
      orderGrandTotal: order.grandTotal
    });

    // ‚úÖ FIX: ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    const regularItems = order.items.filter(item => !item.isDocumentFee);
    const docFeeItems = order.items.filter(item => item.isDocumentFee);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°)
    const subtotal = Array.isArray(regularItems)
      ? regularItems.reduce((sum, item) => sum + (parseFloat(item.totalPrice) || parseFloat(item.amount) || 0), 0)
      : 0;

    // ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ - ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å items ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£ double count
    const docFee = docFeeItems.length > 0
      ? docFeeItems.reduce((sum, item) => sum + (parseFloat(item.totalPrice) || parseFloat(item.amount) || 0), 0)
      : (parseFloat(order.docFee) || 0);

    // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
    const discount = parseFloat(order.summary?.discount) || 0;

    // ‡∏¢‡∏≠‡∏î‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î
    const afterDiscount = subtotal + docFee - discount;

    console.log('üí∞ QuotationPDF Price Calculation (updated to fix double docFee):', {
      regularItemsCount: regularItems.length,
      docFeeItemsCount: docFeeItems.length,
      itemsSubtotal: subtotal,
      docFee: docFee,
      afterDiscount: afterDiscount,
      regularItems: regularItems.map(i => ({ name: i.description || i.name, amount: i.totalPrice || i.amount })),
      docFeeItems: docFeeItems.map(i => ({ name: i.description || i.name, amount: i.totalPrice || i.amount }))
    });

    // üîß FIX: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å order.summary ‡∏´‡∏£‡∏∑‡∏≠ step3 data ‡πÅ‡∏ó‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
    let vatAmount = parseFloat(order.summary?.tax) || parseFloat(order.vatAmount) || parseFloat(order.vatTotal) || 0;
    let finalTotal = parseFloat(order.summary?.netTotal) || parseFloat(order.totalWithTax) || parseFloat(order.grandTotal) || afterDiscount;

    // üîß FIX: ‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© VAT ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
    vatAmount = Math.round(vatAmount * 100) / 100;
    finalTotal = Math.round(finalTotal * 100) / 100;

    // üîß FIX: ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ summary ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ step3 data ‡πÉ‡∏´‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏° (fallback)
    if (!order.summary?.netTotal && !order.totalWithTax && !order.grandTotal && !order.vatAmount) {
      console.warn('‚ö†Ô∏è No pre-calculated summary or step3 tax data found, calculating manually...');
      if (order.taxType === 'inclusive') {
        // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡πâ‡∏ß - ‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≠‡∏Å
        vatAmount = Math.round((afterDiscount / 1.07) * 0.07 * 100) / 100;
        finalTotal = afterDiscount; // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏•‡πâ‡∏ß
      } else if (order.taxType === 'exclusive' || order.taxType === 'vat') {
        // ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ - ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏µ 7%
        vatAmount = Math.round(afterDiscount * 0.07 * 100) / 100;
        finalTotal = Math.round((afterDiscount + vatAmount) * 100) / 100;
      } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ
        vatAmount = 0;
        finalTotal = afterDiscount;
      }
    }

    // üîß FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ finalTotal ‡∏£‡∏ß‡∏° VAT ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (vatAmount > 0 && order.taxType === 'exclusive') {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô exclusive ‡πÅ‡∏•‡∏∞‡∏°‡∏µ VAT ‡πÅ‡∏ï‡πà finalTotal ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° VAT
      const expectedTotal = Math.round((afterDiscount + vatAmount) * 100) / 100;
      if (Math.abs(finalTotal - expectedTotal) > 0.01) {
        console.log('üîß Adjusting finalTotal to include VAT:', {
          originalFinalTotal: finalTotal,
          afterDiscount,
          vatAmount,
          adjustedFinalTotal: expectedTotal
        });
        finalTotal = expectedTotal;
      }
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á summary data
    const summaryItems = [
      { label: '‡∏£‡∏ß‡∏°‡πÄ‡∏á‡∏¥‡∏ô', value: subtotal, format: 'currency' },
      { label: '‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', value: docFee, format: 'currency' },
      { label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î', value: discount, format: 'currency' },
      { label: '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏´‡∏•‡∏±‡∏á‡∏´‡∏±‡∏Å‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î', value: afterDiscount, format: 'currency', separator: true }
    ];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏©‡∏µ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (vatAmount > 0) {
      summaryItems.push({
        label: '‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏° 7%',
        value: vatAmount,
        format: 'currency'
      });
    }

    // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
    summaryItems.push({
      label: '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      value: finalTotal,
      format: 'currency',
      bold: true,
      separator: true
    });

    console.log('üí∞ Summary calculation:', {
      subtotal,
      docFee,
      discount,
      afterDiscount,
      vatAmount,
      finalTotal,
      taxType: order.taxType
    });

    // ‡∏ß‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏£‡∏∏‡∏õ
    summaryItems.forEach((item, index) => {
      if (item.separator && index > 0) {
        currentY += 5;
        doc.moveTo(rightAlign - summaryWidth, currentY)
           .lineTo(rightAlign, currentY)
           .stroke();
        currentY += 10;
      }

      const fontSize = item.bold ? 12 : 10;
      const fontWeight = item.bold ? 'bold' : 'normal';

      // ‡∏õ‡πâ‡∏≤‡∏¢‡∏Å‡∏≥‡∏Å‡∏±‡∏ö
      doc.font('./fonts/THSarabunNew.ttf')
         .fontSize(fontSize)
         .text(item.label, rightAlign - summaryWidth, currentY, {
           width: summaryWidth - 80,
           align: 'left'
         });

      // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô
      const valueText = item.format === 'currency'
        ? `‡∏ø${item.value.toLocaleString('th-TH', {minimumFractionDigits: 2})}`
        : item.value.toString();

      doc.font(fontWeight === 'bold' ? './fonts/THSarabunNew Bold.ttf' : './fonts/THSarabunNew.ttf')
         .text(valueText, rightAlign - 75, currentY, {
           width: 75,
           align: 'right'
         });

      currentY += lineHeight;
    });

    // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏µ‡∏î‡πÉ‡∏ï‡πâ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    currentY += 5;
    doc.moveTo(rightAlign - summaryWidth, currentY)
       .lineTo(rightAlign, currentY)
       .lineWidth(2)
       .stroke()
       .lineWidth(1);

    return currentY + 20;
  }

  /** @private ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡πà‡∏ß‡∏ô‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç */
  static _getTermsHeight(doc, order, bodyW) {
    // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö
    return 25; // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ñ‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
  }

  /** @private ‡∏ß‡∏≤‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô */
  static _drawSignatures(doc, order, margins, bodyW, startY) {
    const sigBlockH = 68; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 70 ‡πÄ‡∏õ‡πá‡∏ô 68 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏´‡∏•‡∏∏‡∏î‡∏´‡∏ô‡πâ‡∏≤
    const colW = bodyW / 3;
    const sigLineW = colW * 0.8;
    const sigLineXOffset = (colW - sigLineW) / 2;
    const lineY = startY + 18; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 18
    const imgH = 45; // ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°
    const imgPad = 6; // ‡∏•‡∏î‡∏à‡∏≤‡∏Å 8 ‡πÄ‡∏õ‡πá‡∏ô 6

    const colsData = [
      { label: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',        labelEn: 'Customer Signature',   key: 'customer.signature' },
      { label: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢',     labelEn: 'Salesperson',          key: 'salesperson.signature' },
      { label: '‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥',      labelEn: 'Authorized Signature', key: 'companyStamp' }
    ];

    const currentDateThai = formatThaiDate(new Date().toISOString()); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

    colsData.forEach((col, i) => {
      const x0 = margins.left + colW * i;
      const sigBuffer = col.key.split('.').reduce((o, k) => (o && o[k] != null ? o[k] : null), order);

      const imgX = x0 + sigLineXOffset;
      const imgY = lineY - imgH - imgPad;

      let signatureDrawn = false;
      if (Buffer.isBuffer(sigBuffer)) {
        try {
          doc.image(sigBuffer, imgX, imgY, { fit: [sigLineW, imgH], align: 'center', valign: 'bottom' });
          signatureDrawn = true;
        } catch (e) {
          console.warn(`‚ö†Ô∏è Error drawing signature ${col.label}:`, e.message);
        }
      }

      if (!signatureDrawn) {
        const lineX = x0 + sigLineXOffset;
        doc.moveTo(lineX, lineY)
           .lineTo(lineX + sigLineW, lineY)
           .strokeColor(CONFIG.color.sigLine)
           .stroke();
      }

      let textY = lineY + imgPad + 3; // ‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô 3
      doc
        .font(CONFIG.font.boldName)
        .fontSize(CONFIG.sizes.textLabel)
        .fillColor(CONFIG.color.textDark)
        .text(col.label, x0, textY, { width: colW, align: 'center' });
      textY += 10; // ‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 10
      doc
        .font(CONFIG.font.name)
        .fontSize(CONFIG.sizes.textSmall)
        .fillColor(CONFIG.color.textLight)
        .text(col.labelEn, x0, textY, { width: colW, align: 'center' });
      textY += 10; // ‡∏•‡∏î‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 10
      doc
        .font(CONFIG.font.name)
        .fontSize(CONFIG.sizes.textSmall)
        .fillColor(CONFIG.color.textLight)
        .text(currentDateThai, x0, textY, { width: colW, align: 'center' });
    });

    doc.save()
       .moveTo(margins.left + colW,   startY + 5)
       .lineTo(margins.left + colW,   startY + sigBlockH - 5)
       .moveTo(margins.left + 2*colW, startY + 5)
       .lineTo(margins.left + 2*colW, startY + sigBlockH - 5)
       .strokeColor(CONFIG.color.lineLight)
       .lineWidth(0.5)
       .stroke()
       .restore();
  }

  /** @private ‡∏ß‡∏≤‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Å‡∏≥‡∏´‡∏ô‡∏î */
  static _drawTerms(doc, order, margins, bodyW, startY, maxHeight) {
    let currentY = startY;

    // ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö)
    doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textLabel).fillColor(CONFIG.color.textDark);
    const termsText = order.termsText ||
`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 1 ‡∏õ‡∏µ ‡∏´‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏≠‡∏ü‡πÅ‡∏ß‡∏£‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏à‡∏∞‡∏£‡∏≠‡∏ó‡∏≤‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏Å ‡πÅ‡∏ï‡∏Å ‡πÇ‡∏î‡∏ô‡∏ô‡πâ‡∏≥ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ`;

    const termOpts = {
      width: bodyW,
      lineGap: 2,
      align: 'justify' // ‡∏à‡∏±‡∏î‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢
    };

    doc
      .font(CONFIG.font.name)
      .fontSize(CONFIG.sizes.textSmall) // ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏•‡πá‡∏Å‡∏•‡∏á
      .fillColor(CONFIG.color.textDark)
      .text(termsText, margins.left, currentY, termOpts);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏£‡∏¥‡∏á (‡πÅ‡∏ö‡∏ö‡∏Å‡∏£‡∏∞‡∏ä‡∏±‡∏ö)
    const termsHeight = doc.heightOfString(termsText, termOpts);
    currentY += Math.min(termsHeight, 30); // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 30 point

    return currentY;
  }

  /** @private ‡∏ß‡∏≤‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤ */
  static _drawPageFooter(doc, margins, pageW, pageH) {
    const footerY = pageH - margins.bottom + 10;
    const lineY   = footerY - 12;
    doc
      .moveTo(margins.left, lineY)
      .lineTo(pageW - margins.right, lineY)
      .strokeColor(CONFIG.color.primaryBlue)
      .lineWidth(1)
      .stroke();
    const pageText = '‡∏´‡∏ô‡πâ‡∏≤ 1 / 1';
    doc
      .font(CONFIG.font.name)
      .fontSize(CONFIG.sizes.textSmall)
      .fillColor(CONFIG.color.textLight)
      .text(pageText,
            margins.left,
            footerY,
            { width: pageW - margins.left - margins.right, align: 'left' });
  }
} // <-- End of QuotationPdfController class

module.exports = QuotationPdfController;
