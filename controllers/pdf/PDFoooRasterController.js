/************************************************************
 * PDFoooRasterController.js (‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡πà‡∏≤‡∏ô USB ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á)
 *  - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (Canvas) ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô base64
 *  - ‡∏ï‡∏±‡∏î‡πÇ‡∏Ñ‡πâ‡∏î escpos.USB(...) ‡∏≠‡∏≠‡∏Å
 ************************************************************/
const path = require('path');
const fs = require('fs');
const { createCanvas, registerFont, loadImage } = require('canvas');

// ‡πÇ‡∏´‡∏•‡∏î‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÑ‡∏ó‡∏¢ (‡∏õ‡∏£‡∏±‡∏ö path ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì)
const fontPath = path.join(__dirname, '..', '..', 'fonts', 'THSarabunNew.ttf');
// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö font ‡∏Å‡πà‡∏≠‡∏ô register
if (fs.existsSync(fontPath)) {
  registerFont(fontPath, { family: 'TH Sarabun New' });
  console.log('‚úÖ Font loaded successfully:', fontPath);
} else {
  console.warn('‚ö†Ô∏è Font not found:', fontPath);
  console.warn('   Available directories:');
  try {
    const baseDir = path.join(__dirname, '..', '..');
    const dirs = fs.readdirSync(baseDir, { withFileTypes: true })
      .filter(dirent => dirent.isDirectory())
      .map(dirent => dirent.name);
    console.warn('   ', dirs);
  } catch (e) {
    console.warn('   Could not list directories');
  }
}

// ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏∂‡πà‡∏á‡∏Å‡∏•‡∏≤‡∏á
const NOTE_LINES = [
  '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á 1 ‡∏õ‡∏µ ‡∏´‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß',
  '‡∏û‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ã‡∏≠‡∏ü‡πÅ‡∏ß‡∏£‡πå‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
  '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏¢‡∏¥‡∏ô‡∏¢‡∏≠‡∏°‡∏à‡∏∞‡∏£‡∏≠‡∏ó‡∏≤‡∏á‡∏®‡∏π‡∏ô‡∏¢‡πå‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
  '‡πÇ‡∏î‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Ç‡∏∂‡πâ‡∏ô‡∏≠‡∏¢‡∏π‡πà‡∏Å‡∏±‡∏ö‡∏®‡∏π‡∏ô‡∏¢‡πå',
  '‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏ó‡∏≥‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
  '‡πÄ‡∏ä‡πà‡∏ô ‡∏ï‡∏Å ‡πÅ‡∏ï‡∏Å ‡πÇ‡∏î‡∏ô‡∏ô‡πâ‡∏≥ ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ'
];

// ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏±‡πà‡∏ô
const SEPARATOR_LINE = '________________________________________';

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ï‡∏£‡∏¥‡∏á/Date ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢ (DD/MM/BBBB)
 */
function formatThaiDate(dateInput) {
  if (!dateInput) return '-';
  let dateObj;
  if (dateInput instanceof Date && !isNaN(dateInput)) {
    dateObj = dateInput;
  } else {
    dateObj = new Date(dateInput);
    if (isNaN(dateObj)) {
      const parts = String(dateInput).split('/');
      if (parts.length === 3) {
        let [d, m, y] = parts.map(x => parseInt(x, 10));
        if (y > 2400) y -= 543;
        dateObj = new Date(y, m - 1, d);
      }
    }
  }
  if (isNaN(dateObj)) return 'Invalid Date';
  return dateObj.toLocaleDateString('th-TH', {
    day: '2-digit', month: '2-digit', year: 'numeric'
  });
}

// ===== ‡πÄ‡∏û‡∏¥‡πà‡∏° helper functions =====
function coalesce(...vals) {
  for (const v of vals) { if (v !== undefined && v !== null && `${v}`.trim() !== '') return v; }
  return undefined;
}

function buildAddressFromAny(cus) {
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡πÅ‡∏ö‡∏ö string ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÅ‡∏•‡∏∞‡πÅ‡∏ö‡∏ö‡πÅ‡∏¢‡∏Å‡∏ü‡∏¥‡∏•‡∏î‡πå
  if (!cus) return '-';
  if (typeof cus.address === 'string' && cus.address.trim()) return cus.address.trim();
  const a = cus.address || {};
  const parts = [
    coalesce(a.houseNo, a.no),
    a.moo ? `‡∏´‡∏°‡∏π‡πà ${a.moo}` : undefined,
    a.subDistrict ? `‡∏ï.${a.subDistrict}` : undefined,
    a.district ? `‡∏≠.${a.district}` : undefined,
    a.province ? `‡∏à.${a.province}` : undefined,
    a.zipcode || a.postcode
  ].filter(Boolean);
  return parts.length ? parts.join(' ') : '-';
}

function pickSaleDate(order) {
  // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö issueDate/saleDate/createdAt
  return coalesce(order.saleDate, order.issueDate, order.createdAt, order.paymentDate);
}

function pickDocNumber(order, documentType) {
  // ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
  if (documentType === 'TAX_INVOICE') return coalesce(order.taxInvoiceNumber, order.invoiceNumber);
  return coalesce(order.receiptNumber, order.invoiceNumber);
}

class PDFoooRasterController {
  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
   * @param {string} prefix - ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (RE, TX, INV, QT)
   * @returns {string} ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   */
  static async generateDocumentNumber(prefix = 'RE') {
    const {
      generateReceiptNumber,
      generateInvoiceNumber,
      generateTaxInvoiceNumber
    } = require('../order/InvoiceReceiptController');

    switch (prefix) {
      case 'RE':
        return await generateReceiptNumber();
      case 'INV':
        return await generateInvoiceNumber();
      case 'TX':
        return await generateTaxInvoiceNumber();
      default:
        return await generateReceiptNumber();
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (Canvas) ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô base64 + fileName
   * ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏¢‡∏Å‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Ç‡∏≤‡∏¢‡∏™‡∏î‡πÅ‡∏•‡∏∞‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô
   */
  static async printReceipt(order) {
    try {
      console.log(`üñ®Ô∏è (Raster) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå: ${order.order_number || order._id}`);
      console.log('üìã Order data received:', {
        paymentMethod: order.paymentMethod,
        downPaymentAmount: order.downPaymentAmount,
        contractNo: order.contractNo,
        receiptType: order.receiptType,
        orderKeys: Object.keys(order)
      });

      // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ - ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
      const isInstallment = order.saleType === 'installment' ||
                           order.downPaymentAmount > 0 ||
                           order.contractNo ||
                           order.quotationNumber ||
                           (order.receiptType &&
                            (order.receiptType.includes('installment') ||
                             order.receiptType.includes('down_payment') ||
                             order.receiptType.includes('deposit')));

      const isCashSale = order.paymentMethod === 'cash' && !isInstallment;

      console.log(`üí∞ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢: ${isCashSale ? '‡∏Ç‡∏≤‡∏¢‡∏™‡∏î (Cash Sale)' : isInstallment ? '‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô/‡∏î‡∏≤‡∏ß‡∏ô‡πå (Installment)' : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}`);

      // ‚úÖ ‡πÉ‡∏ä‡πâ Controller ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
      if (isCashSale) {
        console.log('üè™ ‡πÉ‡∏ä‡πâ CashSalesPDFController ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢‡∏™‡∏î');
        try {
          const CashSalesPDFController = require('./CashSalesPDFController');
          return await CashSalesPDFController.printCashSalesReceipt(order);
        } catch (error) {
          console.warn('‚ö†Ô∏è CashSalesPDFController ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°');
          console.error('‚ùå CashSalesPDFController Error:', error.message);
          // Fall back to original logic
        }
      } else if (isInstallment) {
        console.log('üìÑ ‡πÉ‡∏ä‡πâ InstallmentPDFController ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô');
        try {
          const InstallmentPDFController = require('./InstallmentPDFController');
          return await InstallmentPDFController.printInstallmentReceipt(order);
        } catch (error) {
          console.warn('‚ö†Ô∏è InstallmentPDFController ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°');
          // Fall back to original logic
        }
      }

      // ‚úÖ ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (Fallback)
      console.log('üîÑ ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (Original PDFoooRasterController)');

      // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÇ‡∏•‡πÇ‡∏Å‡πâ‡πÅ‡∏•‡∏∞ QR
      const logoPath    = path.join(__dirname, '..', '..', 'Logo', 'logo.png');
      const qrLeftPath  = path.join(__dirname, '..', '..', 'Logo', 'qrLeft.png');
      const qrRightPath = path.join(__dirname, '..', '..', 'Logo', 'qrRight.png');
      const [logo, qrLeft, qrRight] = await Promise.all([
        loadImage(logoPath),
        loadImage(qrLeftPath),
        loadImage(qrRightPath),
      ]);

      // ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏™‡∏°‡∏≠
      let documentType = 'RECEIPT';
      if (order.invoiceType === 'TAX_INVOICE') {
        documentType = 'TAX_INVOICE';
      } else if (order.documentType === 'QUOTATION') {
        documentType = 'QUOTATION';
      } else if (order.documentType === 'INVOICE') {
        documentType = 'INVOICE';
      }

      const displayDocNo = pickDocNumber(order, documentType);
      let invoiceNo;
      if (displayDocNo) {
        invoiceNo = displayDocNo; // ‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢
      } else {
        // fallback ‡πÄ‡∏î‡∏¥‡∏°
        const documentPrefix = documentType === 'TAX_INVOICE' ? 'TX' : 'RE';
        const rawBase = coalesce(
          order.invoiceNo,
          order.order_number,
          await this.generateDocumentNumber(documentPrefix)
        );

        // üîß ‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏¥‡πâ‡∏á ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ (‡∏Å‡∏±‡∏ô RE-RE-xxxx / RE-TX-xxxx)
        const base = String(rawBase).replace(/^(RE|TX)-/ig, '');

        invoiceNo = `${documentPrefix}-${base}`;
      }
      console.log('üìÑ Invoice No to display:', invoiceNo);

      const saleDate = formatThaiDate(pickSaleDate(order));

      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô - ‡πÉ‡∏ä‡πâ coalesce
      let staffName = coalesce(order.staffName, order.employeeName, order.staff?.name, order.user?.name, order.performed_by, order.salesperson, '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô');

      // Debug ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏ß‡πà‡∏≤
      console.log('üë§ Staff name resolution details:', {
        'order.staffName': order.staffName,
        'order.employeeName': order.employeeName,
        'order.staff?.name': order.staff?.name,
        'order.user?.name': order.user?.name,
        'order.performed_by': order.performed_by,
        'order.salesperson': order.salesperson,
        'typeof order.staffName': typeof order.staffName,
        'typeof order.employeeName': typeof order.employeeName,
        'staffName isEmpty': !order.staffName,
        'final staffName': staffName,
        'order keys': Object.keys(order)
      });

      // ‡∏ñ‡πâ‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏¢‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (staffName === '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô') {
        console.warn('‚ö†Ô∏è Using default staff name "‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô" - no staff name provided in order data');
        console.warn('‚ö†Ô∏è Available order data:', JSON.stringify(order, null, 2));
      } else {
        console.log('‚úÖ Staff name resolved successfully:', staffName);
      }

      // ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á branch object ‡πÅ‡∏•‡∏∞ string
      const branch = order.branch || {};
      const company = order.company || {};

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ - ‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏ó‡∏ô object
      const branchName = branch.name || order.branchName || '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà';
      const branchCode = branch.code || order.branchCode || order.branch_code || '00000';
      const branchAddress = branch.address || order.branchAddress || '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000';
      const branchTaxId = branch.taxId || order.branchTaxId || '0945566000616';
      const branchTel = branch.tel || branch.phone || order.branchTel || '09-2427-0769';

      const mainLines = [
        { align: 'center', text: company.name || '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î' },
        { align: 'center', text: `‡∏™‡∏≤‡∏Ç‡∏≤: ${branchName}${branchCode ? ` ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤ ${branchCode}` : ''}` },
        ...(branchAddress ? [{ align: 'center', text: branchAddress }] : []),
        { align: 'center', text: `‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏≤‡∏Å‡∏£ ${branchTaxId}` },
        { align: 'center', text: `‡πÇ‡∏ó‡∏£: ${branchTel}` },
        { align: 'center', text: SEPARATOR_LINE },
        { align: 'center', text: order.invoiceType === 'TAX_INVOICE' ? '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ' : '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô' },
        { align: 'center', text: SEPARATOR_LINE },
      ];

      // ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå first_name/last_name ‡πÅ‡∏•‡∏∞ address ‡πÅ‡∏ö‡∏ö string
      const customerInfoLines = [
        { align: 'left', text: `‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà : ${invoiceNo}` },
        { align: 'left', text: `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏¢ : ${saleDate}` },
        { align: 'left', text: `‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ : ${staffName}` },
      ];

      if (order.customer) {
        const c = order.customer;
        const firstName = coalesce(c.firstName, c.first_name, '');
        const lastName  = coalesce(c.lastName, c.last_name, '');
        const prefix = coalesce(c.prefix, '');

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        let fullName = '';
        if (c.name && c.name !== '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ') {
          fullName = c.name;
        } else if (firstName || lastName) {
          fullName = `${prefix} ${firstName} ${lastName}`.trim();
        } else {
          fullName = '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ';
        }

        customerInfoLines.push(
          { align: 'left', text: `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ : ${fullName}` },
          { align: 'left', text: `‡πÇ‡∏ó‡∏£ : ${c.phone || '-'}` },
          { align: 'left', text: `‡πÄ‡∏•‡∏Ç‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ : ${coalesce(c.taxId, c.companyTaxId, '-')}` },
          { align: 'left', text: `‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà : ${buildAddressFromAny(c)}` },
        );
      }
      customerInfoLines.push({ align: 'center', text: SEPARATOR_LINE });

      // ‡πÉ‡∏ä‡πâ documentType ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏ß‡πâ‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
      const invoiceType = order.invoiceType || 'RECEIPT';
      let tableHeaderLines = [];
      let itemsLines = [];

      if (documentType === 'QUOTATION' || documentType === 'INVOICE') {
        // ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ: ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏•‡∏ÇIMEI ‡πÅ‡∏•‡∏∞ ‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        const colX = { name: 10, imei: 200, price: 460 };
        tableHeaderLines = [
          { text: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', x: colX.name },
          { text: 'IMEI',      x: colX.imei },
          { text: '‡∏£‡∏≤‡∏Ñ‡∏≤',      x: colX.price },
        ];

        itemsLines = (order.items||[]).map(item => {
          return [
            { text: item.name||'-', x: colX.name },
            { text: item.imei||'-', x: colX.imei },
            { text: (item.price||0).toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}), x: colX.price }
          ];
        });

        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        const documentFee = order.documentFee || 500;
        itemsLines.push([
          { text: '‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', x: colX.name },
          { text: '-', x: colX.imei },
          { text: documentFee.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}), x: colX.price }
        ]);

      } else {
        // ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ: ‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå (‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤+‡πÄ‡∏•‡∏Çimei) ‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡∏£‡πà‡∏ß‡∏° ‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        const colX = { name: 10, price: 460 };
        tableHeaderLines = [
          { text: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£', x: colX.name },
          { text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', x: colX.price },
        ];

        const downPayment = order.downPayment || order.total || 0;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏û‡∏£‡πâ‡∏≠‡∏° IMEI - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
        let itemsDescription = '‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå';
        if (order.items && order.items.length > 0) {
          const itemsList = order.items.map(item => {
            let itemName = item.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';

            // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
            if (itemName.includes('‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå') && itemName.includes('(')) {
              // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö
              const match = itemName.match(/\(([^)]+)\)/);
              if (match) {
                let cleanName = match[1];
                // ‡∏ï‡∏±‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å
                cleanName = cleanName
                  .replace(/‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞.*/, '')
                  .replace(/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à.*/, '')
                  .replace(/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ.*/, '')
                  .replace(/\(IMEI:.*?\)/, '')
                  .trim();

                if (cleanName && !cleanName.includes('‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞')) {
                  itemName = cleanName;
                } else {
                  itemName = '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
                }
              }
            }

            return `${itemName}${item.imei ? ` (${item.imei})` : ''}`;
          }).join(', ');
          itemsDescription = `‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå (${itemsList})`;
        }

        itemsLines = [
          [
            { text: itemsDescription, x: colX.name },
            { text: downPayment.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2}), x: colX.price }
          ]
        ];
      }

      // ‚úÖ ‡πÅ‡∏Å‡πâ‡∏à‡∏≤‡∏Å it.qty ‚Üí ‡πÉ‡∏ä‡πâ quantity
      const totalQty = (order.items || []).reduce((sum, it) => sum + (coalesce(it.quantity, it.qty, 0) * 1), 0);
      const itemSummaryLine = `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£: ${(order.items||[]).length}   ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô: ${totalQty}`;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Å‡∏£‡∏ì‡∏µ DB ‡∏Ç‡∏≤‡∏î)
      const itemsSum = (order.items || []).reduce((sum, it) => {
        const qty  = Number(coalesce(it.quantity, it.qty, 1));
        const unit = Number(coalesce(it.unitPrice, it.price, 0));
        const line = Number(coalesce(it.totalPrice, (isFinite(qty)&&isFinite(unit)) ? qty*unit : 0));
        return sum + (isFinite(line) ? line : 0);
      }, 0);

      let subTotal   = order.subTotal;
      const vatAmount  = order.vatAmount||0;
      const discount   = order.discount || 0;

      // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ subTotal = 0.00
      if (!isFinite(subTotal) || subTotal === 0 || subTotal === null || subTotal === undefined) {
        subTotal = itemsSum || order.total || order.totalAmount || 0;
      }

      // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö step4.html
      function getDocumentFee(order) {
        try {
          // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: order.docFee -> order.documentFee -> step3Data.docFee -> localStorage -> default 500
          if (order.docFee && order.docFee > 0) {
            return parseFloat(order.docFee);
          }

          if (order.documentFee && order.documentFee > 0) {
            return parseFloat(order.documentFee);
          }

          // ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å step3Data (‡∏ñ‡πâ‡∏≤‡∏™‡πà‡∏á‡∏°‡∏≤‡πÉ‡∏ô order)
          if (order.step3Data?.docFee) {
            return parseFloat(order.step3Data.docFee);
          }

          // Fallback ‡∏à‡∏≤‡∏Å localStorage (‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö step4.html)
          if (typeof localStorage !== 'undefined') {
            const fallbackDocFee = localStorage.getItem('globalDocumentFee') || '500';
            return parseFloat(fallbackDocFee);
          }

          // Default fallback
          return 500;
        } catch (error) {
          console.warn('‚ö†Ô∏è Error getting document fee, using default 500:', error);
          return 500;
        }
      }

      const docFee = getDocumentFee(order);
      const totalAmount = order.total || 0;

      console.log('üí∞ PDFRaster Document Fee Calculation:', {
        orderDocFee: order.docFee,
        orderDocumentFee: order.documentFee,
        step3DocFee: order.step3Data?.docFee,
        fallbackDocFee: typeof localStorage !== 'undefined' ? localStorage.getItem('globalDocumentFee') : 'N/A',
        finalDocFee: docFee
      });

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏™‡∏ï‡∏£‡∏¥‡∏á‡∏•‡πà‡∏ß‡∏á‡∏´‡∏ô‡πâ‡∏≤ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢ ‡πÜ
      const subTotalStr    = subTotal.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2});
      const vatAmountStr   = vatAmount .toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2});
      const discountStr    = discount .toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2});
      const docFeeStr      = docFee.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2});
      const totalAmountStr = totalAmount.toLocaleString('en-US',{minimumFractionDigits:2,maximumFractionDigits:2});

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Tax Invoice ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isTaxDoc = (order.invoiceType === 'TAX_INVOICE') || (documentType === 'TAX_INVOICE');

      const summaryLines = [
        { label: SEPARATOR_LINE, value: '' },
        // ‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ: ‡πÅ‡∏™‡∏î‡∏á‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° + ‡∏†‡∏≤‡∏©‡∏µ + ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô
        // ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏¢‡πà‡∏≠‡∏¢)
        ...(isTaxDoc ? [
          { label: '‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ', value: subTotalStr },
          // ‡πÅ‡∏ó‡∏£‡∏Å‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0)
          ...(docFee > 0 ? [{ label: '‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', value: docFeeStr }] : []),
          { label: '‡∏†‡∏≤‡∏©‡∏µ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°', value: vatAmountStr }
        ] : []),
        { label: SEPARATOR_LINE, value: '' },
        ...(discount > 0 ? [{ label: '‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î', value: discountStr }] : []),
        { label: '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô', value: totalAmountStr },
      ];

      const noteHeader    = { align:'center', text:'‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:' };
      const noteLines     = NOTE_LINES.map(t=>({align:'center',text:t}));
      const signatureDate = order.staffDate||order.saleDate;
      const signatureLines= [
        { align:'center', text:'________________________________' },
        { align:'center', text:`( ${staffName} )` },
        { align:'center', text:`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatThaiDate(signatureDate)}` },
      ];

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î canvas
      const width = 576;
      const mainFont  = 20, lineHeight=28;
      const noteFont  = 16, noteLineHeight=26;
      const logoW=logo.width, logoH=logo.height;
      const qrW=logoW, qrH=logoH;
      const marginTop=10, marginBelowLogo=20, marginBottom=30, qrBottomMargin=10;

      const height =
          marginTop +
          logoH + marginBelowLogo +
          mainLines.length*lineHeight +
          customerInfoLines.length*lineHeight +
          lineHeight + itemsLines.length*lineHeight +
          lineHeight + // summary separator
          summaryLines.length*lineHeight +
          noteLineHeight + noteLines.length*noteLineHeight +
          signatureLines.length*noteLineHeight +
          qrH + qrBottomMargin +
          marginBottom;

      const canvas = createCanvas(width, height);
      const ctx    = canvas.getContext('2d');

      // background
      ctx.fillStyle = '#FFFFFF';
      ctx.fillRect(0,0,width,height);

      let y = marginTop;
      // draw logo
      const logoX = (width-logoW)/2;
      ctx.drawImage(logo, logoX, y, logoW, logoH);
      y += logoH + marginBelowLogo;

      // draw mainLines
      ctx.font = `${mainFont}px "TH Sarabun New", "THSarabunNew", sans-serif`;
      ctx.fillStyle = '#000000';
      ctx.textBaseline = 'top';
      mainLines.forEach(line=>{
        const txt = line.text||'';
        let x = 10;
        if(line.align==='center'){
          const tw = ctx.measureText(txt).width;
          x = (width-tw)/2;
        }
        ctx.fillText(txt, x, y);
        y += lineHeight;
      });

      // draw customer info
      customerInfoLines.forEach(line=>{
        const txt = line.text||'';
        let x = 10;
        if(line.align==='center'){
          const tw = ctx.measureText(txt).width;
          x = (width-tw)/2;
        }
        ctx.fillText(txt, x, y);
        y += lineHeight;
      });

      // draw table header
      tableHeaderLines.forEach(h=>{
        ctx.fillText(h.text, h.x, y);
      });
      y += lineHeight;

      // draw items
      itemsLines.forEach(row=>{
        row.forEach((col,idx)=>{
          ctx.fillText(col.text, col.x, y);
        });
        y += lineHeight;
      });

      // separator + summary lines
      ctx.fillText(SEPARATOR_LINE, 10, y); y+=lineHeight;
      ctx.fillText(itemSummaryLine, 10, y); y+= lineHeight;

      summaryLines.forEach(({label,value})=>{
        if(label===SEPARATOR_LINE){
          ctx.fillText(label, 10, y);
        } else {
          ctx.fillText(label, 10, y);
          const vw = ctx.measureText(value).width;
          ctx.fillText(value, width - vw - 10, y);
        }
        y += lineHeight;
      });

      // note
      ctx.font = `${noteFont}px "TH Sarabun New", "THSarabunNew", sans-serif`;
      ctx.fillText(noteHeader.text, 10, y); y += noteLineHeight;
      noteLines.forEach(n=>{
        const tw = ctx.measureText(n.text).width;
        const x = (width - tw)/2;
        ctx.fillText(n.text, x, y);
        y += noteLineHeight;
      });

      // signature
      signatureLines.forEach(sig=>{
        const tw = ctx.measureText(sig.text).width;
        const x = (width - tw)/2;
        ctx.fillText(sig.text, x, y);
        y += noteLineHeight;
      });

      // draw QR
      const qrY = height - qrH - qrBottomMargin;
      ctx.drawImage(qrLeft, 45, qrY, qrW, qrH);
      ctx.drawImage(qrRight, width-qrW-45, qrY, qrW, qrH);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á buffer, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå, ‡∏Ñ‡∏∑‡∏ô base64+fileName
      const buffer   = canvas.toBuffer('image/png');
      const fileName = `receipt_${order.order_number||order._id}.png`;
      const outDir   = path.join(__dirname,'..','..','receipts');
      if(!fs.existsSync(outDir)) fs.mkdirSync(outDir,{recursive:true});
      const outPath  = path.join(outDir, fileName);
      fs.writeFileSync(outPath, buffer);

      // console.log(`‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏†‡∏≤‡∏û‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: ${outPath}`);

      const base64 = buffer.toString('base64');
      return { base64, fileName };

    } catch(err) {
      console.error('Error in PDFoooRasterController.printReceipt:', err);
      throw err;
    }
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Receipt/TaxInvoice) ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô order ‡∏ó‡∏µ‡πà renderer ‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à
   */
  static normalizeFromDbDoc(doc, documentType) {
    if (!doc) return {};

    console.log('üîÑ Normalizing document from DB:', {
      _id: doc._id,
      documentType,
      hasCompany: !!doc.company,
      hasBranch: !!doc.branch,
      hasCustomer: !!doc.customer,
      hasItems: !!(doc.items && doc.items.length),
      hasSummary: !!doc.summary,
      hasCalculation: !!doc.calculation
    });

    return {
      // üÜî ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏ï‡πâ‡∏ô
      _id: doc._id,
      order_number: doc.receiptNumber || doc.taxInvoiceNumber || doc._id,
      receiptNumber: doc.receiptNumber,
      taxInvoiceNumber: doc.taxInvoiceNumber,
      invoiceNumber: doc.invoiceNumber,
      documentType: doc.documentType || documentType,
      invoiceType: doc.invoiceType || (documentType === 'TAX_INVOICE' ? 'TAX_INVOICE' : 'RECEIPT'),

      // üè¢ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
      company: doc.company || {
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
        taxId: '0945566000616',
        phone: '09-2427-0769'
      },
      branch: doc.branch || {
        name: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà',
        code: '00000',
        address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000'
      },
      branchCode: doc.branchCode || doc.branch?.code || '00000',
      branchName: doc.branchName || doc.branch?.name || '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà',

      // üë§ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
      employeeName: doc.employeeName,
      staffName: doc.staffName,
      staff: doc.staff,
      user: doc.user,
      performed_by: doc.performed_by,
      salesperson: doc.salesperson,

      // üë• ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      customer: doc.customer || {},

      // üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      items: doc.items || [],

      // ÔøΩ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞
      saleType: doc.saleType,
      receiptType: doc.receiptType,
      contractNo: doc.contractNo,
      quotationNumber: doc.quotationNumber,
      downPaymentAmount: doc.downPaymentAmount,
      paymentMethod: doc.paymentMethod || 'cash',

      // üíµ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏á‡∏¥‡∏ô
      subTotal: coalesce(
        doc.summary?.beforeTax,
        doc.summary?.subtotal,
        doc.subtotal,
        doc.subTotal,
        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        (doc.items || []).reduce((sum, item) => {
          const qty = Number(item.quantity || item.qty || 1);
          const price = Number(item.unitPrice || item.price || 0);
          return sum + (qty * price);
        }, 0)
      ),

      vatAmount: coalesce(
        doc.summary?.vatAmount,
        doc.vatAmount,
        doc.calculation?.vatAmount,
        0
      ),

      total: coalesce(
        doc.summary?.totalWithTax,
        doc.summary?.total,
        doc.summary?.netTotal,
        doc.totalAmount,
        doc.total,
        // fallback ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        (doc.summary?.beforeTax || doc.subtotal || 0) + (doc.summary?.vatAmount || doc.vatAmount || 0)
      ),

      downPayment: coalesce(
        doc.downPaymentAmount,
        doc.downPayment,
        doc.summary?.subtotal,
        0
      ),

      // üìÑ ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      documentFee: coalesce(
        doc.documentFee,
        doc.docFee,
        doc.summary?.docFee,
        doc.calculation?.documentFee,
        500  // default
      ),

      // üßæ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏©‡∏µ
      vatInclusive: coalesce(
        doc.vatInclusive,
        doc.calculation?.taxType === 'inclusive',
        doc.taxType === 'inclusive',
        false
      ),

      vatRate: coalesce(
        doc.vatRate,
        doc.calculation?.vatRate,
        7
      ),

      hasVatItems: coalesce(
        doc.hasVatItems,
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        (doc.items || []).some(item => item.hasVat || item.vatRate > 0),
        false
      ),

      vatDetectionMethod: doc.vatDetectionMethod || 'none',
      taxType: doc.taxType || 'none',

      // üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      issueDate: doc.issueDate?.$date || doc.issueDate,
      saleDate: doc.saleDate?.$date || doc.saleDate,
      createdAt: doc.createdAt?.$date || doc.createdAt,
      paymentDate: doc.paymentDate?.$date || doc.paymentDate,
      updatedAt: doc.updatedAt?.$date || doc.updatedAt,

      // üìù ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
      notes: doc.notes,

      // üîÑ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
      __v: doc.__v
    };
  }

  /**
   * ‡πÉ‡∏ä‡πâ _id ‡∏à‡∏≤‡∏Å DB ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÇ‡∏°‡πÄ‡∏î‡∏• Receipt/TaxInvoice)
   */
  static async printFromDbById(id, documentType = 'RECEIPT') {
    const useTax = documentType === 'TAX_INVOICE';
    const Model = useTax ? require('../../models/TaxInvoice') : require('../../models/Receipt');
    const doc = await Model.findById(id).lean();
    if (!doc) throw new Error(`${documentType} not found for id ${id}`);
    const order = this.normalizeFromDbDoc(doc, documentType);
    return await this.printReceipt(order);
  }

  /**
   * ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ RE-xxxx ‡∏´‡∏£‡∏∑‡∏≠ TX-xxxx ‡πÅ‡∏•‡πâ‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå (‡∏Ñ‡πâ‡∏ô‡∏à‡∏≤‡∏Å number)
   */
  static async printFromDbByNumber(docNumber) {
    if (!docNumber || typeof docNumber !== 'string') throw new Error('docNumber is required');
    const isTax = docNumber.startsWith('TX-');
    const documentType = isTax ? 'TAX_INVOICE' : 'RECEIPT';
    const Model = isTax ? require('../../models/TaxInvoice') : require('../../models/Receipt');
    const field = isTax ? 'taxInvoiceNumber' : 'receiptNumber';
    const doc = await Model.findOne({ [field]: docNumber }).lean();
    if (!doc) throw new Error(`Document ${docNumber} not found`);
    const order = this.normalizeFromDbDoc(doc, documentType);
    return await this.printReceipt(order);
  }
}

module.exports = PDFoooRasterController;
