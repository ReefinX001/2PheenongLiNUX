/**
 * PDF Converter Controller
 * ‡πÅ‡∏õ‡∏•‡∏á‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å PDFoooRasterController ‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå PDF
 */

const PDFDocument = require('pdfkit');
const { createCanvas, loadImage } = require('canvas');
const PDFoooRasterController = require('./PDFoooRasterController');

class PDFConverterController {
  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ _id
   * @param {string} documentId - MongoDB _id ‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @param {string} documentType - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ('RECEIPT' ‡∏´‡∏£‡∏∑‡∏≠ 'TAX_INVOICE')
   * @returns {Promise<{pdfBuffer: Buffer, fileName: string}>}
   */
  static async generatePDFFromDocument(documentId, documentType = 'RECEIPT') {
    try {
      console.log(`üìÑ Generating PDF for ${documentType} ID: ${documentId}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô PDFoooRasterController
      const imageResult = await PDFoooRasterController.printFromDbById(documentId, documentType);

      if (!imageResult || !imageResult.base64) {
        throw new Error('Failed to generate receipt image');
      }

      // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô buffer
      const imageBuffer = Buffer.from(imageResult.base64, 'base64');

      // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ canvas
      const image = await loadImage(imageBuffer);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏î‡πâ‡∏ß‡∏¢ PDFKit
      const doc = new PDFDocument({
        size: [image.width, image.height], // ‡πÉ‡∏ä‡πâ‡∏Ç‡∏ô‡∏≤‡∏î‡∏Ç‡∏≠‡∏á‡∏†‡∏≤‡∏û
        margins: { top: 0, bottom: 0, left: 0, right: 0 }
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö PDF buffer
      const chunks = [];
      doc.on('data', chunk => chunks.push(chunk));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡πÉ‡∏´‡πâ PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      const pdfPromise = new Promise((resolve, reject) => {
        doc.on('end', () => {
          const pdfBuffer = Buffer.concat(chunks);
          resolve(pdfBuffer);
        });
        doc.on('error', reject);
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô PDF
      doc.image(imageBuffer, 0, 0, {
        width: image.width,
        height: image.height
      });

      // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
      doc.end();

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      const pdfBuffer = await pdfPromise;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå PDF
      const fileName = imageResult.fileName.replace('.png', '.pdf');

      console.log(`‚úÖ PDF generated successfully: ${fileName} (${pdfBuffer.length} bytes)`);

      return {
        pdfBuffer,
        fileName,
        originalImageBase64: imageResult.base64
      };

    } catch (error) {
      console.error('‚ùå Error generating PDF:', error);
      throw error;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà normalize ‡πÅ‡∏•‡πâ‡∏ß
   * @param {Object} normalizedData - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô normalize ‡πÅ‡∏•‡πâ‡∏ß
   * @returns {Promise<{pdfBuffer: Buffer, fileName: string}>}
   */
  static async generatePDFFromNormalizedData(normalizedData) {
    try {
      console.log(`üìÑ Generating PDF from normalized data:`, {
        documentType: normalizedData.documentType,
        receiptNumber: normalizedData.receiptNumber,
        taxInvoiceNumber: normalizedData.taxInvoiceNumber
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô PDFoooRasterController
      const imageResult = await PDFoooRasterController.printReceipt(normalizedData);

      if (!imageResult || !imageResult.base64) {
        throw new Error('Failed to generate receipt image from normalized data');
      }

      // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô buffer
      const imageBuffer = Buffer.from(imageResult.base64, 'base64');

      // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ canvas
      const image = await loadImage(imageBuffer);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏î‡πâ‡∏ß‡∏¢ PDFKit
      const doc = new PDFDocument({
        size: [image.width, image.height],
        margins: { top: 0, bottom: 0, left: 0, right: 0 }
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö PDF buffer
      const chunks = [];
      doc.on('data', chunk => chunks.push(chunk));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡πÉ‡∏´‡πâ PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      const pdfPromise = new Promise((resolve, reject) => {
        doc.on('end', () => {
          const pdfBuffer = Buffer.concat(chunks);
          resolve(pdfBuffer);
        });
        doc.on('error', reject);
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô PDF
      doc.image(imageBuffer, 0, 0, {
        width: image.width,
        height: image.height
      });

      // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
      doc.end();

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      const pdfBuffer = await pdfPromise;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå PDF
      const fileName = imageResult.fileName.replace('.png', '.pdf');

      console.log(`‚úÖ PDF from normalized data generated successfully: ${fileName} (${pdfBuffer.length} bytes)`);

      return {
        pdfBuffer,
        fileName,
        originalImageBase64: imageResult.base64
      };

    } catch (error) {
      console.error('‚ùå Error generating PDF from normalized data:', error);
      throw error;
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @param {string} documentNumber - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô RE-680817-006, TX-680817-006
   * @returns {Promise<{pdfBuffer: Buffer, fileName: string}>}
   */
  static async generatePDFFromDocumentNumber(documentNumber) {
    try {
      console.log(`üìÑ Generating PDF for document number: ${documentNumber}`);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏ú‡πà‡∏≤‡∏ô PDFoooRasterController
      const imageResult = await PDFoooRasterController.printFromDbByNumber(documentNumber);

      if (!imageResult || !imageResult.base64) {
        throw new Error(`Failed to generate image for document: ${documentNumber}`);
      }

      // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô buffer
      const imageBuffer = Buffer.from(imageResult.base64, 'base64');

      // ‡πÇ‡∏´‡∏•‡∏î‡∏†‡∏≤‡∏û‡∏î‡πâ‡∏ß‡∏¢ canvas
      const image = await loadImage(imageBuffer);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏î‡πâ‡∏ß‡∏¢ PDFKit
      const doc = new PDFDocument({
        size: [image.width, image.height],
        margins: { top: 0, bottom: 0, left: 0, right: 0 }
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö PDF buffer
      const chunks = [];
      doc.on('data', chunk => chunks.push(chunk));

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á Promise ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≠‡πÉ‡∏´‡πâ PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      const pdfPromise = new Promise((resolve, reject) => {
        doc.on('end', () => {
          const pdfBuffer = Buffer.concat(chunks);
          resolve(pdfBuffer);
        });
        doc.on('error', reject);
      });

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏†‡∏≤‡∏û‡∏•‡∏á‡πÉ‡∏ô PDF
      doc.image(imageBuffer, 0, 0, {
        width: image.width,
        height: image.height
      });

      // ‡∏à‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
      doc.end();

      // ‡∏£‡∏≠‡πÉ‡∏´‡πâ PDF ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô
      const pdfBuffer = await pdfPromise;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå PDF
      const fileName = imageResult.fileName.replace('.png', '.pdf');

      console.log(`‚úÖ PDF from document number generated successfully: ${fileName} (${pdfBuffer.length} bytes)`);

      return {
        pdfBuffer,
        fileName,
        originalImageBase64: imageResult.base64
      };

    } catch (error) {
      console.error('‚ùå Error generating PDF from document number:', error);
      throw error;
    }
  }
}

module.exports = PDFConverterController;
