const emailService = require('../services/emailService');

class EmailController {

  // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞
  async sendInstallmentDocuments(req, res) {
    try {
      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
      let emailData, customerEmail, documentsToSend, customMessage;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Frontend ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (req.body.email && req.body.type === 'installment' && req.body.installmentData) {
        // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Frontend
        console.log('üìß ‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å Frontend');

        emailData = req.body;
        customerEmail = emailData.email;
        customMessage = emailData.customMessage || '';

        // ‡πÅ‡∏õ‡∏•‡∏á documents object ‡πÄ‡∏õ‡πá‡∏ô array (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó)
        documentsToSend = [];
        if (emailData.documents && typeof emailData.documents === 'object') {
          if (emailData.documents.quotation) documentsToSend.push('quotation');
          if (emailData.documents.invoice) documentsToSend.push('invoice');
          if (emailData.documents.receipt) documentsToSend.push('receipt');
        }

      } else {
        // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ (Legacy)
        console.log('üìß ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÄ‡∏î‡∏¥‡∏° (Legacy)');

        const { customer, documents, customMessage: msg, quotationId, invoiceId, contractId, branchCode } = req.body;

        if (!customer || !customer.email) {
          return res.status(400).json({
            success: false,
            message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
          });
        }

        customerEmail = customer.email;
        documentsToSend = documents;
        customMessage = msg || '';
        emailData = { customer, quotationId, invoiceId, contractId, branchCode };
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      if (!customerEmail) {
        return res.status(400).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'
        });
      }

      if (!documentsToSend || documentsToSend.length === 0) {
        return res.status(400).json({
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(customerEmail)) {
        return res.status(400).json({
          success: false,
          message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emailService
      const serviceData = {
        customer: emailData.customer || {
          name: emailData.customerName || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
          email: customerEmail
        },
        documents: documentsToSend,
        customMessage,
        quotationId: emailData.quotationId || `QT${Date.now()}`,
        invoiceId: emailData.invoiceId || `IV${Date.now()}`,
        contractId: emailData.contractId || `CT${Date.now()}`,
        branchCode: emailData.branchCode || 'PATTANI',
        installmentData: emailData.installmentData || null
      };

      console.log('üìß ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á emailService:', {
        customerEmail,
        documents: documentsToSend,
        quotationId: serviceData.quotationId,
        invoiceId: serviceData.invoiceId,
        contractId: serviceData.contractId
      });

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const result = await emailService.sendInstallmentDocuments(serviceData);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      console.log(`üìß Email sent to ${customerEmail}:`, {
        documents: documentsToSend,
        messageId: result.messageId,
        timestamp: new Date().toISOString(),
        branchCode: serviceData.branchCode,
        userId: req.user?.id || 'unknown'
      });

      res.json({
        success: true,
        message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          messageId: result.messageId,
          recipient: result.recipient || customerEmail,
          documentsCount: (result.documents && result.documents.length) || documentsToSend.length,
          documents: documentsToSend,
          sentAt: new Date().toISOString(),
          quotationId: serviceData.quotationId,
          invoiceId: serviceData.invoiceId,
          contractId: serviceData.contractId
        }
      });

    } catch (error) {
      console.error('‚ùå Email Controller Error:', error);

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      let statusCode = 500;
      let message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•';

      if (error.message.includes('not initialized')) {
        statusCode = 503;
        message = '‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      } else if (error.message.includes('Invalid email')) {
        statusCode = 400;
        message = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      } else if (error.message.includes('Authentication')) {
        statusCode = 401;
        message = '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
      }

      res.status(statusCode).json({
        success: false,
        message,
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  async sendTestEmail(req, res) {
    try {
      const { email, type } = req.body;

      if (!email) {
        return res.status(400).json({
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({
          success: false,
          message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
      }

      const result = await emailService.sendTestEmail(email);

      console.log(`üß™ Test email sent to ${email}:`, {
        messageId: result.messageId,
        type: type || 'general',
        timestamp: new Date().toISOString(),
        userId: req.user?.id || 'unknown'
      });

      res.json({
        success: true,
        message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          messageId: result.messageId,
          recipient: result.recipient,
          sentAt: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('‚ùå Test Email Error:', error);

      res.status(500).json({
        success: false,
        message: '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•
  async checkEmailStatus(req, res) {
    try {
      const status = await emailService.verifyConnection();

      res.json({
        success: true,
        message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          emailServiceReady: status.success,
          details: status.message || status.error,
          timestamp: new Date().toISOString(),
          environment: process.env.NODE_ENV
        }
      });

    } catch (error) {
      console.error('‚ùå Email Status Check Error:', error);

      res.status(500).json({
        success: false,
        message: '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // ‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (Preview)
  async previewEmail(req, res) {
    try {
      const { customer, documents, customMessage, quotationId, invoiceId, contractId } = req.body;

      if (!customer || !customer.email) {
        return res.status(400).json({
          success: false,
          message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'
        });
      }

      if (!documents || documents.length === 0) {
        return res.status(400).json({
          success: false,
          message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á'
        });
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
      const emailContent = emailService.generateEmailContent({
        customer,
        documents,
        customMessage,
        quotationId: quotationId || 'QT-PREVIEW-' + Date.now(),
        invoiceId: invoiceId || 'IV-PREVIEW-' + Date.now(),
        contractId: contractId || 'CT-PREVIEW-' + Date.now()
      });

      res.json({
        success: true,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          preview: emailContent,
          recipient: customer.email,
          documents: documents,
          generatedAt: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('‚ùå Email Preview Error:', error);

      res.status(500).json({
        success: false,
        message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // ‡∏î‡∏π‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  async getEmailStats(req, res) {
    try {
      // TODO: Implement email statistics from database
      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á

      const stats = {
        today: {
          sent: 0,
          failed: 0,
          pending: 0
        },
        thisWeek: {
          sent: 0,
          failed: 0,
          pending: 0
        },
        thisMonth: {
          sent: 0,
          failed: 0,
          pending: 0
        },
        lastUpdated: new Date().toISOString()
      };

      res.json({
        success: true,
        message: '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: stats
      });

    } catch (error) {
      console.error('‚ùå Email Stats Error:', error);

      res.status(500).json({
        success: false,
        message: '‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï)
  async updateEmailSettings(req, res) {
    try {
      const { autoSend, templates, notifications } = req.body;

      // TODO: Implement email settings update
      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏ü‡∏•‡πå config

      res.json({
        success: true,
        message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          autoSend: autoSend || false,
          templates: templates || {},
          notifications: notifications || {},
          updatedAt: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('‚ùå Email Settings Update Error:', error);

      res.status(500).json({
        success: false,
        message: '‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à POS ‡∏û‡∏£‡πâ‡∏≠‡∏° PDF
  async sendReceiptEmail(req, res) {
    try {
      const {
        orderId,
        invoiceNo,
        email,
        customerName,
        type,
        documents,
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        customerInfo,
        cartItems,
        totals,
        paymentMethod,
        branchCode,
        staffName,
        generatePDF = true,
        pdfSettings = {},
        format,
        pageSize,
        orientation,
        quality,
        attachments: attachmentSettings
      } = req.body;

      console.log('üìß Receipt email request:', {
        orderId,
        invoiceNo,
        email,
        customerName,
        generatePDF,
        hasCartItems: !!(cartItems && cartItems.length),
        hasTotals: !!totals,
        format,
        pageSize
      });

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      if (!email || !orderId || !invoiceNo) {
        return res.status(400).json({
          success: false,
          message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ email, orderId, invoiceNo)'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(email)) {
        return res.status(400).json({
          success: false,
          message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
      if (generatePDF && (!cartItems || cartItems.length === 0)) {
        console.warn('üìß PDF generation requested but no cart items provided');
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ PDF
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö emailService
      const emailData = {
        orderId,
        invoiceNo,
        email,
        customerName: customerName || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        type: type || 'receipt',
        documents: documents || { receipt: true, taxInvoice: false },

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF
        customerInfo: customerInfo || (customerName ? { name: customerName } : null),
        cartItems: cartItems || [],
        totals: totals || {},
        paymentMethod: paymentMethod || 'cash',
        branchCode: branchCode || 'MAIN',
        staffName: staffName || '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        generatePDF: generatePDF && format === 'pdf',

        // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ PDF ‡∏à‡∏≤‡∏Å frontend
        pdfSettings: {
          includeQRCode: pdfSettings.includeQRCode !== false,
          includeBarcode: pdfSettings.includeBarcode !== false,
          colorPrint: pdfSettings.colorPrint !== false,
          ...pdfSettings,
          // Override ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• request
          format: format || 'pdf',
          pageSize: pageSize || 'A4',
          orientation: orientation || 'portrait',
          quality: quality || 'high'
        }
      };

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      console.log('üì§ Sending email with data size:', JSON.stringify(emailData).length, 'characters');

      const result = await emailService.sendReceiptEmail(emailData);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      console.log(`üìß Receipt email sent to ${email}:`, {
        orderId,
        invoiceNo,
        messageId: result.messageId,
        pdfGenerated: result.pdfGenerated,
        attachmentCount: result.attachments?.length || 0,
        totalFileSize: result.totalFileSize || 0,
        timestamp: new Date().toISOString(),
        userId: req.user?.id || 'unknown'
      });

      res.json({
        success: true,
        message: '‡∏™‡πà‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
        data: {
          messageId: result.messageId,
          recipient: result.recipient,
          orderId: result.orderId,
          invoiceNo: result.invoiceNo,
          sentAt: result.sentAt,
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö PDF
          pdfGenerated: result.pdfGenerated || false,
          attachments: result.attachments || [],
          totalFileSize: result.totalFileSize || 0,
          // ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
          settings: {
            format: emailData.pdfSettings.format,
            pageSize: emailData.pdfSettings.pageSize,
            orientation: emailData.pdfSettings.orientation,
            quality: emailData.pdfSettings.quality
          }
        }
      });

    } catch (error) {
      console.error('‚ùå Receipt Email Error:', error);

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡∏ï‡πà‡∏≤‡∏á‡πÜ
      let statusCode = 500;
      let message = '‡∏™‡πà‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';

      if (error.message.includes('not initialized')) {
        statusCode = 503;
        message = '‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤';
      } else if (error.message.includes('Invalid email')) {
        statusCode = 400;
        message = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      } else if (error.message.includes('Authentication')) {
        statusCode = 401;
        message = '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
      } else if (error.message.includes('PDF')) {
        statusCode = 500;
        message = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF - ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤‡πÅ‡∏ó‡∏ô';
      }

      res.status(statusCode).json({
        success: false,
        message: message,
        error: process.env.NODE_ENV === 'development' ? error.message : undefined
      });
    }
  }

  // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend ‡πÉ‡∏´‡∏°‡πà)
  async testConnection(req, res) {
    try {
      console.log('üß™ Testing email connection...');

      const { testMode, customerEmail, selectedDocuments, branchCode, employeeName } = req.body;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const status = await emailService.verifyConnection();

      if (!status.success) {
        return res.status(503).json({
          success: false,
          message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
          error: status.error || status.message,
          details: {
            testMode,
            timestamp: new Date().toISOString()
          }
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
      if (customerEmail) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        if (!emailRegex.test(customerEmail)) {
          return res.status(400).json({
            success: false,
            message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
            details: { customerEmail }
          });
        }
      }

      // ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏ó‡∏î‡∏™‡∏≠‡∏ö ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏à‡∏£‡∏¥‡∏á
      let testResult = null;
      if (testMode && customerEmail) {
        try {
          testResult = await emailService.sendTestEmail(customerEmail);
        } catch (testError) {
          console.warn('‚ö†Ô∏è Test email failed but connection is OK:', testError.message);
          // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏´‡∏≤‡∏Å‡∏™‡πà‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÇ‡∏≠‡πÄ‡∏Ñ
        }
      }

      console.log('‚úÖ Email connection test successful:', {
        customerEmail,
        selectedDocuments: selectedDocuments?.length || 0,
        branchCode,
        employeeName,
        testEmailSent: !!testResult
      });

      res.json({
        success: true,
        message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô',
        data: {
          connectionStatus: 'active',
          serviceReady: true,
          testEmailSent: !!testResult,
          testResult,
          configuration: {
            emailServiceType: status.serviceType || 'Gmail',
            fromEmail: process.env.GMAIL_USER || 'not-configured',
            companyName: process.env.COMPANY_NAME || '‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞'
          },
          request: {
            testMode,
            customerEmail,
            documentsSelected: selectedDocuments?.length || 0,
            branchCode,
            employeeName
          },
          timestamp: new Date().toISOString()
        }
      });

    } catch (error) {
      console.error('‚ùå Email connection test failed:', error);

      res.status(500).json({
        success: false,
        message: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß',
        error: process.env.NODE_ENV === 'development' ? error.message : 'Internal server error',
        details: {
          timestamp: new Date().toISOString(),
          errorType: error.name || 'UnknownError'
        }
      });
    }
  }

  // ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≤‡∏ô Gmail (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö frontend ‡πÉ‡∏´‡∏°‡πà)
  async sendDocument(req, res) {
    try {
      console.log('üìß Sending document via Gmail...');

      const {
        step,
        documentType,
        customerEmail,
        customerData,
        productData,
        documentName,
        branchCode,
        employeeName,
        timestamp
      } = req.body;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      if (!customerEmail) {
        return res.status(400).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'
        });
      }

      if (!documentType) {
        return res.status(400).json({
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á'
        });
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(customerEmail)) {
        return res.status(400).json({
          success: false,
          message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
        });
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      const emailData = {
        step: step || 3,
        documentType,
        customer: {
          email: customerEmail,
          name: customerData?.fullName || `${customerData?.firstName || ''} ${customerData?.lastName || ''}`.trim() || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
          phone: customerData?.phone || '',
          idCard: customerData?.idCard || '',
          address: customerData?.fullAddress || ''
        },
        products: productData?.products || [],
        totals: productData?.summary || {
          subtotal: productData?.totalAmount || 0,
          tax: (productData?.totalAmount || 0) * 0.07,
          grandTotal: (productData?.totalAmount || 0) * 1.07
        },
        documents: [documentType],
        branchCode: branchCode || 'PATTANI',
        employeeName: employeeName || '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
        customMessage: `‡∏™‡πà‡∏á‡∏à‡∏≤‡∏Å Step ${step} ‡πÇ‡∏î‡∏¢ ${employeeName || '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'}`,
        metadata: {
          step,
          sentAt: timestamp || new Date().toISOString(),
          system: 'Pattani Installment System'
        }
      };

      console.log('üì§ Email data prepared:', {
        customerEmail,
        documentType,
        documentName,
        step,
        productCount: emailData.products.length,
        totalAmount: emailData.totals.grandTotal
      });

      // ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡πà‡∏≤‡∏ô emailService
      const result = await emailService.sendInstallmentDocuments(emailData);

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å log ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
      console.log(`üìß Document email sent to ${customerEmail}:`, {
        documentType,
        documentName,
        step,
        messageId: result.messageId,
        timestamp: new Date().toISOString(),
        branchCode,
        employeeName,
        userId: req.user?.id || 'unknown'
      });

      res.json({
        success: true,
        message: `‡∏™‡πà‡∏á${documentName}‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${customerEmail} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        data: {
          messageId: result.messageId,
          recipient: result.recipient || customerEmail,
          documentType,
          documentName,
          step,
          sentAt: new Date().toISOString(),
          customer: {
            email: customerEmail,
            name: emailData.customer.name
          },
          documents: {
            sent: [documentType],
            count: 1
          },
          metadata: {
            branchCode,
            employeeName,
            system: 'Pattani Installment System',
            version: '2.0'
          }
        }
      });

    } catch (error) {
      console.error('‚ùå Document email sending failed:', error);

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      let statusCode = 500;
      let message = '‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';

      if (error.message.includes('not initialized')) {
        statusCode = 503;
        message = '‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô';
      } else if (error.message.includes('Invalid email')) {
        statusCode = 400;
        message = '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
      } else if (error.message.includes('Authentication')) {
        statusCode = 401;
        message = '‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß';
      } else if (error.message.includes('Quota')) {
        statusCode = 429;
        message = '‡πÄ‡∏Å‡∏¥‡∏ô‡∏Ç‡∏µ‡∏î‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á';
      }

      res.status(statusCode).json({
        success: false,
        message,
        error: process.env.NODE_ENV === 'development' ? error.message : undefined,
        details: {
          documentType: req.body.documentType,
          customerEmail: req.body.customerEmail,
          step: req.body.step,
          timestamp: new Date().toISOString()
        }
      });
    }
  }
}

module.exports = new EmailController();