/************************************************************
 * TransferSlipPdfController.js - Transfer Slip PDF Generator
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏≠‡∏ô‡∏¢‡πâ‡∏≤‡∏¢‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏≤‡∏Ç‡∏≤
 * ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å A4PDFController.js ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 ************************************************************/
const path = require('path');
const fs = require('fs');
const PDFDocument = require('pdfkit');

// ===== CONFIG ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ =====
const CONFIG = {
  page: { size: 'A4', margin: 40 },
  font: {
    name: 'THSarabun', boldName: 'THSarabun-Bold',
    path: path.join(__dirname, '..', 'fonts', 'THSarabunNew.ttf'),
    boldPath: path.join(__dirname, '..', 'fonts', 'THSarabunNew Bold.ttf')
  },
  color: {
    primaryBlue: '#3498DB',
    transferGreen: '#16A085', // ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô
    textHeader: '#FFFFFF',
    textBlack: '#000000',
    textDark: '#222222',
    textLight: '#555555',
    lineLight: '#E0E0E0',
    lineDark: '#CCCCCC',
    sigLine: '#888888',
    bgWhite: '#FFFFFF',
    bgAccent: '#16A085'
  },
  sizes: {
    logo: { w: 145 },
    heading1: 22,
    heading2: 16,
    heading3: 14,
    textBody: 13,
    textLabel: 11,
    textSmall: 10,
    tableHeader: 12,
    tableRow: 12,
    lineSpacing: 1.4
  },
  layout: {
    tableCols: {
      no: 35,
      item: 180,
      imei: 140,
      qty: 45,
      unit: 50,
      note: 65
    }
  }
};

// ===== HELPER FUNCTIONS =====
function formatThaiDate(date) {
  try {
    if (!date) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
    const d = new Date(date);
    if (isNaN(d.getTime())) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';

    const thaiMonths = [
      '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
      '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
    ];

    const day = d.getDate();
    const month = thaiMonths[d.getMonth()];
    const year = d.getFullYear() + 543;

    return `${day} ${month} ${year}`;
  } catch (error) {
    console.warn('‚ö†Ô∏è Error formatting Thai date:', error);
    return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà';
  }
}

function formatTransferStatus(status) {
  const statusMap = {
    'pending-stock': '‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å‡∏ù‡πà‡∏≤‡∏¢‡∏™‡∏ï‡πä‡∏≠‡∏Å',
    'pending-receive': '‡∏£‡∏≠‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    'completed': '‡πÇ‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
    'rejected': '‡∏ñ‡∏π‡∏Å‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò'
  };
  return statusMap[status] || status || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
}

function createSampleTransfer(overrides = {}) {
  return {
    _id: 'sample-transfer-id',
    transferNo: 'DO-680908-001',
    transferDate: new Date(),
    status: 'completed',
    fromBranch: {
      name: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà',
      code: '00000',
      address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
      taxId: '0945566000616',
      tel: '09-2427-0769'
    },
    toBranch: {
      name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ',
      code: '00001',
      address: '123 ‡∏ñ‡∏ô‡∏ô‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
      taxId: '0945566000616',
      tel: '09-2427-0770'
    },
    sender: {
      firstName: '‡∏≠‡∏≤‡∏£‡∏µ‡∏ü‡∏µ‡∏ô',
      lastName: '‡∏Å‡∏≤‡∏ã‡∏≠'
    },
    receiver: {
      firstName: '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô',
      lastName: '‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
    },
    stockApprover: {
      firstName: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
      lastName: '‡∏™‡∏ï‡πä‡∏≠‡∏Å'
    },
    items: [
      {
        name: 'iPhone 15 Pro',
        brand: 'Apple',
        imei: '123456789012345',
        quantity: 1,
        note: ''
      },
      {
        name: 'Samsung Galaxy S24',
        brand: 'Samsung',
        imei: '987654321098765',
        quantity: 2,
        note: '‡∏™‡∏µ‡∏î‡∏≥'
      }
    ],
    note: '‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤',
    createdAt: new Date(),
    stockApprovedAt: new Date(),
    receivedAt: new Date(),
    ...overrides
  };
}

/**
 * ‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
 */
class TransferSlipPDFController {

  /**
   * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
   */
  static async downloadTransferSlip(req, res) {
    try {
      const transferId = req.params.id;
      console.log('üöö TransferSlipPDFController.downloadTransferSlip() called with transferId:', transferId);

      if (!transferId) {
        return res.status(400).json({
          success: false,
          message: 'Transfer ID is required'
        });
      }

      // Import Transfer model conditionally
      const Transfer = require('../models/Stock/Transfer');

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      const transfer = await Transfer.findById(transferId)
        .populate('fromBranch', 'name code address taxId tel phone')
        .populate('toBranch', 'name code address taxId tel phone')
        .populate('sender', 'firstName lastName')
        .populate('stockApprover', 'firstName lastName')
        .populate('receiver', 'firstName lastName')
        .populate('createdBy', 'firstName lastName')
        .populate('rejectedBy', 'firstName lastName')
        .lean();

      if (!transfer) {
        return res.status(404).json({
          success: false,
          message: 'Transfer not found'
        });
      }

      console.log('üì¶ Transfer data found:', {
        transferNo: transfer.transferNo,
        status: transfer.status,
        fromBranch: transfer.fromBranch?.name,
        toBranch: transfer.toBranch?.name,
        itemsCount: transfer.items?.length || 0
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      const pdfResult = await TransferSlipPDFController.createTransferSlipPdf(transfer);

      if (!pdfResult || !pdfResult.buffer) {
        throw new Error('Failed to generate Transfer Slip PDF');
      }

      // ‡∏™‡πà‡∏á PDF ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
      res.setHeader('Content-Type', 'application/pdf');
      res.setHeader('Content-Disposition', `attachment; filename="${pdfResult.fileName}"`);
      res.setHeader('Content-Length', pdfResult.buffer.length);

      console.log('‚úÖ Transfer Slip PDF generated successfully:', {
        transferId,
        transferNo: transfer.transferNo,
        fileName: pdfResult.fileName,
        bufferSize: pdfResult.buffer.length
      });

      res.end(pdfResult.buffer);

    } catch (error) {
      console.error('‚ùå Error in downloadTransferSlip:', error);

      if (!res.headersSent) {
        res.status(500).json({
          success: false,
          message: 'Internal server error generating Transfer Slip PDF',
          error: error.message
        });
      }
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
   */
  static async createTransferSlipPdf(transfer) {
    console.log('üìÑ Creating Transfer Slip PDF for:', transfer.transferNo);

    return new Promise((resolve, reject) => {
      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        const fontPath = CONFIG.font.path;
        const boldFontPath = CONFIG.font.boldPath;

        if (!fs.existsSync(fontPath)) {
          return reject(new Error(`Font not found: ${fontPath}`));
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF document
        const doc = new PDFDocument({
          size: CONFIG.page.size,
          margins: { top: 20, bottom: 40, left: 40, right: 40 },
          autoFirstPage: true
        });

        const { width: W, height: H } = doc.page;
        const margins = doc.page.margins || { top: 40, bottom: 40, left: 40, right: 40 };
        const bodyW = W - margins.left - margins.right;

        // Buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PDF
        const chunks = [];
        doc.on('data', chunks.push.bind(chunks));
        doc.on('end', () => {
          const buffer = Buffer.concat(chunks);
          const fileName = `DO-${transfer.transferNo || transfer._id}.pdf`;
          resolve({ buffer, fileName });
        });
        doc.on('error', reject);

        // ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå
        doc.registerFont(CONFIG.font.name, fontPath);
        if (fs.existsSync(boldFontPath)) {
          doc.registerFont(CONFIG.font.boldName, boldFontPath);
        }
        doc.font(CONFIG.font.name);

        // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ß‡∏≤‡∏î PDF
        let y = margins.top;

        // 1. ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        y = this._drawHeader(doc, transfer, margins, bodyW, y);

        // 2. ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
        y = this._drawTransferInfo(doc, transfer, margins, bodyW, y);

        // 3. ‡∏ß‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        y = this._drawItemsTable(doc, transfer, margins, bodyW, y);

        // 4. ‡∏ß‡∏≤‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
        y = this._drawSignatures(doc, transfer, margins, bodyW, y);

        // 5. ‡∏ß‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        this._drawNotes(doc, transfer, margins, bodyW, y);

        doc.end();

      } catch (error) {
        console.error('‚ùå Error creating Transfer Slip PDF:', error);
        reject(error);
      }
    });
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
   */
  static _drawHeader(doc, transfer, margins, bodyW, y) {
    const startY = y;

    // ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
    doc.font(CONFIG.font.boldName)
       .fontSize(CONFIG.sizes.heading2)
       .fillColor(CONFIG.color.textDark)
       .text('‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î', margins.left, y);

    y += 25;

    // ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡∏ó‡∏≤‡∏á‡∏Ç‡∏ß‡∏≤)
    doc.font(CONFIG.font.boldName)
       .fontSize(CONFIG.sizes.heading1)
       .fillColor(CONFIG.color.transferGreen)
       .text('‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', margins.left + bodyW - 150, startY);

    doc.font(CONFIG.font.name)
       .fontSize(CONFIG.sizes.textBody)
       .fillColor(CONFIG.color.textDark)
       .text('TRANSFER SLIP', margins.left + bodyW - 150, startY + 25);

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ö‡πà‡∏á
    y += 15;
    doc.strokeColor(CONFIG.color.lineLight)
       .lineWidth(1)
       .moveTo(margins.left, y)
       .lineTo(margins.left + bodyW, y)
       .stroke();

    return y + 15;
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô
   */
  static _drawTransferInfo(doc, transfer, margins, bodyW, y) {
    const leftCol = margins.left;
    const rightCol = margins.left + bodyW / 2;
    const lineHeight = 18;

    doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textBody).fillColor(CONFIG.color.textDark);

    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢
    const leftInfo = [
      { label: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÇ‡∏≠‡∏ô:', value: transfer.transferNo || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' },
      { label: '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÇ‡∏≠‡∏ô:', value: formatThaiDate(transfer.transferDate || transfer.createdAt) },
      { label: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:', value: formatTransferStatus(transfer.status) },
      { label: '‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á:', value: `${transfer.sender?.firstName || ''} ${transfer.sender?.lastName || ''}`.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' }
    ];

    // ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤
    const rightInfo = [
      { label: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á:', value: `${transfer.fromBranch?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} (${transfer.fromBranch?.code || ''})` },
      { label: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á:', value: `${transfer.toBranch?.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} (${transfer.toBranch?.code || ''})` },
      { label: '‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥:', value: `${transfer.stockApprover?.firstName || ''} ${transfer.stockApprover?.lastName || ''}`.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' },
      { label: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö:', value: `${transfer.receiver?.firstName || ''} ${transfer.receiver?.lastName || ''}`.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏' }
    ];

    // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ã‡πâ‡∏≤‡∏¢
    leftInfo.forEach((info, index) => {
      const currentY = y + (index * lineHeight);

      doc.font(CONFIG.font.boldName);
      doc.text(info.label, leftCol, currentY, { width: 80 });

      doc.font(CONFIG.font.name);
      doc.text(info.value, leftCol + 85, currentY, { width: 120 });
    });

    // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏ß‡∏≤
    rightInfo.forEach((info, index) => {
      const currentY = y + (index * lineHeight);

      doc.font(CONFIG.font.boldName);
      doc.text(info.label, rightCol, currentY, { width: 90 });

      doc.font(CONFIG.font.name);
      doc.text(info.value, rightCol + 95, currentY, { width: 150 });
    });

    return y + (leftInfo.length * lineHeight) + 20;
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
   */
  static _drawItemsTable(doc, transfer, margins, bodyW, y) {
    const cols = CONFIG.layout.tableCols;
    const startY = y;

    // ‡∏ß‡∏≤‡∏î‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    doc.fillColor(CONFIG.color.transferGreen);
    doc.rect(margins.left, y, bodyW, 25).fill();

    // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    doc.font(CONFIG.font.boldName).fontSize(CONFIG.sizes.tableHeader).fillColor(CONFIG.color.textHeader);

    let x = margins.left;
    const headers = [
      { text: '‡∏•‡∏≥‡∏î‡∏±‡∏ö', width: cols.no },
      { text: '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', width: cols.item },
      { text: 'IMEI/Serial', width: cols.imei },
      { text: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô', width: cols.qty },
      { text: '‡∏´‡∏ô‡πà‡∏ß‡∏¢', width: cols.unit },
      { text: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏', width: cols.note }
    ];

    headers.forEach(header => {
      doc.text(header.text, x + 5, y + 8, { width: header.width - 10, align: 'center' });
      x += header.width;
    });

    y += 25;

    // ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.tableRow).fillColor(CONFIG.color.textDark);

    const items = transfer.items || [];
    items.forEach((item, index) => {
      const rowHeight = 20;
      const isEven = index % 2 === 0;

      // ‡∏ß‡∏≤‡∏î‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ñ‡∏ß
      if (isEven) {
        doc.fillColor('#F8F9FA');
        doc.rect(margins.left, y, bodyW, rowHeight).fill();
      }

      doc.fillColor(CONFIG.color.textDark);

      x = margins.left;
      const rowData = [
        { text: (index + 1).toString(), width: cols.no, align: 'center' },
        { text: item.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤', width: cols.item, align: 'left' },
        { text: item.imei || '-', width: cols.imei, align: 'center' },
        { text: item.quantity?.toString() || '0', width: cols.qty, align: 'center' },
        { text: '‡∏ä‡∏¥‡πâ‡∏ô', width: cols.unit, align: 'center' },
        { text: item.note || '-', width: cols.note, align: 'left' }
      ];

      rowData.forEach(cell => {
        doc.text(cell.text, x + 5, y + 5, {
          width: cell.width - 10,
          align: cell.align,
          ellipsis: true
        });
        x += cell.width;
      });

      y += rowHeight;
    });

    // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
    doc.strokeColor(CONFIG.color.lineDark).lineWidth(1);

    // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
    for (let i = 0; i <= items.length + 1; i++) {
      const lineY = startY + (i === 0 ? 0 : 25) + (i > 1 ? (i - 1) * 20 : 0);
      doc.moveTo(margins.left, lineY).lineTo(margins.left + bodyW, lineY).stroke();
    }

    // ‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏ô‡∏ß‡∏ï‡∏±‡πâ‡∏á
    x = margins.left;
    headers.forEach(header => {
      doc.moveTo(x, startY).lineTo(x, y).stroke();
      x += header.width;
    });
    doc.moveTo(x, startY).lineTo(x, y).stroke(); // ‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏ß‡∏≤‡∏™‡∏∏‡∏î

    return y + 20;
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏µ‡∏î (‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏π‡∏õ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
   */
  static _drawSignatures(doc, transfer, margins, bodyW, y) {
    const signatureLineLength = 150;
    const signatureY = y;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô 2 ‡∏Ñ‡∏ô (‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°/‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á ‡πÅ‡∏•‡∏∞ ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö)
    const signatures = [
      {
        title: '‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°',
        name: `${transfer.sender?.firstName || ''} ${transfer.sender?.lastName || ''}`.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        signatureData: transfer.senderSignature?.data,
        signedAt: transfer.senderSignature?.signedAt
      },
      {
        title: '‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        name: `${transfer.receiver?.firstName || ''} ${transfer.receiver?.lastName || ''}`.trim() || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        signatureData: transfer.receiverSignature?.data,
        signedAt: transfer.receiverSignature?.signedAt || transfer.receivedAt
      }
    ];

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á X ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 2 ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏ó‡πà‡∏≤‡πÜ ‡∏Å‡∏±‡∏ô
    const spacing = (bodyW - (signatureLineLength * 2)) / 3;
    const signaturePositions = [
      margins.left + spacing,                                    // ‡∏ú‡∏π‡πâ‡∏à‡∏±‡∏î‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°
      margins.left + spacing * 2 + signatureLineLength          // ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    ];

    doc.font(CONFIG.font.boldName).fontSize(CONFIG.sizes.textBody).fillColor(CONFIG.color.textDark);

    signatures.forEach((sig, index) => {
      const x = signaturePositions[index];

      // 1. ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô
      doc.text(sig.title, x, signatureY, { width: signatureLineLength, align: 'center' });

      // 2. ‡∏ß‡∏≤‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏´‡∏£‡∏∑‡∏≠‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏µ‡∏î‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (sig.signatureData) {
        try {
          // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô buffer ‡πÅ‡∏•‡∏∞‡∏ß‡∏≤‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
          const signatureImage = Buffer.from(sig.signatureData.replace(/^data:image\/\w+;base64,/, ''), 'base64');
          doc.image(signatureImage, x + 25, signatureY + 15, {
            width: 100,
            height: 30,
            align: 'center'
          });
        } catch (err) {
          console.warn('Failed to draw signature image:', err);
          // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏≤‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏µ‡∏î‡πÅ‡∏ó‡∏ô
          doc.strokeColor(CONFIG.color.lineDark).lineWidth(1);
          doc.moveTo(x, signatureY + 40)
             .lineTo(x + signatureLineLength, signatureY + 40)
             .stroke();
        }
      } else {
        // ‡∏ß‡∏≤‡∏î‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏µ‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô (‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û) - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏£‡∏≠‡∏ö‡∏™‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏µ‡πà‡∏¢‡∏°
        doc.strokeColor(CONFIG.color.lineDark).lineWidth(1);
        doc.moveTo(x, signatureY + 40)
           .lineTo(x + signatureLineLength, signatureY + 40)
           .stroke();
      }

      // 3. ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ï‡πâ‡πÄ‡∏™‡πâ‡∏ô "(‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ú‡∏π‡πâ...)"
      doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textSmall);
      doc.text(`(‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô${sig.title})`, x, signatureY + 50, { width: signatureLineLength, align: 'center' });

      // 4. ‡∏ß‡∏≤‡∏î‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ô‡∏≤‡∏°
      doc.text(sig.name, x, signatureY + 65, { width: signatureLineLength, align: 'center' });

      // 5. ‡∏ß‡∏≤‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡∏á‡∏ô‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
      if (sig.signedAt) {
        doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatThaiDate(sig.signedAt)}`, x, signatureY + 80, { width: signatureLineLength, align: 'center' });
      }

      doc.font(CONFIG.font.boldName);
    });

    // 5. ‡∏ß‡∏≤‡∏î‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏Å‡∏•‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤
    doc.font(CONFIG.font.name).fontSize(CONFIG.sizes.textSmall);
    doc.text(`‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: ${formatThaiDate(transfer.transferDate || transfer.createdAt)}`,
             margins.left, signatureY + 85, { width: bodyW, align: 'center' });

    return signatureY + 110;
  }

  /**
   * ‡∏ß‡∏≤‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
   */
  static _drawNotes(doc, transfer, margins, bodyW, y) {
    if (transfer.note) {
      doc.font(CONFIG.font.boldName).fontSize(CONFIG.sizes.textBody).fillColor(CONFIG.color.textDark);
      doc.text('‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏:', margins.left, y);

      doc.font(CONFIG.font.name);
      doc.text(transfer.note, margins.left + 60, y, { width: bodyW - 60 });
    }

    return y + 30;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
   */
  static createSampleTransfer() {
    return createSampleTransfer();
  }
}

module.exports = TransferSlipPDFController;
