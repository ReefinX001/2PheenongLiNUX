const express = require('express');
const cors = require('cors');
const CardReaderService = require('./src/services/card-reader-service');

const app = express();
const PORT = 3999;

// Middleware
app.use(cors());
app.use(express.json());

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á CardReaderService
const readerService = new CardReaderService();

// Event listeners
readerService.on('reader_connected', (readerName) => {
  console.log(`‚úÖ ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡πâ‡∏ß: ${readerName}`);
});

readerService.on('reader_disconnected', (readerName) => {
  console.log(`‚ùå ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏≠‡∏≠‡∏Å: ${readerName}`);
});

// API Routes
app.get('/api/status', async (req, res) => {
  try {
    const status = await readerService.checkReader();
    res.json({
      success: true,
      data: status
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

app.get('/api/read-card', async (req, res) => {
  try {
    const cardData = await readerService.readCard();
    res.json({
      success: true,
      data: cardData
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

app.get('/api/cancel-read', async (req, res) => {
  try {
    await readerService.cancelRead();
    res.json({
      success: true,
      message: '‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'
    });
  } catch (error) {
    res.status(500).json({
      success: false,
      error: error.message
    });
  }
});

// ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html>
    <head>
      <title>uTrust 2700 R Card Reader</title>
      <meta charset="utf-8">
      <style>
        body { 
          font-family: Arial, sans-serif; 
          max-width: 800px; 
          margin: 0 auto; 
          padding: 20px; 
          background-color: #f5f5f5;
        }
        .container { 
          background: white; 
          padding: 30px; 
          border-radius: 10px; 
          box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 { 
          color: #333; 
          text-align: center; 
          margin-bottom: 30px;
        }
        .button { 
          background-color: #007bff; 
          color: white; 
          padding: 12px 24px; 
          border: none; 
          border-radius: 5px; 
          cursor: pointer; 
          font-size: 16px; 
          margin: 10px;
        }
        .button:hover { 
          background-color: #0056b3; 
        }
        .button:disabled { 
          background-color: #ccc; 
          cursor: not-allowed; 
        }
        .result { 
          background-color: #f8f9fa; 
          padding: 20px; 
          border-radius: 5px; 
          margin: 20px 0; 
          border-left: 4px solid #007bff;
        }
        .error { 
          background-color: #f8d7da; 
          color: #721c24; 
          border-left-color: #dc3545;
        }
        .success { 
          background-color: #d4edda; 
          color: #155724; 
          border-left-color: #28a745;
        }
        .status { 
          display: flex; 
          justify-content: space-between; 
          margin: 20px 0;
        }
        .status-item { 
          text-align: center; 
          padding: 10px; 
          background: #e9ecef; 
          border-radius: 5px; 
          flex: 1; 
          margin: 0 5px;
        }
        .card-data { 
          margin: 10px 0; 
          padding: 10px; 
          background: #f8f9fa; 
          border-radius: 5px;
        }
        .card-data strong { 
          color: #495057; 
        }
      </style>
    </head>
    <body>
      <div class="container">
        <h1>üîí uTrust 2700 R Card Reader</h1>
        
        <div class="status">
          <div class="status-item">
            <strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong>
            <div id="status">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö...</div>
          </div>
          <div class="status-item">
            <strong>‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£:</strong>
            <div id="reader">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î...</div>
          </div>
          <div class="status-item">
            <strong>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô:</strong>
            <div id="reading">‡πÑ‡∏°‡πà</div>
          </div>
        </div>

        <div style="text-align: center;">
          <button class="button" onclick="checkStatus()">‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞</button>
          <button class="button" onclick="readCard()" id="readBtn">‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£</button>
          <button class="button" onclick="cancelRead()">‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å</button>
        </div>

        <div id="result"></div>
      </div>

      <script>
        let reading = false;

        function showResult(html, type = 'result') {
          document.getElementById('result').innerHTML = '<div class="result ' + type + '">' + html + '</div>';
        }

        function updateStatus(status) {
          document.getElementById('status').textContent = status.status === 'connected' ? '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠' : '‡πÑ‡∏°‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠';
          document.getElementById('reader').textContent = status.currentReader || '‡πÑ‡∏°‡πà‡∏û‡∏ö';
          document.getElementById('reading').textContent = status.isReading ? '‡πÉ‡∏ä‡πà' : '‡πÑ‡∏°‡πà';
          reading = status.isReading;
          document.getElementById('readBtn').disabled = reading;
        }

        async function checkStatus() {
          try {
            const response = await fetch('/api/status');
            const result = await response.json();
            
            if (result.success) {
              updateStatus(result.data);
              showResult('‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡πÅ‡∏•‡πâ‡∏ß', 'success');
            } else {
              showResult('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: ' + result.error, 'error');
            }
          } catch (error) {
            showResult('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
          }
        }

        async function readCard() {
          if (reading) return;
          
          reading = true;
          document.getElementById('readBtn').disabled = true;
          document.getElementById('reading').textContent = '‡πÉ‡∏ä‡πà';
          
          showResult('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£... ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô', 'result');
          
          try {
            const response = await fetch('/api/read-card');
            const result = await response.json();
            
            if (result.success) {
              const data = result.data;
              let html = '<h3>‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!</h3>';
              html += '<div class="card-data"><strong>‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</strong> ' + data.citizenId + '</div>';
              html += '<div class="card-data"><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÑ‡∏ó‡∏¢):</strong> ' + data.fullNameTh + '</div>';
              html += '<div class="card-data"><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©):</strong> ' + data.fullNameEng + '</div>';
              html += '<div class="card-data"><strong>‡πÄ‡∏û‡∏®:</strong> ' + data.gender + '</div>';
              html += '<div class="card-data"><strong>‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î:</strong> ' + data.birthdayTh + ' (' + data.birthdayEn + ')</div>';
              html += '<div class="card-data"><strong>‡∏≠‡∏≤‡∏¢‡∏∏:</strong> ' + data.age + ' ‡∏õ‡∏µ</div>';
              html += '<div class="card-data"><strong>‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:</strong> ' + data.address + '</div>';
              html += '<div class="card-data"><strong>‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£:</strong> ' + data.readTime + '</div>';
              
              showResult(html, 'success');
            } else {
              showResult('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ: ' + result.error, 'error');
            }
          } catch (error) {
            showResult('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
          } finally {
            reading = false;
            document.getElementById('readBtn').disabled = false;
            document.getElementById('reading').textContent = '‡πÑ‡∏°‡πà';
          }
        }

        async function cancelRead() {
          try {
            const response = await fetch('/api/cancel-read');
            const result = await response.json();
            
            if (result.success) {
              showResult('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß', 'success');
              reading = false;
              document.getElementById('readBtn').disabled = false;
              document.getElementById('reading').textContent = '‡πÑ‡∏°‡πà';
            } else {
              showResult('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡πÑ‡∏î‡πâ: ' + result.error, 'error');
            }
          } catch (error) {
            showResult('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
          }
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤
        checkStatus();
        
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏∏‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        setInterval(checkStatus, 5000);
      </script>
    </body>
    </html>
  `);
});

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ß‡∏¥‡∏™
app.listen(PORT, () => {
  console.log(`üöÄ uTrust 2700 R Card Reader Service running on port ${PORT}`);
  console.log(`üì± Open http://localhost:${PORT} to test card reading`);
  console.log(`üîó API Endpoints:`);
  console.log(`   - GET /api/status - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞`);
  console.log(`   - GET /api/read-card - ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£`);
  console.log(`   - GET /api/cancel-read - ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å`);
});

// Graceful shutdown
process.on('SIGINT', async () => {
  console.log('\nüõë Shutting down gracefully...');
  await readerService.close();
  process.exit(0);
});