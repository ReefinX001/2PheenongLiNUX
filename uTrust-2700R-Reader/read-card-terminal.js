const pcsclite = require('pcsclite');
const iconv = require('iconv-lite');

// Configuration
const DELAY_MS = 200;
let currentReader = null;

// Helper functions
function delay(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

function transmitPromise(reader, protocol, apdu) {
  return new Promise((resolve, reject) => {
    reader.transmit(apdu, 4096, protocol, (err, data) => {
      if (err) return reject(err);
      resolve(data);
    });
  });
}

function apduGetResponse(le) {
  return Buffer.from([0x00, 0xc0, 0x00, 0x00, le]);
}

// APDU Commands
const APDU_SELECT_AID = Buffer.from([
  0x00, 0xa4, 0x04, 0x00, 0x08,
  0xa0, 0x00, 0x00, 0x00, 0x54, 0x48, 0x00, 0x01,
]);

async function readField(reader, protocol, apdu, decodeText = false, trimResult = false) {
  let resp = await transmitPromise(reader, protocol, apdu);

  // Handle GET RESPONSE (SW1=0x61)
  if (resp.length >= 2 && resp[resp.length - 2] === 0x61) {
    const le = resp[resp.length - 1];
    await delay(DELAY_MS);
    const getResp = await transmitPromise(reader, protocol, apduGetResponse(le));
    resp = Buffer.concat([
      resp.slice(0, resp.length - 2),
      getResp.slice(0, getResp.length - 2),
    ]);
  }

  // Remove SW1/SW2 if success (0x90 0x00)
  if (resp.length >= 2) {
    const sw1 = resp[resp.length - 2];
    const sw2 = resp[resp.length - 1];
    if (sw1 === 0x90 && sw2 === 0x00) {
      resp = resp.slice(0, resp.length - 2);
    }
  }

  let result = decodeText ? iconv.decode(resp, 'TIS-620') : resp.toString('hex');
  if (trimResult) result = result.trim();
  return result;
}

async function readAllData(reader, protocol) {
  console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£...');

  // 1. SELECT AID
  await transmitPromise(reader, protocol, APDU_SELECT_AID);
  console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡πÅ‡∏•‡πâ‡∏ß');

  // 2. ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
  const apduCID = Buffer.from([0x80, 0xb0, 0x00, 0x04, 0x02, 0x00, 0x0d]);
  const citizenId = await readField(reader, protocol, apduCID, true, true);

  // 3. ‡∏≠‡πà‡∏≤‡∏ô‡πÄ‡∏û‡∏®
  const apduGender = Buffer.from([0x80, 0xb0, 0x00, 0xe1, 0x02, 0x00, 0x01]);
  const genderText = await readField(reader, protocol, apduGender, true, true);
  const gender = genderText.startsWith('1') ? '‡∏ä‡∏≤‡∏¢' : '‡∏´‡∏ç‡∏¥‡∏á';

  // 4. ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
  const apduThFull = Buffer.from([0x80, 0xb0, 0x00, 0x11, 0x02, 0x00, 0x64]);
  const thFullText = await readField(reader, protocol, apduThFull, true, true);
  const thParts = thFullText.substring(0, 35).split('#');
  const titleTh = thParts[0]?.trim() || '';
  const firstNameTh = thParts[1]?.trim() || '';
  const lastNameTh = thParts[3]?.trim() || '';

  // 5. ‡∏≠‡πà‡∏≤‡∏ô‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)
  const apduEngFull = Buffer.from([0x80, 0xb0, 0x00, 0x75, 0x02, 0x00, 0x64]);
  const engFullText = await readField(reader, protocol, apduEngFull, true, true);
  const engParts = engFullText.substring(0, 35).split('#');
  const titleEng = engParts[0]?.trim() || '';
  const firstNameEng = engParts[1]?.trim() || '';
  const lastNameEng = engParts[3]?.trim() || '';

  // 6. ‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  const apduAddr = Buffer.from([0x80, 0xb0, 0x15, 0x79, 0x02, 0x00, 0x64]);
  const address = await readField(reader, protocol, apduAddr, true, true);

  // 7. ‡∏≠‡πà‡∏≤‡∏ô‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
  const apduDOB = Buffer.from([0x80, 0xb0, 0x00, 0xd9, 0x02, 0x00, 0x08]);
  const dobText = await readField(reader, protocol, apduDOB, true, true);
  const yearTh = dobText.substring(0, 4);
  const month = dobText.substring(4, 6);
  const day = dobText.substring(6, 8);
  const yearEn = parseInt(yearTh, 10) - 543;
  const birthdayTh = `${day}/${month}/${yearTh}`;
  const birthdayEn = `${day}/${month}/${yearEn}`;

  // 8. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏
  const dobDate = new Date(yearEn, parseInt(month, 10) - 1, parseInt(day, 10));
  const today = new Date();
  let age = today.getFullYear() - dobDate.getFullYear();
  const mDiff = today.getMonth() - dobDate.getMonth();
  if (mDiff < 0 || (mDiff === 0 && today.getDate() < dobDate.getDate())) {
    age--;
  }

  return {
    citizenId,
    gender,
    titleTh,
    firstNameTh,
    lastNameTh,
    titleEng,
    firstNameEng,
    lastNameEng,
    address,
    birthdayTh,
    birthdayEn,
    age,
    fullNameTh: `${titleTh}${firstNameTh} ${lastNameTh}`.trim(),
    fullNameEng: `${titleEng}${firstNameEng} ${lastNameEng}`.trim(),
  };
}

function displayCardData(data) {
  console.log('\n' + '='.repeat(80));
  console.log('üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô');
  console.log('='.repeat(80));

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
  console.log(`üÜî ‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô: ${data.citizenId}`);
  console.log(`üë§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡πÑ‡∏ó‡∏¢): ${data.fullNameTh}`);
  console.log(`üî§ ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©): ${data.fullNameEng}`);
  console.log(`‚ößÔ∏è  ‡πÄ‡∏û‡∏®: ${data.gender}`);
  console.log(`üéÇ ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î: ${data.birthdayTh} (${data.birthdayEn})`);
  console.log(`üéØ ‡∏≠‡∏≤‡∏¢‡∏∏: ${data.age} ‡∏õ‡∏µ`);
  console.log(`üè† ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà: ${data.address}`);
  console.log(`‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô: ${new Date().toLocaleString('th-TH')}`);

  console.log('='.repeat(80));

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  console.log('\nüîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (Raw Data):');
  console.log('-'.repeat(50));
  console.log(`‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (raw): "${data.citizenId}"`);
  console.log(`‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ó‡∏¢ (raw): "${data.titleTh}|${data.firstNameTh}|${data.lastNameTh}"`);
  console.log(`‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© (raw): "${data.titleEng}|${data.firstNameEng}|${data.lastNameEng}"`);
  console.log(`‡πÄ‡∏û‡∏® (raw): "${data.gender}"`);
  console.log(`‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà (raw): "${data.address}"`);
  console.log('-'.repeat(50));

  console.log('‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
}

async function readCard() {
  if (!currentReader) {
    console.log('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏™‡∏µ‡∏¢‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£');
    return;
  }

  console.log('üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô...');

  return new Promise((resolve, reject) => {
    currentReader.connect({ share_mode: currentReader.SCARD_SHARE_SHARED }, async (err, protocol) => {
      if (err) {
        console.log('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ:', err.message);
        reject(err);
        return;
      }

      try {
        const data = await readAllData(currentReader, protocol);
        displayCardData(data);

        // Disconnect
        currentReader.disconnect(currentReader.SCARD_LEAVE_CARD, (derr) => {
          if (derr) console.log('‚ö†Ô∏è Disconnect warning:', derr.message);
          resolve(data);
        });
      } catch (ex) {
        console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£:', ex.message);
        reject(ex);
      }
    });
  });
}

// Main program
console.log('üöÄ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô...');
console.log('üîå ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£...');

const pcsc = pcsclite();

pcsc.on('reader', (reader) => {
  console.log(`‚úÖ ‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£: ${reader.name}`);
  currentReader = reader;

  // ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô ‡πÉ‡∏´‡πâ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
  setTimeout(async () => {
    try {
      await readCard();
    } catch (error) {
      console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
    process.exit(0);
  }, 1000);

  reader.on('end', () => {
    console.log(`‚ùå ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≠‡∏î‡∏≠‡∏≠‡∏Å: ${reader.name}`);
    currentReader = null;
  });

  reader.on('error', (err) => {
    console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£:', err.message);
  });
});

pcsc.on('error', (err) => {
  console.log('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Å‡∏±‡∏ö PCSC:', err.message);
});

// Handle graceful shutdown
process.on('SIGINT', () => {
  console.log('\nüëã ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°...');
  pcsc.close();
  process.exit(0);
});

// ‡πÄ‡∏û‡∏¥‡πà‡∏° timeout ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô
setTimeout(() => {
  if (!currentReader) {
    console.log('‚è∞ ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠');
    process.exit(1);
  }
}, 10000);