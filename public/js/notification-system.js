/**
 * =========================================
 * Notification System JavaScript
 * ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤
 * =========================================
 */

class NotificationSystem {
  constructor() {
    this.notifications = [];
    this.socket = null;
    this.toastContainer = null;
    this.notificationDropdown = null;
    this.isDropdownOpen = false;
    this.unreadCount = 0;

    this.init();
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
   */
  init() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    if (document.readyState === 'loading') {
      document.addEventListener('DOMContentLoaded', () => {
        this.initializeComponents();
      });
    } else {
      this.initializeComponents();
    }
  }

  /**
   * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Ñ‡∏≠‡∏°‡πÇ‡∏û‡πÄ‡∏ô‡∏ô‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
   */
  initializeComponents() {
    this.createToastContainer();
    this.setupSocketIO();
    this.loadNotifications();
    this.setupNotificationDropdown();
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á Toast Container
   */
  createToastContainer() {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ document.body ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if (!document.body) {
      console.warn('‚ö†Ô∏è Document body is not ready, delaying toast container creation');
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å 100ms ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤ document.body ‡∏à‡∏∞‡∏û‡∏£‡πâ‡∏≠‡∏°
      setTimeout(() => {
        if (document.body && !this.toastContainer) {
          console.log('üîÑ Retrying toast container creation...');
          this.createToastContainer();
        }
      }, 100);
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ container ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if (document.getElementById('toastContainer')) {
      this.toastContainer = document.getElementById('toastContainer');
      console.log('‚úÖ Found existing toast container');
      return;
    }

    try {
      const container = document.createElement('div');
      container.id = 'toastContainer';
      document.body.appendChild(container);
      this.toastContainer = container;
      console.log('‚úÖ Toast container created successfully');
    } catch (error) {
      console.error('‚ùå Failed to create toast container:', error);
      // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 200ms
      setTimeout(() => {
        if (!this.toastContainer) {
          this.createToastContainer();
        }
      }, 200);
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á Toast Notification
   * @param {string} message - ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á
   * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á toast (success, error, warning, info)
   * @param {number} duration - ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á (milliseconds)
   * @param {boolean} closable - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   */
  showToast(message, type = 'info', duration = 4000, closable = true) {
    if (!this.toastContainer) {
      this.createToastContainer();
    }

          // ‡∏ñ‡πâ‡∏≤ toastContainer ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ console.log ‡πÅ‡∏ó‡∏ô
      if (!this.toastContainer) {
        console.log(`[Toast: ${type.toUpperCase()}] ${message}`);

        // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á container ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        if (document.body) {
          this.createToastContainer();
          if (!this.toastContainer) {
            console.warn('‚ö†Ô∏è Still cannot create toast container, falling back to console');
            return null;
          }
        } else {
          console.warn('‚ö†Ô∏è Document body still not ready');
          return null;
        }
      }

    const toastId = 'toast_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);

    const toast = document.createElement('div');
    toast.id = toastId;
    toast.className = `toast toast-${type} toast-enter`;

    // Icon mapping
    const icons = {
      success: 'bi-check-circle-fill',
      error: 'bi-x-circle-fill',
      warning: 'bi-exclamation-triangle-fill',
      info: 'bi-info-circle-fill'
    };

    // Close button HTML
    const closeButtonHTML = closable ?
      `<button class="toast-close" onclick="NotificationSystem.instance.closeToast('${toastId}')">
        <i class="bi bi-x"></i>
      </button>` : '';

    // Progress bar HTML (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ duration)
    const progressBarHTML = duration > 0 ?
      `<div class="toast-progress" style="width: 100%; animation: shrink ${duration}ms linear;"></div>` : '';

    toast.innerHTML = `
      <i class="toast-icon bi ${icons[type]}"></i>
      <span class="toast-message">${message}</span>
      ${closeButtonHTML}
      ${progressBarHTML}
    `;

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° toast ‡∏•‡∏á‡πÉ‡∏ô container
    this.toastContainer.appendChild(toast);

    // Auto remove ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    if (duration > 0) {
      setTimeout(() => {
        this.closeToast(toastId);
      }, duration);
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° keyframe ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö progress bar
    if (!document.querySelector('style[data-notification-keyframes]')) {
      const style = document.createElement('style');
      style.setAttribute('data-notification-keyframes', 'true');
      style.textContent = `
        @keyframes shrink {
          from { width: 100%; }
          to { width: 0%; }
        }
      `;
      document.head.appendChild(style);
    }

    console.log(`üîî Toast displayed: [${type.toUpperCase()}] ${message}`);
    return toastId;
  }

  /**
   * ‡∏õ‡∏¥‡∏î Toast Notification
   * @param {string} toastId - ID ‡∏Ç‡∏≠‡∏á toast ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏õ‡∏¥‡∏î
   */
  closeToast(toastId) {
    const toast = document.getElementById(toastId);
    if (!toast) return;

    toast.classList.remove('toast-enter');
    toast.classList.add('toast-exit');

    setTimeout(() => {
      if (toast && toast.parentNode) {
        toast.parentNode.removeChild(toast);
      }
    }, 300);
  }

  /**
   * ‡∏õ‡∏¥‡∏î Toast ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  closeAllToasts() {
    const toasts = this.toastContainer.querySelectorAll('.toast');
    toasts.forEach(toast => {
      this.closeToast(toast.id);
    });
  }

  /**
   * Setup Socket.IO ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time notifications
   */
  setupSocketIO() {
    if (typeof io === 'undefined') {
      console.warn('Socket.IO ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
      return;
    }

    try {
      this.socket = io();

      this.socket.on('connect', () => {
        console.log('üîó Notification system connected to Socket.IO');

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        const branchCode = window.BRANCH_CODE || window.currentBranchCode || '00000';
        this.socket.emit('join_notification_room', {
          branchCode: branchCode,
          timestamp: new Date().toISOString()
        });
      });

      this.socket.on('disconnect', (reason) => {
        console.log('‚ùå Notification system disconnected:', reason);
      });

      // ‡∏ü‡∏±‡∏á notification ‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
      this.socket.on('notification', (data) => {
        this.handleRealtimeNotification(data);
      });

      // ‡∏ü‡∏±‡∏á broadcast notifications
      this.socket.on('broadcast_notification', (data) => {
        this.handleBroadcastNotification(data);
      });

      // ‡∏ü‡∏±‡∏á system notifications
      this.socket.on('system_notification', (data) => {
        this.handleSystemNotification(data);
      });

      // ‡∏ü‡∏±‡∏á force logout
      this.socket.on('forceLogout', (data) => {
        this.showToast(data.reason || '‡∏Ñ‡∏∏‡∏ì‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•', 'error', 5000);
        setTimeout(() => {
          localStorage.clear();
          window.location.href = '/login.html';
        }, 3000);
      });

    } catch (error) {
      console.error('‚ùå Socket.IO setup error:', error);
    }
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ real-time notification
   * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification
   */
  handleRealtimeNotification(data) {
    console.log('üì® Received real-time notification:', data);

    // ‡πÅ‡∏™‡∏î‡∏á toast
    this.showToast(data.message, data.type || 'info', data.duration || 4000);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡πÉ‡∏ô notification list
    this.addNotification({
      id: data.id || Date.now(),
      title: data.title || '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      message: data.message,
      type: data.type || 'info',
      timestamp: data.timestamp || new Date().toISOString(),
      read: false,
      action: data.action || null
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï notification badge
    this.updateNotificationBadge();
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ broadcast notification
   * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification
   */
  handleBroadcastNotification(data) {
    console.log('üì¢ Received broadcast notification:', data);

    this.showToast(
      `üì¢ ${data.message}`,
      data.type || 'info',
      data.duration || 6000
    );

    this.addNotification({
      id: data.id || Date.now(),
      title: 'üì¢ ' + (data.title || '‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'),
      message: data.message,
      type: data.type || 'info',
      timestamp: data.timestamp || new Date().toISOString(),
      read: false,
      priority: 'high'
    });

    this.updateNotificationBadge();
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ system notification
   * @param {Object} data - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification
   */
  handleSystemNotification(data) {
    console.log('üîß Received system notification:', data);

    this.showToast(
      `üîß ${data.message}`,
      data.type || 'warning',
      data.duration || 8000
    );

    this.addNotification({
      id: data.id || Date.now(),
      title: 'üîß ' + (data.title || '‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏£‡∏∞‡∏ö‡∏ö'),
      message: data.message,
      type: data.type || 'warning',
      timestamp: data.timestamp || new Date().toISOString(),
      read: false,
      priority: 'high'
    });

    this.updateNotificationBadge();
  }

  /**
   * Setup Notification Dropdown
   */
  setupNotificationDropdown() {
    const button = document.getElementById('notificationButton');
    const dropdown = document.getElementById('notificationDropdown');

    if (!button || !dropdown) {
      console.warn('Notification dropdown elements ‡πÑ‡∏°‡πà‡∏û‡∏ö - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤');
      return;
    }

    this.notificationDropdown = dropdown;

    // Event listener ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° notification
    button.addEventListener('click', (e) => {
      e.stopPropagation();
      this.toggleNotificationDropdown();
    });

    // ‡∏õ‡∏¥‡∏î dropdown ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏¥‡∏Å‡∏Ç‡πâ‡∏≤‡∏á‡∏ô‡∏≠‡∏Å
    document.addEventListener('click', (e) => {
      if (!button.contains(e.target) && !dropdown.contains(e.target)) {
        this.closeNotificationDropdown();
      }
    });

    // Mark all as read button - ‡πÉ‡∏ä‡πâ text ‡πÄ‡∏õ‡πá‡∏ô selector
    const markAllReadBtn = dropdown.querySelector('button');
    if (markAllReadBtn && markAllReadBtn.textContent.includes('‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß')) {
      markAllReadBtn.addEventListener('click', (e) => {
        e.preventDefault();
        e.stopPropagation();
        this.markAllAsRead();
      });
    }

    console.log('‚úÖ Notification dropdown setup complete');
  }

  /**
   * Toggle notification dropdown
   */
  toggleNotificationDropdown() {
    if (!this.notificationDropdown) return;

    // Simple toggle ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô home.html
    this.notificationDropdown.classList.toggle('hidden');

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î dropdown ‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î notifications ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô dot
    if (!this.notificationDropdown.classList.contains('hidden')) {
      this.renderNotifications();
      this.hideNotificationIndicators();
      this.isDropdownOpen = true;
    } else {
      this.isDropdownOpen = false;
    }
  }

  /**
   * ‡πÄ‡∏õ‡∏¥‡∏î notification dropdown
   */
  openNotificationDropdown() {
    if (!this.notificationDropdown) return;

    this.notificationDropdown.classList.remove('hidden');
    this.isDropdownOpen = true;

    // ‡πÇ‡∏´‡∏•‡∏î notifications
    this.renderNotifications();

    // ‡∏ã‡πà‡∏≠‡∏ô notification dot
    this.hideNotificationIndicators();
  }

  /**
   * ‡∏õ‡∏¥‡∏î notification dropdown
   */
  closeNotificationDropdown() {
    if (!this.notificationDropdown) return;

    this.notificationDropdown.classList.add('hidden');
    this.isDropdownOpen = false;
  }

  /**
   * ‡πÄ‡∏û‡∏¥‡πà‡∏° notification ‡πÉ‡∏´‡∏°‡πà
   * @param {Object} notification - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification
   */
  addNotification(notification) {
    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏ß‡πâ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î
    this.notifications.unshift(notification);

    // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô notifications (‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 50 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
    if (this.notifications.length > 50) {
      this.notifications = this.notifications.slice(0, 50);
    }

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
    this.saveNotifications();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï badge
    this.updateNotificationBadge();
  }

  /**
   * ‡πÇ‡∏´‡∏•‡∏î notifications ‡∏à‡∏≤‡∏Å localStorage
   */
  loadNotifications() {
    try {
      const saved = localStorage.getItem('notifications');
      if (saved) {
        this.notifications = JSON.parse(saved);
      }

      // ‡πÇ‡∏´‡∏•‡∏î unread count
      const unreadCount = localStorage.getItem('notificationUnreadCount');
      if (unreadCount) {
        this.unreadCount = parseInt(unreadCount, 10) || 0;
      }

      this.updateNotificationBadge();
    } catch (error) {
      console.error('Error loading notifications:', error);
      this.notifications = [];
      this.unreadCount = 0;
    }
  }

  /**
   * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å notifications ‡∏•‡∏á localStorage
   */
  saveNotifications() {
    try {
      localStorage.setItem('notifications', JSON.stringify(this.notifications));
      localStorage.setItem('notificationUnreadCount', this.unreadCount.toString());
    } catch (error) {
      console.error('Error saving notifications:', error);
    }
  }

  /**
   * ‡πÅ‡∏™‡∏î‡∏á notifications ‡πÉ‡∏ô dropdown
   */
  renderNotifications() {
    if (!this.notificationDropdown) return;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ content container ‡πÉ‡∏ô dropdown (‡∏ï‡∏≤‡∏° structure ‡∏Ç‡∏≠‡∏á home.html)
    const contentContainer = this.notificationDropdown.querySelector('.max-h-96.overflow-y-auto') ||
                            this.notificationDropdown.querySelector('.notification-dropdown-content');

    if (!contentContainer) {
      console.warn('‡πÑ‡∏°‡πà‡∏û‡∏ö notification content container');
      return;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ notifications
    if (this.notifications.length === 0) {
      contentContainer.innerHTML = `
        <div class="p-4 text-center text-gray-500 dark:text-gray-400">
          <i class="bi bi-bell-slash text-2xl mb-2"></i>
          <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà</p>
        </div>
      `;
      return;
    }

    // ‡πÅ‡∏™‡∏î‡∏á notifications
    const notificationsHTML = this.notifications.slice(0, 10).map(notification => {
      const timeAgo = this.formatTimeAgo(notification.timestamp);
      const iconClass = this.getNotificationIconClass(notification.type);
      const isUnread = !notification.read;

      return `
        <div class="p-3 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 cursor-pointer ${isUnread ? 'bg-blue-50 dark:bg-blue-900/20' : ''}" 
             onclick="NotificationSystem.instance.markAsRead('${notification.id}')">
          <div class="flex items-start space-x-3">
            <div class="flex-shrink-0 w-8 h-8 rounded-full ${iconClass} flex items-center justify-center">
              <i class="bi ${this.getNotificationIcon(notification.type)} text-sm"></i>
            </div>
            <div class="flex-1 min-w-0">
              <div class="text-sm font-medium text-gray-900 dark:text-gray-100 ${isUnread ? 'font-semibold' : ''}">${notification.title}</div>
              <div class="text-sm text-gray-600 dark:text-gray-300 mt-1">${notification.message}</div>
              <div class="text-xs text-gray-500 dark:text-gray-400 mt-2">${timeAgo}</div>
            </div>
            ${isUnread ? '<div class="flex-shrink-0 w-2 h-2 bg-blue-500 rounded-full"></div>' : ''}
          </div>
        </div>
      `;
    }).join('');

    contentContainer.innerHTML = notificationsHTML;
  }

  /**
   * ‡πÑ‡∏î‡πâ icon class ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notification type
   * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó notification
   * @returns {string} CSS class
   */
  getNotificationIconClass(type) {
    const classes = {
      success: 'bg-green-100 dark:bg-green-900/30 text-green-500',
      error: 'bg-red-100 dark:bg-red-900/30 text-red-500',
      warning: 'bg-yellow-100 dark:bg-yellow-900/30 text-yellow-500',
      info: 'bg-blue-100 dark:bg-blue-900/30 text-blue-500'
    };
    return classes[type] || classes.info;
  }

  /**
   * ‡πÑ‡∏î‡πâ icon ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö notification type
   * @param {string} type - ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó notification
   * @returns {string} Bootstrap icon class
   */
  getNotificationIcon(type) {
    const icons = {
      success: 'bi-check-circle-fill',
      error: 'bi-x-circle-fill',
      warning: 'bi-exclamation-triangle-fill',
      info: 'bi-info-circle-fill'
    };
    return icons[type] || icons.info;
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á timestamp ‡πÄ‡∏õ‡πá‡∏ô "time ago" format
   * @param {string} timestamp - ISO timestamp
   * @returns {string} formatted time
   */
  formatTimeAgo(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diffMs = now - time;
    const diffMins = Math.floor(diffMs / 60000);
    const diffHours = Math.floor(diffMs / 3600000);
    const diffDays = Math.floor(diffMs / 86400000);

    if (diffMins < 1) return '‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏µ‡πâ‡∏ô‡∏µ‡πâ';
    if (diffMins < 60) return `${diffMins} ‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
    if (diffHours < 24) return `${diffHours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;
    if (diffDays < 7) return `${diffDays} ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß`;

    return time.toLocaleDateString('th-TH', {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    });
  }

  /**
   * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï notification badge
   */
  updateNotificationBadge() {
    this.unreadCount = this.notifications.filter(n => !n.read).length;

    const badge = document.getElementById('notificationBadge');
    const dot = document.getElementById('notificationDot');

    if (this.unreadCount > 0) {
      if (badge) {
        badge.classList.remove('hidden');
        badge.textContent = this.unreadCount > 99 ? '99+' : this.unreadCount.toString();
      }
      if (dot) {
        dot.classList.remove('hidden');
      }
    } else {
      if (badge) badge.classList.add('hidden');
      if (dot) dot.classList.add('hidden');
    }

    this.saveNotifications();
  }

  /**
   * ‡∏ã‡πà‡∏≠‡∏ô notification indicators
   */
  hideNotificationIndicators() {
    const badge = document.getElementById('notificationBadge');
    const dot = document.getElementById('notificationDot');

    if (badge) badge.classList.add('hidden');
    if (dot) dot.classList.add('hidden');
  }

  /**
   * ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
   * @param {string} notificationId - ID ‡∏Ç‡∏≠‡∏á notification
   */
  markAsRead(notificationId) {
    const notification = this.notifications.find(n => n.id == notificationId);
    if (notification && !notification.read) {
      notification.read = true;
      this.updateNotificationBadge();
      this.renderNotifications();

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ action ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      if (notification.action) {
        this.handleNotificationAction(notification.action);
      }
    }
  }

  /**
   * ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏≠‡πà‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
   */
  markAllAsRead() {
    this.notifications.forEach(notification => {
      notification.read = true;
    });
    this.updateNotificationBadge();
    this.renderNotifications();
  }

  /**
   * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ notification action
   * @param {Object} action - action object
   */
  handleNotificationAction(action) {
    if (!action || !action.type) return;

    switch (action.type) {
      case 'redirect':
        if (action.url) {
          window.location.href = action.url;
        }
        break;
      case 'refresh':
        window.location.reload();
        break;
      case 'function':
        if (action.function && typeof window[action.function] === 'function') {
          window[action.function](action.params);
        }
        break;
      default:
        console.log('Unknown notification action:', action);
    }
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á notifications ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  clearAllNotifications() {
    this.notifications = [];
    this.unreadCount = 0;
    this.saveNotifications();
    this.updateNotificationBadge();
    this.renderNotifications();
  }

  /**
   * ‡∏™‡πà‡∏á notification ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
   * @param {Object} notification - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• notification
   */
  sendNotification(notification) {
    if (this.socket && this.socket.connected) {
      this.socket.emit('send_notification', notification);
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÅ‡∏•‡∏∞‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÉ‡∏ô window object
window.NotificationSystem = NotificationSystem;

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏´‡∏•‡∏±‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
window.createNotificationInstance = function() {
  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≠‡∏á DOM
    if (!document || !document.documentElement) {
      console.warn('‚ö†Ô∏è Document not ready, delaying NotificationSystem creation...');
      setTimeout(window.createNotificationInstance, 50);
      return;
    }

    if (!document.body) {
      console.warn('‚ö†Ô∏è Document body not ready, delaying NotificationSystem creation...');
      setTimeout(window.createNotificationInstance, 100);
      return;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ instance ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
    if (!NotificationSystem.instance) {
      console.log('üîî Creating NotificationSystem instance...');
      NotificationSystem.instance = new NotificationSystem();
      console.log('‚úÖ Notification System instance created successfully');
    } else {
      console.log('‚ÑπÔ∏è NotificationSystem instance already exists');
    }
  } catch (error) {
    console.error('‚ùå Failed to create NotificationSystem instance:', error);
    console.error('Error details:', error.message, error.stack);

    // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 500ms
    setTimeout(() => {
      console.log('üîÑ Retrying NotificationSystem instance creation...');
      window.createNotificationInstance();
    }, 500);
  }
};

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡πÅ‡∏•‡∏∞ body ‡∏û‡∏£‡πâ‡∏≠‡∏°
if (document.readyState === 'loading') {
  console.log('üìÑ Document is loading, waiting for DOMContentLoaded...');
  document.addEventListener('DOMContentLoaded', () => {
    console.log('‚úÖ DOMContentLoaded fired');
    // ‡∏£‡∏≠ body ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ô‡πà‡πÜ
    if (document.body) {
      window.createNotificationInstance();
    } else {
      console.warn('‚ö†Ô∏è Body still not ready after DOMContentLoaded, waiting...');
      setTimeout(window.createNotificationInstance, 50);
    }
  });
} else if (document.readyState === 'interactive' || document.readyState === 'complete') {
  console.log('üìÑ Document ready state:', document.readyState);
  if (document.body) {
    console.log('‚úÖ Document body is ready, creating instance immediately');
    window.createNotificationInstance();
  } else {
    console.warn('‚ö†Ô∏è Document ready but body not found, waiting...');
    let retryCount = 0;
    const checkBody = () => {
      retryCount++;
      if (document.body) {
        console.log('‚úÖ Document body ready after', retryCount, 'attempts');
        window.createNotificationInstance();
      } else if (retryCount < 20) { // ‡∏•‡∏≠‡∏á‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á (2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
        setTimeout(checkBody, 100);
      } else {
        console.error('‚ùå Document body not ready after 2 seconds, giving up auto-initialization');
      }
    };
    checkBody();
  }
} else {
  console.warn('‚ö†Ô∏è Unknown document ready state:', document.readyState);
  setTimeout(window.createNotificationInstance, 100);
}

// Export functions ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
window.showToast = function(message, type = 'info', duration = 4000, closable = true) {
  try {
    if (NotificationSystem.instance) {
      return NotificationSystem.instance.showToast(message, type, duration, closable);
    } else {
      console.log(`[Toast: ${type.toUpperCase()}] ${message}`);

      // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (document.body && !NotificationSystem.instance) {
        console.log('üîÑ Auto-creating NotificationSystem instance...');
        window.createNotificationInstance();

        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        setTimeout(() => {
          if (NotificationSystem.instance) {
            console.log('‚úÖ Auto-recovery successful, showing toast...');
            return NotificationSystem.instance.showToast(message, type, duration, closable);
          } else {
            console.warn('‚ùå Auto-recovery failed, toast will be shown in console only');
          }
        }, 50);
      } else if (!document.body) {
        console.warn('‚ö†Ô∏è Document body not ready, deferring toast...');

        // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏°‡∏∑‡πà‡∏≠ DOM ‡∏û‡∏£‡πâ‡∏≠‡∏°
        const retryToast = () => {
          if (document.body) {
            window.showToast(message, type, duration, closable);
          } else {
            setTimeout(retryToast, 100);
          }
        };
        setTimeout(retryToast, 100);
      }
      return null;
    }
  } catch (error) {
    console.error('‚ùå showToast error:', error);
    console.error('Error details:', error.message, error.stack);
    console.log(`[Toast Fallback: ${type.toUpperCase()}] ${message}`);

    // ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÉ‡∏´‡∏°‡πà‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà instance ‡πÄ‡∏™‡∏µ‡∏¢‡∏´‡∏≤‡∏¢
    if (document.body && (!NotificationSystem.instance || error.message.includes('appendChild'))) {
      console.log('üîß Attempting to recover NotificationSystem...');
      NotificationSystem.instance = null; // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï instance
      setTimeout(() => {
        window.createNotificationInstance();
      }, 100);
    }

    return null;
  }
};

window.hideNotificationDot = function() {
  try {
    if (NotificationSystem.instance) {
      NotificationSystem.instance.hideNotificationIndicators();
    }
  } catch (error) {
    console.error('‚ùå hideNotificationDot error:', error);
  }
};

window.showNotificationDot = function() {
  try {
    if (NotificationSystem.instance) {
      NotificationSystem.instance.updateNotificationBadge();
    }
  } catch (error) {
    console.error('‚ùå showNotificationDot error:', error);
  }
};

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
window.addTestNotification = function(type = 'info') {
  if (NotificationSystem.instance) {
    const messages = {
      success: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö',
      warning: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      info: '‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó'
    };

    const titles = {
      success: '‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      error: '‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
      warning: '‚ö†Ô∏è ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô',
      info: '‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    };

    NotificationSystem.instance.addNotification({
      id: Date.now(),
      title: titles[type] || titles.info,
      message: messages[type] || messages.info,
      type: type,
      timestamp: new Date().toISOString(),
      read: false
    });

    // ‡πÅ‡∏™‡∏î‡∏á toast ‡∏î‡πâ‡∏ß‡∏¢
    NotificationSystem.instance.showToast(messages[type] || messages.info, type);
  }
};

// ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô
window.testNotifications = function() {
  if (NotificationSystem.instance) {
    console.log('üß™ Testing notification system...');

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° notifications ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    setTimeout(() => addTestNotification('success'), 500);
    setTimeout(() => addTestNotification('error'), 1000);
    setTimeout(() => addTestNotification('warning'), 1500);
    setTimeout(() => addTestNotification('info'), 2000);

    console.log('‚úÖ Test notifications added! ‡∏Ñ‡∏•‡∏¥‡∏Å‡∏ó‡∏µ‡πà notification icon ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π');
  }
};

// Log ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
console.log('üîî Notification System loaded successfully');
console.log('üìñ Available functions: showToast(), hideNotificationDot(), showNotificationDot()');
console.log('üìñ Test functions: testNotifications(), addTestNotification(type)');
console.log('üìñ Available classes: NotificationSystem');
console.log('üìñ Global instance: NotificationSystem.instance');
console.log('üîç Document state:', document.readyState);
console.log('üîç Document body exists:', !!document.body);
console.log('üîç Current URL:', window.location.pathname);