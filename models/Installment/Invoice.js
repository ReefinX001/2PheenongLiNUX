// File: models/Installment/Invoice.js
const mongoose = require('mongoose');
const Schema   = mongoose.Schema;

// --- sub-schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (inline) ---
const InvoiceItemSchema = new Schema({
  product: {                              // ‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á BranchStock
    type: Schema.Types.ObjectId,
    ref: 'BranchStock',
    required: false                       // Allow null products for compatibility with existing quotations
  },
  imei: {                                // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏Å‡πá‡∏ö IMEI ‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    type: String,
    default: ''
  },
  description: {                         // ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (fallback)
    type: String,
    default: ''
  },
  quantity: {                            // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ä‡∏¥‡πâ‡∏ô
    type: Number,
    default: 1
  },
  unitPrice: {                           // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î)
    type: Number,
    default: 0,
    required: true                       // ‡πÄ‡∏û‡∏¥‡πà‡∏° required ‡∏ï‡∏≤‡∏° QuotationItem
  },
  discount: {                            // ‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏ï‡πà‡∏≠‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    type: Number,
    default: 0
  },
  docFee: {                              // ‡πÄ‡∏û‡∏¥‡πà‡∏° docFee ‡∏ï‡∏≤‡∏° QuotationItem
    type: Number,
    default: 0,
    required: true
  },
  downAmount: {                          // ‡∏¢‡∏≠‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå
    type: Number,
    default: 0
  },
  termCount: {                           // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î‡∏ú‡πà‡∏≠‡∏ô
    type: Number,
    default: 0
  },
  installmentAmount: {                   // ‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
    type: Number,
    default: 0
  },
  totalPrice: {                          // ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏∏‡∏ó‡∏ò‡∏¥‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß)
    type: Number,
    default: 0,
    required: true                       // ‡πÄ‡∏û‡∏¥‡πà‡∏° required ‡∏ï‡∏≤‡∏° QuotationItem
  }
}, {
  _id: false                             // ‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á _id ‡πÉ‡∏´‡πâ sub-doc
});

// --- Schema ‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á Invoice ---
const InvoiceSchema = new Schema({
  invoiceNumber:     { type: String, required: true, unique: true },
  quotationNumber:   { type: String, required: true }, // ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô)
  quotationRef:      { type: Schema.Types.ObjectId, ref: 'Quotation' },
  date:              { type: Date,   required: true, default: Date.now },
  branchCode:        { type: String, required: true },
  pickupMethod:      { type: String, enum: ['store','online'], default: 'store' },

  customer: {
    name:    { type: String, required: true },
    address: { type: String, default: '' },
    taxId:   { type: String, default: '' },
    phone:   { type: String, default: '' }
  },

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏ô (‡∏à‡∏≤‡∏Å Quotation)
  witness: {
    name:     { type: String, default: '' },
    id_card:  { type: String, default: '' },
    phone:    { type: String, default: '' },
    relation: { type: String, default: '' }
  },

  currency:          { type: String, default: 'THB' },

  items: [ InvoiceItemSchema ],           // ‡πÉ‡∏ä‡πâ inline sub-schema

  summary: {
    subtotal:  { type: Number, default: 0 },
    shipping:  { type: Number, default: 0 },  // ‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏à‡∏≤‡∏Å hook
    discount:  { type: Number, default: 0 },
    tax:       { type: Number, default: 0 },
    netTotal:  { type: Number, default: 0 }   // ‡πÄ‡∏Å‡πá‡∏ö Grand Total
  },

  planSummaryText:    { type: String, default: '' },
  shippingFee:        { type: Number, default: 0 },
  docFee:             { type: Number, default: 0 },

  salesperson:        { type: Schema.Types.ObjectId, ref: 'User', required: true },
  salespersonName:    { type: String, required: true },

  // üîß ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF generation
  customerSignature:       { type: String, default: '' },
  customerSignatureUrl:    { type: String, default: '' },
  salespersonSignature:    { type: String, default: '' },
  salespersonSignatureUrl: { type: String, default: '' },
  employeeSignature:       { type: String, default: '' },
  authorizedSignature:     { type: String, default: '' },
  authorizedSignatureUrl:  { type: String, default: '' },

  creditTerm:         { type: String,  default: '' },
  vatInclusive:       { type: Boolean, default: true },
  discountValue:      { type: Number,  default: 0 },

  status:             { type: String, enum: ['draft','sent','paid'], default: 'draft' },
  deliveryRef:        { type: String, default: '' },
  deliveryStatus:     { type: String, enum: ['pending','delivered','overdue'], default: 'pending' },

  financedTotal:      { type: Number, default: 0 },  // ‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏£‡∏ß‡∏°
  downTotal:          { type: Number, default: 0 },  // ‡∏¢‡∏≠‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡∏ß‡∏°
  grandTotal:         { type: Number, default: 0 }   // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô
}, { timestamps: true });

// --- Pre-save hook: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ï‡πà‡∏≤‡∏á ‡πÜ ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
InvoiceSchema.pre('save', async function(next) {
  // ‡∏Å‡∏£‡∏ì‡∏µ‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á quotation ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Quotation
  if (this.isNew && this.quotationRef) {
    try {
      const Quotation = mongoose.model('Quotation');
      const quotation = await Quotation.findById(this.quotationRef)
        .select('-createdAt -updatedAt -__v');

      if (quotation) {
        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏à‡∏≤‡∏Å Quotation
        this.quotationNumber = quotation.quotationNumber || quotation.number;
        this.date = quotation.date;
        this.branchCode = quotation.branchCode || '00000';
        this.pickupMethod = quotation.pickupMethod;

        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        this.customer = {
          name: quotation.customer.name,
          address: quotation.customer.address || '',
          taxId: quotation.customer.taxId || '',
          phone: quotation.customer.phone || ''
        };

        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏ô
        this.witness = {
          name: quotation.witness?.name || '',
          id_card: quotation.witness?.id_card || '',
          phone: quotation.witness?.phone || '',
          relation: quotation.witness?.relation || ''
        };

        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤
        this.currency = quotation.currency;
        this.creditTerm = quotation.creditTerm;
        this.vatInclusive = quotation.vatInclusive;
        this.discountValue = quotation.discountValue;

        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
        this.shippingFee = quotation.shippingFee || 0;
        this.docFee = quotation.docFee || 0;

        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        this.items = quotation.items.map(item => ({
          product: item.product._id || item.product,
          imei: item.imei || '',
          description: item.description || '',
          quantity: item.quantity || 1,
          unitPrice: item.unitPrice || 0,
          discount: item.discount || 0,
          docFee: item.docFee || 0,
          downAmount: item.downAmount || 0,
          termCount: item.termCount || 0,
          installmentAmount: item.installmentAmount || 0,
          totalPrice: item.totalPrice || 0
        }));

        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ (‡∏û‡∏£‡πâ‡∏≠‡∏° fallback)
        this.salesperson = quotation.salesperson || new mongoose.Types.ObjectId('507f1f77bcf86cd799439011');
        this.salespersonName = quotation.salespersonName || '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢';

        // ‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å‡∏¢‡∏≠‡∏î‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å Quotation
        this.financedTotal = quotation.financedTotal || 0;
        this.downTotal = quotation.downTotal || 0;
        this.grandTotal = quotation.grandTotal || 0;
      }
    } catch (err) {
      return next(err);
    }
  }

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç)
  // 1) ‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡∏ß‡∏°
  const financed = this.items.reduce((sum, it) =>
    sum + (it.installmentAmount * it.termCount), 0
  );
  const down = this.items.reduce((sum, it) =>
    sum + it.downAmount, 0
  );

  // 2) ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î (subtotal) ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏•‡∏î‡∏£‡∏ß‡∏°
  const subtotal        = this.items.reduce((sum, it) =>
    sum + (it.unitPrice * it.quantity), 0
  );
  const invoiceDiscount = this.discountValue || 0;

  // 3) ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° + ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  const docFee  = Number(this.docFee    || 0);
  const shipFee = Number(this.shippingFee || 0);

  // 4) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì VAT (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡πÅ‡∏•‡∏∞ Grand Total
  const beforeTax = subtotal - invoiceDiscount + docFee + shipFee;
  const vatVal    = this.vatInclusive
    ? Math.round(beforeTax * 0.07 * 100) / 100
    : 0;
  const netTotal  = beforeTax + vatVal;

  // 5) ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏á‡∏ü‡∏¥‡∏•‡∏î‡πå
  this.financedTotal      = financed;
  this.downTotal          = down;
  this.summary.subtotal   = subtotal;
  this.summary.discount   = invoiceDiscount;
  this.summary.shipping   = shipFee;
  this.summary.tax        = vatVal;
  this.summary.netTotal   = netTotal;
  this.grandTotal         = netTotal;

  next();
});

// --- Post-save hook: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏ó‡∏µ‡πà Quotation.invoiceRef ---
InvoiceSchema.post('save', async function(doc, next) {
  if (doc.quotationRef) {
    try {
      const Quotation = mongoose.model('Quotation');
      await Quotation.findByIdAndUpdate(
        doc.quotationRef,
        { invoiceRef: doc._id }
      );
    } catch (err) {
      // ‡πÅ‡∏Ñ‡πà log error ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏Ç‡∏±‡∏î‡∏Ç‡∏ß‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      console.error('Failed to link Invoice ‚Üí Quotation:', err);
    }
  }
  next();
});

// Export ‡πÇ‡∏°‡πÄ‡∏î‡∏•
module.exports = mongoose.models.Invoice
  ? mongoose.model('Invoice')
  : mongoose.model('Invoice', InvoiceSchema);
