// File: models/Installment/Quotation.js

const mongoose = require('mongoose');
const { Schema } = mongoose;
const QuotationItemSchema = require('./QuotationItem');

const QuotationSchema = new Schema({
  number: {
    type: String,
    required: false, // Made optional
    unique: true,
    default: function() {
      return `QT${Date.now()}`;
    }
  },
  quotationNumber: {
    type: String,
    required: false, // Made optional
    unique: true,
    default: function() {
      return this.number || `QT${Date.now()}`;
    }
  },
  date:            { type: Date,   required: true, default: Date.now },
  salesperson:     {
    type: Schema.Types.ObjectId,
    ref: 'Employee',
    required: false // Made optional
  },
  salespersonName: { type: String },
  branchCode:      {
    type: String,
    required: false, // Made optional
    default: '00000'
  },

  // ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
  docFee:          { type: Number, default: 0 },

  // ‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: 'store' ‡∏´‡∏£‡∏∑‡∏≠ 'online'
  pickupMethod:    {
    type: String,
    enum: ['store', 'online'],
    default: 'store'
  },

  // ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ pickupMethod==='online')
  shippingFee:     { type: Number, default: 0 },

  customer: {
    name:       {
      type: String,
      required: false, // Made optional
      default: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'
    },
    address:    { type: String },
    taxId:      { type: String },
    phone:      { type: String },
  },

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  witness: {
    name:     { type: String },
    id_card:  { type: String },
    phone:    { type: String },
    relation: { type: String }
  },

  // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF generation
  customerSignature: { type: String, default: '' },
  customerSignatureUrl: { type: String, default: '' },
  salespersonSignature: { type: String, default: '' },
  salespersonSignatureUrl: { type: String, default: '' },
  employeeSignature: { type: String, default: '' },
  authorizedSignature: { type: String, default: '' },
  authorizedSignatureUrl: { type: String, default: '' },

  currency:       { type: String, default: 'THB' },
  creditTerm:     { type: String, default: '30 ‡∏ß‡∏±‡∏ô' },
  vatInclusive:   { type: Boolean, default: true },
  discountValue:  { type: Number, default: 0 },

  items:          [QuotationItemSchema],

  summary: {
    subtotal:   { type: Number, required: false, default: 0 }, // Made optional
    shipping:   { type: Number, default: 0 },  // ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏î‡πâ‡∏ß‡∏¢
    discount:   { type: Number, default: 0 },
    beforeTax:  { type: Number, required: false, default: 0 }, // Made optional
    tax:        { type: Number, required: false, default: 0 }, // Made optional
    netTotal:   { type: Number, required: false, default: 0 } // Made optional
  },

  // ‚ñ∫ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÄ‡∏Å‡πá‡∏ö‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡∏¢‡∏≠‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô ‚óÑ
  financedTotal:  { type: Number, default: 0 },  // ‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å (installmentAmount * termCount ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)
  downTotal:      { type: Number, default: 0 },  // ‡∏¢‡∏≠‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡∏ß‡∏°
  grandTotal:     { type: Number, default: 0 },  // ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏¥‡πâ‡∏ô (financedTotal + downTotal + docFee + shippingFee)

  status:        { type: String, enum: ['draft','sent','confirmed'], default: 'draft' },

  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å String ‡πÄ‡∏õ‡πá‡∏ô ObjectId reference
  invoiceRef: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Invoice',    // ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÇ‡∏°‡πÄ‡∏î‡∏• Invoice ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ
  },
}, { timestamps: true });

// --- Pre-save hook: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å ---
QuotationSchema.pre('save', async function(next) {
  // 0) ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö QT-YYMMDD-XXX)
  if (this.isNew && (!this.quotationNumber || this.quotationNumber.startsWith('QT1'))) {
    const now = new Date();
    const year = String(now.getFullYear() - 543).slice(-2); // ‡∏û.‡∏®. 2 ‡∏´‡∏•‡∏±‡∏Å
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const datePrefix = `${year}${month}${day}`;

    // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
    const latestQuotation = await this.constructor.findOne({
      quotationNumber: new RegExp(`^QT-${datePrefix}-`)
    }).sort({ quotationNumber: -1 });

    let sequence = 1;
    if (latestQuotation && latestQuotation.quotationNumber) {
      const match = latestQuotation.quotationNumber.match(/-(\d{3})$/);
      if (match) {
        sequence = parseInt(match[1]) + 1;
      }
    }

    this.quotationNumber = `QT-${datePrefix}-${String(sequence).padStart(3, '0')}`;
    this.number = this.quotationNumber; // sync number field
  }

  // 1) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏£‡∏ß‡∏°
  const financed = this.items.reduce(
    (sum, it) => sum + (Number(it.installmentAmount || 0) * Number(it.termCount || 0)),
    0
  );
  const down     = this.items.reduce(
    (sum, it) => sum + Number(it.downAmount || 0),
    0
  );

  // 2) ‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏Å + ‡∏î‡∏≤‡∏ß‡∏ô‡πå + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° + ‡∏Ñ‡πà‡∏≤‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  const grand = financed + down + Number(this.docFee || 0) + Number(this.shippingFee || 0);

  // 3) ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏¥‡∏•‡∏î‡πå schema
  this.financedTotal = financed;
  this.downTotal     = down;
  this.grandTotal    = grand;

  // 4) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï summary fields
  this.summary.shipping   = Number(this.shippingFee || 0);
  this.summary.discount   = Number(this.discountValue || 0);  // ‚Üê set discount from payload
  this.summary.beforeTax  = financed + down;                  // ‚Üê recalc beforeTax
  this.summary.netTotal   = grand;

  next();
});

module.exports = mongoose.model('Quotation', QuotationSchema);
