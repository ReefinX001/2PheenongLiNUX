// models/LoginRequest.js
const mongoose = require('mongoose');

const loginRequestSchema = new mongoose.Schema({
  requestId: { type: String, required: true, unique: true },
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  username: { type: String, required: true },
  employeeName: String,
  photoUrl: String,  // Added for storing user photo
  reason: String,
  status: {
    type: String,
    enum: ['pending', 'approved', 'rejected', 'expired', 'used'],  // Added 'used' status
    default: 'pending'
  },
  device: String,
  ipAddress: String,
  userAgent: String,
  approverId: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  approverName: String,  // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥
  approverNote: String,
  approvedAt: Date,
  processedAt: Date,  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ (‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥/‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò)
  token: String,  // Added for storing the JWT token when approved
  createdAt: { type: Date, default: Date.now },
  expiresAt: Date,

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
  loginSuccessAt: Date,  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà login ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  sessionDuration: Number,  // ‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤ session (‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
  logoutAt: Date,  // ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà logout
  logoutReason: String,  // ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£ logout

  // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
  usageCount: { type: Number, default: 0 },  // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ token
  lastUsedAt: Date,  // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ token

  // Audit trail
  auditLog: [{
    action: String,  // 'created', 'approved', 'rejected', 'used', 'expired'
    performedBy: String,  // user ID ‡∏´‡∏£‡∏∑‡∏≠ 'system'
    performedAt: { type: Date, default: Date.now },
    details: String,  // ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    ipAddress: String
  }]
});

// Add index for faster queries
// Note: requestId index is automatically created by 'unique: true'
loginRequestSchema.index({ status: 1, expiresAt: 1 });
loginRequestSchema.index({ userId: 1, createdAt: -1 });
loginRequestSchema.index({ createdAt: -1 });  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
loginRequestSchema.index({ processedAt: -1 });  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡πâ‡∏ß
loginRequestSchema.index({ approverId: 1, processedAt: -1 });  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥

// Methods
loginRequestSchema.methods.updateStatus = async function(
  status,
  approverId,
  approverName,
  note,
  approverIP
) {
  try {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
    this.status = status;
    this.processedAt = new Date();

    if (status === 'approved' || status === 'rejected') {
      this.approverId = approverId;
      this.approverName = approverName;
      this.approverNote = note;
      this.approvedAt = new Date();
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° audit log ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å addAuditLog ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á recursive save)
    this.auditLog.push({
      action: status,
      performedBy: approverId || 'system',
      performedAt: new Date(),
      details: note || `Request ${status} by ${approverName || 'System'}`,
      ipAddress: approverIP || 'unknown'
    });

    await this.save();

    console.log(`‚úÖ Request ${this.requestId} status updated to: ${status}`);

  } catch (error) {
    console.error('‚ùå Error updating request status:', error);
    throw error;
  }
};

loginRequestSchema.methods.addAuditLog = async function(
  action,
  performedBy,
  details,
  ipAddress
) {
  try {
    this.auditLog.push({
      action,
      performedBy: performedBy || 'system',
      performedAt: new Date(),
      details: details || '',
      ipAddress: ipAddress || 'unknown'
    });

    await this.save();

    console.log(`üìù Audit log added for ${this.requestId}: ${action}`);

  } catch (error) {
    console.error('‚ùå Error adding audit log:', error);
    throw error;
  }
};

module.exports = mongoose.model('LoginRequest', loginRequestSchema);
