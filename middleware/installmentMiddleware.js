// middleware/installmentMiddleware.js
// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô Double Submission ‡πÅ‡∏•‡∏∞ Rate Limiting
// Created: 2025-07-08 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å log

const rateLimit = require('express-rate-limit');

// ‡πÄ‡∏Å‡πá‡∏ö request fingerprint ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
const recentRequests = new Map();
const CONTRACT_CACHE = new Map();

// Request deduplication middleware
const preventDuplicateSubmission = (req, res, next) => {
  try {
    const userId = req.user?.id || req.user?._id;
    const clientIP = req.ip || req.connection.remoteAddress;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á fingerprint ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
    const requestData = {
      userId,
      clientIP,
      customerPhone: req.body.customer?.phone_number,
      customerName: `${req.body.customer?.first_name} ${req.body.customer?.last_name}`.trim(),
      totalAmount: req.body.total_amount,
      items: req.body.items?.map(item => ({
        name: item.name,
        imei: item.imei,
        price: item.price
      }))
    };

    const fingerprint = JSON.stringify(requestData);
    const requestKey = `${userId}-${Date.now()}`;

    console.log('üîç Checking duplicate submission:', {
      userId,
      clientIP,
      fingerprint: fingerprint.substring(0, 100) + '...',
      recentRequestsCount: recentRequests.size
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö request ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
    const now = Date.now();
    const DUPLICATE_WINDOW = 30 * 1000; // 30 seconds

    // ‡∏•‡∏ö request ‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏
    for (const [key, data] of recentRequests.entries()) {
      if (now - data.timestamp > DUPLICATE_WINDOW) {
        recentRequests.delete(key);
      }
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö fingerprint ‡∏ã‡πâ‡∏≥
    for (const [key, data] of recentRequests.entries()) {
      if (data.fingerprint === fingerprint) {
        const timeDiff = now - data.timestamp;
        if (timeDiff < DUPLICATE_WINDOW) {
          console.warn('‚ö†Ô∏è Duplicate submission detected:', {
            timeDiff: `${timeDiff}ms ago`,
            originalRequest: key,
            newRequest: requestKey
          });

          return res.status(429).json({
            success: false,
            error: '‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ã‡πâ‡∏≥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà',
            code: 'DUPLICATE_SUBMISSION',
            retryAfter: Math.ceil((DUPLICATE_WINDOW - timeDiff) / 1000)
          });
        }
      }
    }

    // ‡πÄ‡∏Å‡πá‡∏ö request ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    recentRequests.set(requestKey, {
      fingerprint,
      timestamp: now,
      userId,
      clientIP
    });

    // Cleanup ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏ó‡∏µ‡πà request ‡∏à‡∏ö
    res.on('finish', () => {
      setTimeout(() => {
        recentRequests.delete(requestKey);
      }, DUPLICATE_WINDOW);
    });

    console.log('‚úÖ Request approved:', requestKey);
    next();

  } catch (error) {
    console.error('‚ùå Error in duplicate prevention:', error);
    next(); // ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ middleware ‡∏ô‡∏µ‡πâ block request ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ error
  }
};

// Contract number validation middleware
const validateContractNumber = async (req, res, next) => {
  try {
    const { items = [] } = req.body;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IMEI ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
    const imeis = items.filter(item => item.imei).map(item => item.imei);
    const duplicateImeis = imeis.filter((imei, index) => imeis.indexOf(imei) !== index);

    if (duplicateImeis.length > 0) {
      return res.status(400).json({
        success: false,
        error: `‡∏û‡∏ö IMEI ‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏Ç‡∏≠: ${duplicateImeis.join(', ')}`,
        code: 'DUPLICATE_IMEI_IN_REQUEST'
      });
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö IMEI ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ï‡πâ‡∏≠‡∏á import model)
    const mongoose = require('mongoose');
    const InstallmentOrder = mongoose.model('InstallmentOrder');

    for (const item of items) {
      if (item.imei) {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ IMEI ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà active ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const existingContract = await InstallmentOrder.findOne({
          'items.imei': item.imei,
          status: { $in: ['ongoing', 'active'] }
        }).lean();

        if (existingContract) {
          return res.status(400).json({
            success: false,
            error: `IMEI ${item.imei} ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤ ${existingContract.contractNo} ‡πÅ‡∏•‡πâ‡∏ß`,
            code: 'IMEI_ALREADY_IN_USE',
            conflictContract: existingContract.contractNo
          });
        }
      }
    }

    next();

  } catch (error) {
    console.error('‚ùå Error in contract validation:', error);
    next(); // ‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ error ‡∏ô‡∏µ‡πâ block request
  }
};

// Rate limiting ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö installment creation
const rateLimitInstallment = rateLimit({
  windowMs: 1 * 60 * 1000, // 1 minute
  max: 5, // ‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 requests ‡∏ï‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ
  message: {
    success: false,
    error: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏£‡πá‡∏ß‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà',
    code: 'RATE_LIMIT_EXCEEDED'
  },
  standardHeaders: true,
  legacyHeaders: false,
  keyGenerator: (req) => {
    // ‡πÉ‡∏ä‡πâ user ID ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏Å
    return req.user?.id || req.user?._id || req.ip;
  },
  skip: (req) => {
    // ‡∏Ç‡πâ‡∏≤‡∏° rate limit ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö admin
    return req.user?.role === 'admin';
  }
});

// Request validation middleware
const validateInstallmentData = (req, res, next) => {
  try {
    const {
      items = [],
      customer = {},
      plan_type,
      total_amount,
      down_payment
    } = req.body;

    console.log('üîç Validating installment data:', {
      itemsCount: items.length,
      planType: plan_type,
      totalAmount: total_amount,
      downPayment: down_payment,
      customerName: `${customer.first_name} ${customer.last_name}`.trim()
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    const validationErrors = [];

    if (!Array.isArray(items) || items.length === 0) {
      validationErrors.push('‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
    }

    if (!['plan1', 'plan2', 'plan3'].includes(plan_type)) {
      validationErrors.push('‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
    }

    if (!total_amount || total_amount <= 0) {
      validationErrors.push('‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 0');
    }

    if (!customer.first_name && !customer.companyName) {
      validationErrors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
    }

    if (!customer.phone_number) {
      validationErrors.push('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
    if (down_payment && down_payment > total_amount) {
      validationErrors.push('‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÑ‡∏î‡πâ');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö items
    for (let i = 0; i < items.length; i++) {
      const item = items[i];
      if (!item.name) {
        validationErrors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${i + 1}: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`);
      }
      if (!item.price || item.price <= 0) {
        validationErrors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${i + 1}: ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
      }
      if (!item.qty || item.qty <= 0) {
        validationErrors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà ${i + 1}: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`);
      }
    }

    if (validationErrors.length > 0) {
      return res.status(400).json({
        success: false,
        error: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
        details: validationErrors,
        code: 'VALIDATION_ERROR'
      });
    }

    console.log('‚úÖ Installment data validation passed');
    next();

  } catch (error) {
    console.error('‚ùå Error in data validation:', error);
    return res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      code: 'VALIDATION_ERROR'
    });
  }
};

// Monitoring middleware
const logInstallmentRequest = (req, res, next) => {
  const startTime = Date.now();
  const userId = req.user?.id || req.user?._id;
  const userName = req.user?.name || 'Unknown';
  const clientIP = req.ip;

  console.log('üìã Installment Request Start:', {
    userId,
    userName,
    clientIP,
    method: req.method,
    url: req.url,
    timestamp: new Date().toISOString(),
    userAgent: req.get('User-Agent')
  });

  // Track response
  res.on('finish', () => {
    const endTime = Date.now();
    const duration = endTime - startTime;

    console.log('üìä Installment Request Complete:', {
      userId,
      statusCode: res.statusCode,
      duration: `${duration}ms`,
      success: res.statusCode < 400,
      timestamp: new Date().toISOString()
    });
  });

  next();
};

module.exports = {
  preventDuplicateSubmission,
  validateContractNumber,
  rateLimitInstallment,
  validateInstallmentData,
  logInstallmentRequest
};