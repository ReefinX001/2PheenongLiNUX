// üöÄ Ultimate Backend Fix - ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Schema Mismatch ‡πÉ‡∏ô A4PDFController
// ‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ customer_id vs customer field

const fs = require('fs');
const path = require('path');

async function fixA4PDFController() {
  try {
    console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç A4PDFController.js - Schema Mismatch...');

    const filePath = path.join(__dirname, 'controllers', 'pdf', 'A4PDFController.js');

    if (!fs.existsSync(filePath)) {
      throw new Error(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå: ${filePath}`);
    }

    // ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå
    let content = fs.readFileSync(filePath, 'utf8');

    // ‚úÖ 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç populate customer_id ‡πÄ‡∏õ‡πá‡∏ô customer
    const oldPopulate = `orderData = await InstallmentOrder.findById(orderId).populate('customer_id');`;
    const newPopulate = `orderData = await InstallmentOrder.findById(orderId).populate('customer');`;

    if (content.includes(oldPopulate)) {
      content = content.replace(oldPopulate, newPopulate);
      console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç populate customer_id -> customer');
    }

    // ‚úÖ 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const oldCustomerCheck = `if (orderData && orderData.customer_id) {
            customerData = await InstallmentCustomer.findById(orderData.customer_id);
          }`;

    const newCustomerCheck = `if (orderData && orderData.customer) {
            customerData = orderData.customer; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á findById ‡πÄ‡∏û‡∏¥‡πà‡∏°
          }`;

    if (content.includes('orderData.customer_id')) {
      content = content.replace(/if \(orderData && orderData\.customer_id\) \{[\s\S]*?await InstallmentCustomer\.findById\(orderData\.customer_id\);[\s\S]*?\}/g,
        `if (orderData && orderData.customer) {
            customerData = orderData.customer; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á findById ‡πÄ‡∏û‡∏¥‡πà‡∏°
          }`);
      console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç customerData extraction');
    }

    // ‚úÖ 3. ‡πÄ‡∏û‡∏¥‡πà‡∏° error handling ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà populate ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    const installmentCasePattern = /case 'installment':([\s\S]*?)break;/;
    const installmentMatch = content.match(installmentCasePattern);

    if (installmentMatch) {
      const enhancedInstallmentCase = `case 'installment':
          try {
            orderData = await InstallmentOrder.findById(orderId).populate('customer');
            if (orderData && orderData.customer) {
              customerData = orderData.customer; // ‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å populate ‡πÅ‡∏•‡πâ‡∏ß
            } else if (orderData) {
              // Fallback: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customer_info
              console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• customer populated, ‡πÉ‡∏ä‡πâ customer_info ‡πÅ‡∏ó‡∏ô');
              customerData = null; // ‡∏à‡∏∞‡πÉ‡∏ä‡πâ customer_info ‡πÉ‡∏ô formatOrderForPDF
            }
          } catch (populateError) {
            console.error('‚ùå Populate customer error:', populateError.message);
            // Fallback: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà populate
            orderData = await InstallmentOrder.findById(orderId);
            customerData = null; // ‡∏à‡∏∞‡πÉ‡∏ä‡πâ customer_info ‡πÉ‡∏ô formatOrderForPDF
          }
          break;`;

      content = content.replace(installmentCasePattern, enhancedInstallmentCase);
      console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced error handling');
    }

    // ‚úÖ 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç formatOrderForPDF ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö fallback ‡∏à‡∏≤‡∏Å customer_info
    const customerInfoFallback = `
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      if (customerData) {
        if (orderType === 'installment') {
          // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö InstallmentOrder - ‡πÉ‡∏ä‡πâ populated customer data
          formattedOrder.customerType = customerData.customerType || 'individual';
          if (formattedOrder.customerType === 'individual') {
            formattedOrder.customer = {
              prefix: customerData.prefix || orderData.customer_info?.prefix || '‡∏ô‡∏≤‡∏¢',
              firstName: customerData.firstName || orderData.customer_info?.firstName || customerData.first_name || '',
              lastName: customerData.lastName || orderData.customer_info?.lastName || customerData.last_name || '',
              phone: customerData.phone || orderData.customer_info?.phone || customerData.phone_number || '',
              taxId: customerData.taxId || orderData.customer_info?.taxId || customerData.tax_id || '',
              address: customerData.address || orderData.customer_info?.address || {}
            };
          }
        }`;

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏ß‡∏ô customer data ‡πÉ‡∏ô formatOrderForPDF
    const customerDataPattern = /\/\/ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤\s*if \(customerData\) \{[\s\S]*?if \(orderType === 'installment'\) \{[\s\S]*?\}/;

    if (content.match(customerDataPattern)) {
      // ‡πÄ‡∏û‡∏¥‡πà‡∏° fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö customer_info
      content = content.replace(
        /prefix: orderData\.customer_info\?\.prefix \|\| '‡∏ô‡∏≤‡∏¢',/g,
        `prefix: customerData.prefix || orderData.customer_info?.prefix || '‡∏ô‡∏≤‡∏¢',`
      );
      content = content.replace(
        /firstName: orderData\.customer_info\?\.firstName \|\| customerData\.first_name,/g,
        `firstName: customerData.firstName || orderData.customer_info?.firstName || customerData.first_name || '',`
      );
      content = content.replace(
        /lastName: orderData\.customer_info\?\.lastName \|\| customerData\.last_name,/g,
        `lastName: customerData.lastName || orderData.customer_info?.lastName || customerData.last_name || '',`
      );
      console.log('‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° customer_info fallback');
    }

    // ‚úÖ 5. ‡πÄ‡∏û‡∏¥‡πà‡∏° fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ customerData
    const noCustomerDataFallback = `} else {
        // ‚úÖ Fallback: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customer_info ‡∏Ç‡∏≠‡∏á InstallmentOrder
        if (orderType === 'installment' && orderData.customer_info) {
          formattedOrder.customerType = 'individual';
          formattedOrder.customer = {
            prefix: orderData.customer_info.prefix || '‡∏ô‡∏≤‡∏¢',
            firstName: orderData.customer_info.firstName || '',
            lastName: orderData.customer_info.lastName || '',
            phone: orderData.customer_info.phone || '',
            taxId: orderData.customer_info.taxId || '',
            address: orderData.customer_info.address || {}
          };
          console.log('‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customer_info fallback');
        } else {
          // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          formattedOrder.customerType = 'individual';
          formattedOrder.customer = {
            prefix: '‡∏ô‡∏≤‡∏¢',
            firstName: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
            lastName: '‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
            phone: '-',
            taxId: '-',
            address: {}
          };
        }
      }`;

    // ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà } else { ‡πÄ‡∏Å‡πà‡∏≤
    content = content.replace(/} else \{\s*\/\/ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô[\s\S]*?\}/g, noCustomerDataFallback);

    // ‚úÖ 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
    fs.writeFileSync(filePath, content, 'utf8');
    console.log('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', filePath);

    return {
      success: true,
      message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç A4PDFController.js ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      fixes: [
        '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç populate customer_id -> customer',
        '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç customerData extraction',
        '‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced error handling',
        '‡πÄ‡∏û‡∏¥‡πà‡∏° customer_info fallback',
        '‡πÄ‡∏û‡∏¥‡πà‡∏° fallback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡πÑ‡∏°‡πà‡∏°‡∏µ customerData'
      ]
    };

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    return {
      success: false,
      message: error.message
    };
  }
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á backup
function createBackup() {
  try {
    const filePath = path.join(__dirname, 'controllers', 'pdf', 'A4PDFController.js');
    const backupPath = filePath + `.backup.${Date.now()}`;

    if (fs.existsSync(filePath)) {
      fs.copyFileSync(filePath, backupPath);
      console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á backup:', backupPath);
      return backupPath;
    }
  } catch (error) {
    console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á backup:', error.message);
  }
  return null;
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
async function testFix() {
  try {
    console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...');

    // Import models ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const InstallmentOrder = require('./models/Installment/InstallmentOrder');

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö populate
    const testContract = await InstallmentOrder.findOne({ contractNo: 'INST2568070106' })
      .populate('customer'); // ‡πÉ‡∏ä‡πâ customer ‡πÅ‡∏ó‡∏ô customer_id

    if (testContract) {
      console.log('‚úÖ Populate customer ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      console.log('üìã Customer data:', {
        hasCustomer: !!testContract.customer,
        hasCustomerInfo: !!testContract.customer_info,
        customerType: testContract.customer?.customerType,
        customerInfoName: testContract.customer_info ?
          `${testContract.customer_info.firstName} ${testContract.customer_info.lastName}` : 'N/A'
      });
    } else {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö contract INST2568070106');
    }

    return true;
  } catch (error) {
    console.error('‚ùå ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', error.message);
    return false;
  }
}

// ‚úÖ Main execution
async function main() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Backend Schema Mismatch...');

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á backup
  const backupPath = createBackup();

  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå
  const result = await fixA4PDFController();

  if (result.success) {
    console.log('\n‚úÖ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
    console.log('üìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
    result.fixes.forEach(fix => console.log(`  - ${fix}`));

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç...');
    const testResult = await testFix();

    if (testResult) {
      console.log('üéâ ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!');
    } else {
      console.log('‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô ‡πÅ‡∏ï‡πà‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤');
    }
  } else {
    console.error('‚ùå ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', result.message);

    // Restore backup ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (backupPath && fs.existsSync(backupPath)) {
      const originalPath = backupPath.replace(/\.backup\.\d+$/, '');
      fs.copyFileSync(backupPath, originalPath);
      console.log('üîÑ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏≤‡∏Å backup ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  }
}

// ‡∏£‡∏±‡∏ô‡∏´‡∏£‡∏∑‡∏≠ export
if (require.main === module) {
  main().catch(console.error);
} else {
  module.exports = { fixA4PDFController, createBackup, testFix };
}