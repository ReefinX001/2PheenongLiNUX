/**
 * @file DocumentSequenceManager.js
 * @description ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö thread-safe ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
 * @version 1.0.0
 * @date 2025-07-28
 */

const mongoose = require('mongoose');

// Schema ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
const DocumentSequenceSchema = new mongoose.Schema({
  // ‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ‡πÄ‡∏ä‡πà‡∏ô QT, INV, TX, RE, INST
  documentType: {
    type: String,
    required: true,
    uppercase: true,
    enum: ['QT', 'INV', 'TX', 'RE', 'INST']
  },

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö prefix ‡πÄ‡∏ä‡πà‡∏ô 680728 (YYMMDD), 6807 (YYMM)
  datePrefix: {
    type: String,
    required: true
  },

  // ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
  sequence: {
    type: Number,
    default: 0,
    min: 0
  },

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á
  createdAt: {
    type: Date,
    default: Date.now
  },

  // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  updatedAt: {
    type: Date,
    default: Date.now
  }
}, {
  // Index compound ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥
  indexes: [
    { documentType: 1, datePrefix: 1 }, // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    { documentType: 1, datePrefix: 1, sequence: 1 } // unique constraint
  ]
});

// ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏Ç‡∏≠‡∏á documentType + datePrefix
DocumentSequenceSchema.index(
  { documentType: 1, datePrefix: 1 },
  { unique: true }
);

// Middleware ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï updatedAt
DocumentSequenceSchema.pre('save', function(next) {
  this.updatedAt = new Date();
  next();
});

const DocumentSequence = mongoose.model('DocumentSequence', DocumentSequenceSchema);

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö thread-safe
 */
class DocumentSequenceManager {

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏•‡∏Ç‡∏ã‡πâ‡∏≥‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
   * @param {string} documentType - ‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (QT, INV, TX, RE)
   * @param {string} format - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà ('YYMMDD' ‡∏´‡∏£‡∏∑‡∏≠ 'YYMM')
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà
   */
  static async generateDocumentNumber(documentType, format = 'YYMMDD') {
    const now = new Date();
    let datePrefix;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á prefix ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö - üîß FIX: ‡πÉ‡∏ä‡πâ‡∏õ‡∏µ‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä
    if (format === 'YYMMDD') {
      const year = String(now.getFullYear() + 543).slice(-2); // ‡∏û.‡∏®. 2 ‡∏´‡∏•‡∏±‡∏Å (68)
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      datePrefix = `${year}${month}${day}`;
    } else if (format === 'YYMM') {
      const year = String(now.getFullYear() + 543).slice(-2); // ‡∏û.‡∏®. 2 ‡∏´‡∏•‡∏±‡∏Å (68)
      const month = String(now.getMonth() + 1).padStart(2, '0');
      datePrefix = `${year}${month}`;
    } else {
      throw new Error(`Unsupported date format: ${format}`);
    }

    // ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥ (‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 100 ‡∏£‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î)
    let documentNumber;
    let attempts = 0;
    const maxAttempts = 100;

    while (attempts < maxAttempts) {
      // ‡πÉ‡∏ä‡πâ MongoDB findOneAndUpdate ‡πÄ‡∏û‡∏∑‡πà‡∏≠ atomic increment
      const result = await DocumentSequence.findOneAndUpdate(
        {
          documentType: documentType.toUpperCase(),
          datePrefix: datePrefix
        },
        {
          $inc: { sequence: 1 },
          $set: { updatedAt: new Date() }
        },
        {
          new: true, // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ document ‡∏´‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
          upsert: true, // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
          lean: true // ‡∏Ñ‡∏∑‡∏ô plain object
        }
      );

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏ï‡πá‡∏° - üîß FIX: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏´‡∏•‡∏±‡∏Å
      const sequenceStr = String(result.sequence).padStart(3, '0');
      documentNumber = `${documentType.toUpperCase()}-${datePrefix}-${sequenceStr}`;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡∏ô‡∏µ‡πâ‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const isDuplicate = await this.isDuplicateNumber(documentNumber);

      if (!isDuplicate) {
        // Only log in debug mode
        if (process.env.DEBUG_DOCUMENTS === 'true') {
          console.log(`‚úÖ Generated unique document number: ${documentNumber} (sequence: ${result.sequence})`);
        }
        return documentNumber;
      }

      // Silently try next number - this is normal operation
      attempts++;
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ß‡∏ô‡∏Ñ‡∏£‡∏ö 100 ‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥
    throw new Error(`Unable to generate unique document number after ${maxAttempts} attempts`);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview)
   * @param {string} documentType - ‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @param {string} format - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  static async getNextDocumentNumber(documentType, format = 'YYMMDD') {
    const now = new Date();
    let datePrefix;

    if (format === 'YYMMDD') {
      const year = String(now.getFullYear() + 543).slice(-2);
      const month = String(now.getMonth() + 1).padStart(2, '0');
      const day = String(now.getDate()).padStart(2, '0');
      datePrefix = `${year}${month}${day}`;
    } else if (format === 'YYMM') {
      const year = String(now.getFullYear() + 543).slice(-2);
      const month = String(now.getMonth() + 1).padStart(2, '0');
      datePrefix = `${year}${month}`;
    }

    // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const current = await DocumentSequence.findOne({
      documentType: documentType.toUpperCase(),
      datePrefix: datePrefix
    });

    const nextSequence = (current?.sequence || 0) + 1;
    const sequenceStr = String(nextSequence).padStart(3, '0'); // üîß FIX: ‡πÉ‡∏ä‡πâ 3 ‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô generateDocumentNumber
    return `${documentType.toUpperCase()}-${datePrefix}-${sequenceStr}`;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @param {string} documentNumber - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns {Promise<boolean>} true ‡∏ñ‡πâ‡∏≤‡∏ã‡πâ‡∏≥
   */
  static async isDuplicateNumber(documentNumber) {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ó‡∏∏‡∏Å collection ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    const Quotation = require('../models/Installment/Quotation');
    const Invoice = require('../models/Installment/Invoice');
    const InvoiceReceipt = require('../models/Installment/InvoiceReceipt');
    const Receipt = require('../models/Receipt');
    const TaxInvoice = require('../models/TaxInvoice');

    try {
      const checks = [];

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Quotation
      if (documentNumber.startsWith('QT-')) {
        checks.push(Quotation.exists({
          $or: [
            { quotationNumber: documentNumber },
            { number: documentNumber }
          ]
        }));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Invoice
      if (documentNumber.startsWith('INV-')) {
        checks.push(Invoice.exists({
          $or: [
            { invoiceNumber: documentNumber },
            { number: documentNumber }
          ]
        }));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Receipt
      if (documentNumber.startsWith('RE-')) {
        checks.push(InvoiceReceipt.exists({ receiptNumber: documentNumber }));
        checks.push(Receipt.exists({
          $or: [
            { receiptNumber: documentNumber },
            { documentNumber: documentNumber }
          ]
        }));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tax Invoice
      if (documentNumber.startsWith('TX-')) {
        checks.push(TaxInvoice.exists({
          $or: [
            { taxInvoiceNumber: documentNumber },
            { invoiceNumber: documentNumber },
            { documentNumber: documentNumber }
          ]
        }));
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Installment Contract
      if (documentNumber.startsWith('INST-')) {
        const Installment = require('../models/Installment');
        checks.push(Installment.exists({ contractNumber: documentNumber }));
      }

      if (checks.length === 0) {
        return false;
      }

      const results = await Promise.all(checks);
      const isDuplicate = results.some(exists => exists);

      // Only log duplicates in debug mode - this is normal when auto-incrementing
      if (isDuplicate && process.env.DEBUG_DOCUMENTS === 'true') {
        console.log(`‚ö†Ô∏è Document ${documentNumber} already exists in database`);
      }

      return isDuplicate;
    } catch (error) {
      console.error('Error checking duplicate document number:', error);
      // ‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ error ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
      return false;
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÉ‡∏ä‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô)
   * @param {string} documentType - ‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @param {string} datePrefix - prefix ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
   * @param {number} newSequence - ‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà
   */
  static async resetSequence(documentType, datePrefix, newSequence = 0) {
    await DocumentSequence.findOneAndUpdate(
      {
        documentType: documentType.toUpperCase(),
        datePrefix: datePrefix
      },
      {
        sequence: newSequence,
        updatedAt: new Date()
      },
      { upsert: true }
    );

    console.log(`üîÑ Reset sequence for ${documentType}-${datePrefix} to ${newSequence}`);
  }

  /**
   * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @param {string} documentType - ‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö)
   * @returns {Promise<Array>} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
   */
  static async getUsageStats(documentType = null) {
    const filter = documentType ? { documentType: documentType.toUpperCase() } : {};

    return await DocumentSequence.find(filter)
      .sort({ documentType: 1, datePrefix: -1 })
      .lean();
  }
}

module.exports = {
  DocumentSequence,
  DocumentSequenceManager
};
