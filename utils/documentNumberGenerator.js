// utils/documentNumberGenerator.js
// ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ Receipt ‡πÅ‡∏•‡∏∞ Tax Invoice ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
const { getNextSequence } = require('./counterUtil');

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô RE-YYMMDD-001
 * @param {string} branchCode - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô '680731')
 * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡πÄ‡∏ä‡πà‡∏ô RE-680731-001
 */
async function generateReceiptNumber(branchCode = '680731') {
  try {
    console.log('üìÑ Generating Receipt Number (RE-)...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á counter key ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const today = new Date();
    const year = (today.getFullYear() + 543).toString().slice(-2); // ‡∏õ‡∏µ ‡∏û.‡∏®. 2 ‡∏´‡∏•‡∏±‡∏Å
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    const dateKey = `${year}${month}${day}`;

    // Counter key: receipt_BRANCH_YYMMDD
    const counterKey = `receipt_${branchCode}_${dateKey}`;

    // ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 001)
    const sequenceNumber = await getNextSequence(counterKey, branchCode);

    // Format ‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏´‡∏•‡∏±‡∏Å: 001, 002, 003...
    const formattedSequence = String(sequenceNumber).padStart(3, '0');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: RE-BRANCH-SEQ
    const receiptNumber = `RE-${branchCode}-${formattedSequence}`;

    console.log('‚úÖ Receipt Number Generated:', {
      receiptNumber,
      branchCode,
      dateKey,
      sequenceNumber,
      formattedSequence,
      counterKey
    });

    return receiptNumber;

  } catch (error) {
    console.error('‚ùå Error generating receipt number:', error);
    // Fallback ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∞‡∏ö‡∏ö counter ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    const timestamp = Date.now().toString().slice(-3);
    const fallbackNumber = `RE-${branchCode}-${timestamp}`;
    console.warn('‚ö†Ô∏è Using fallback receipt number:', fallbackNumber);
    return fallbackNumber;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ TX-YYMMDD-001
 * @param {string} branchCode - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô '680731')
 * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ ‡πÄ‡∏ä‡πà‡∏ô TX-680731-001
 */
async function generateTaxInvoiceNumber(branchCode = '680731') {
  try {
    console.log('üìÑ Generating Tax Invoice Number (TX-)...');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á counter key ‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    const today = new Date();
    const year = (today.getFullYear() + 543).toString().slice(-2); // ‡∏õ‡∏µ ‡∏û.‡∏®. 2 ‡∏´‡∏•‡∏±‡∏Å
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    const dateKey = `${year}${month}${day}`;

    // Counter key: taxinvoice_BRANCH_YYMMDD
    const counterKey = `taxinvoice_${branchCode}_${dateKey}`;

    // ‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 001)
    const sequenceNumber = await getNextSequence(counterKey, branchCode);

    // Format ‡πÄ‡∏õ‡πá‡∏ô 3 ‡∏´‡∏•‡∏±‡∏Å: 001, 002, 003...
    const formattedSequence = String(sequenceNumber).padStart(3, '0');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£: TX-BRANCH-SEQ
    const taxInvoiceNumber = `TX-${branchCode}-${formattedSequence}`;

    console.log('‚úÖ Tax Invoice Number Generated:', {
      taxInvoiceNumber,
      branchCode,
      dateKey,
      sequenceNumber,
      formattedSequence,
      counterKey
    });

    return taxInvoiceNumber;

  } catch (error) {
    console.error('‚ùå Error generating tax invoice number:', error);
    // Fallback ‡∏Å‡∏£‡∏ì‡∏µ‡∏£‡∏∞‡∏ö‡∏ö counter ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    const timestamp = Date.now().toString().slice(-3);
    const fallbackNumber = `TX-${branchCode}-${timestamp}`;
    console.warn('‚ö†Ô∏è Using fallback tax invoice number:', fallbackNumber);
    return fallbackNumber;
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó VAT
 * @param {boolean} hasVatItems - ‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
 * @param {string} branchCode - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤
 * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
 */
async function generateDocumentNumber(hasVatItems, branchCode = '680731') {
  console.log('üîß Auto-generating document number based on VAT status:', {
    hasVatItems,
    documentType: hasVatItems ? 'Tax Invoice (TX-)' : 'Receipt (RE-)',
    branchCode
  });

  if (hasVatItems) {
    return await generateTaxInvoiceNumber(branchCode);
  } else {
    return await generateReceiptNumber(branchCode);
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
 * @param {string} prefix - ‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (RE- ‡∏´‡∏£‡∏∑‡∏≠ TX-)
 * @param {string} branchCode - ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤
 * @returns {Promise<number>} ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
 */
async function getDocumentCountToday(prefix, branchCode = '680731') {
  try {
    const today = new Date();
    const year = (today.getFullYear() + 543).toString().slice(-2);
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const day = String(today.getDate()).padStart(2, '0');
    const dateKey = `${year}${month}${day}`;

    // ‡πÅ‡∏õ‡∏•‡∏á prefix ‡πÄ‡∏õ‡πá‡∏ô counter key
    const prefixMap = {
      'RE-': 'receipt',
      'TX-': 'taxinvoice'
    };

    const counterType = prefixMap[prefix] || prefix.toLowerCase().replace('-', '');
    const counterKey = `${counterType}_${branchCode}_${dateKey}`;

    console.log('üîç Getting document count:', {
      prefix,
      counterType,
      counterKey,
      branchCode,
      dateKey
    });

    const Counter = require('../models/POS/Counter');
    const counter = await Counter.findOne({
      key: counterKey,
      reference_value: branchCode
    });

    const count = counter ? counter.seq : 0;
    console.log('üìä Document count result:', count);

    return count;

  } catch (error) {
    console.error('‚ùå Error getting document count:', error);
    return 0;
  }
}

module.exports = {
  generateReceiptNumber,
  generateTaxInvoiceNumber,
  generateDocumentNumber,
  getDocumentCountToday
};
