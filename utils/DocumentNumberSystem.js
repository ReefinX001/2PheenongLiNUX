/**
 * @file DocumentNumberSystem.js
 * @description ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Quotation ‡πÅ‡∏•‡∏∞ Invoice
 * @version 1.0.0
 * @date 2025-07-28
 */

const { DocumentSequenceManager } = require('./DocumentSequenceManager');

/**
 * ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Quotation ‡πÅ‡∏•‡∏∞ Invoice ‡πÅ‡∏ö‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
 */
class DocumentNumberSystem {

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡∏°‡πà
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö QT-YYMMDD-XXXX
   */
  static async generateQuotationNumber() {
    try {
      return await DocumentSequenceManager.generateDocumentNumber('QT', 'YYMMDD');
    } catch (error) {
      console.error('‚ùå CRITICAL: Failed to generate quotation number:', error);
      // ÔøΩ NO FALLBACK! Throw error to prevent duplicate keys
      throw new Error(`Document number generation failed: ${error.message}`);
    }
  }

  /**
   * ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö preview)
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
   */
  static async getNextQuotationNumber() {
    try {
      return await DocumentSequenceManager.getNextDocumentNumber('QT', 'YYMMDD');
    } catch (error) {
      console.error('‚ùå CRITICAL: Failed to get next quotation number:', error);
      // üö® NO FALLBACK! Throw error to prevent inconsistency
      throw new Error(`Next number generation failed: ${error.message}`);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö INV-680730-005 (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Quotation)
   */
  static async generateInvoiceNumber() {
    try {
      // üîß FIX: ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Quotation (INV-YYMMDD-XXX)
      return await DocumentSequenceManager.generateDocumentNumber('INV', 'YYMMDD');
    } catch (error) {
      console.error('‚ùå CRITICAL: Failed to generate invoice number:', error);
      // ÔøΩ NO FALLBACK! Throw error to prevent duplicate keys
      throw new Error(`Invoice number generation failed: ${error.message}`);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö TX-YYMMDD-XXXX
   */
  static async generateTaxInvoiceNumber() {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sequence ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Quotation ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô prefix
      const quotationNumber = await DocumentSequenceManager.generateDocumentNumber('QT', 'YYMMDD');

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å QT-680828-004 ‡πÄ‡∏õ‡πá‡∏ô TX-680828-004
      return quotationNumber.replace('QT-', 'TX-');
    } catch (error) {
      console.error('‚ùå CRITICAL: Failed to generate tax invoice number:', error);
      // üö® NO FALLBACK! Throw error to prevent duplicate keys
      throw new Error(`Tax invoice number generation failed: ${error.message}`);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö RE-YYMMDD-XXXX
   */
  static async generateReceiptNumber() {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sequence ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Quotation ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô prefix
      const quotationNumber = await DocumentSequenceManager.generateDocumentNumber('QT', 'YYMMDD');

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å QT-680828-004 ‡πÄ‡∏õ‡πá‡∏ô RE-680828-004
      return quotationNumber.replace('QT-', 'RE-');
    } catch (error) {
      console.error('‚ùå CRITICAL: Failed to generate receipt number:', error);
      // üö® NO FALLBACK! Throw error to prevent duplicate keys
      throw new Error(`Receipt number generation failed: ${error.message}`);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö INST-YYMMDD-XXXX
   */
  static async generateInstallmentContractNumber() {
    try {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ sequence ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö Quotation ‡πÅ‡∏ï‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô prefix
      const quotationNumber = await DocumentSequenceManager.generateDocumentNumber('QT', 'YYMMDD');

      // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å QT-680828-004 ‡πÄ‡∏õ‡πá‡∏ô INST-680828-004
      const contractNumber = quotationNumber.replace('QT-', 'INST-');

      console.log('‚úÖ Generated installment contract number sharing sequence with quotation:', {
        quotation: quotationNumber,
        contract: contractNumber
      });

      return contractNumber;
    } catch (error) {
      console.error('‚ùå CRITICAL: Failed to generate installment contract number:', error);
      // üö® NO FALLBACK! Throw error to prevent duplicate keys
      throw new Error(`Installment contract number generation failed: ${error.message}`);
    }
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ/‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (‡πÄ‡∏Å‡πà‡∏≤ - deprecated)
   * @param {string} type - ‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ('TX' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ, 'RE' ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)
   * @returns {Promise<string>} ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @deprecated ‡πÉ‡∏ä‡πâ generateTaxInvoiceNumber() ‡∏´‡∏£‡∏∑‡∏≠ generateReceiptNumber() ‡πÅ‡∏ó‡∏ô
   */
  static async generateReceiptNumber_Old(type = 'RE') {
    try {
      return await DocumentSequenceManager.generateDocumentNumber(type, 'YYMMDD');
    } catch (error) {
      console.error(`‚ùå CRITICAL: Failed to generate ${type} number:`, error);
      // üö® NO FALLBACK! Throw error to prevent duplicate keys
      throw new Error(`${type} number generation failed: ${error.message}`);
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @param {string} documentNumber - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   * @returns {object} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
   */
  static validateDocumentNumber(documentNumber) {
    if (!documentNumber || typeof documentNumber !== 'string') {
      return { valid: false, error: 'Document number is required and must be a string' };
    }

    // Pattern ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    const patterns = {
      QT: /^QT-\d{6}-\d{4}$/,     // QT-YYMMDD-XXXX
      INV: /^INV-\d{4}-\d{4}$/,   // INV-YYMM-XXXX
      TX: /^TX-\d{6}-\d{4}$/,     // TX-YYMMDD-XXXX
      RE: /^RE-\d{6}-\d{4}$/      // RE-YYMMDD-XXXX
    };

    const prefix = documentNumber.split('-')[0];
    const pattern = patterns[prefix];

    if (!pattern) {
      return { valid: false, error: `Unknown document type: ${prefix}` };
    }

    const matches = pattern.test(documentNumber);
    if (!matches) {
      return { valid: false, error: `Invalid format for ${prefix} document number` };
    }

    return { valid: true, type: prefix, pattern: pattern.toString() };
  }

  /**
   * ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á
   * @param {string} documentNumber - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @returns {object} ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   */
  static parseDocumentNumber(documentNumber) {
    const validation = this.validateDocumentNumber(documentNumber);
    if (!validation.valid) {
      return { error: validation.error };
    }

    const parts = documentNumber.split('-');
    const [type, datePrefix, sequence] = parts;

    let year, month, day;
    if (type === 'INV') {
      // INV-YYMM-XXXX
      year = parseInt(datePrefix.substring(0, 2)) + 2500; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
      month = parseInt(datePrefix.substring(2, 4));
      day = null;
    } else {
      // QT/TX/RE-YYMMDD-XXXX
      year = parseInt(datePrefix.substring(0, 2)) + 2500; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏û.‡∏®.
      month = parseInt(datePrefix.substring(2, 4));
      day = parseInt(datePrefix.substring(4, 6));
    }

    return {
      type: type,
      year: year,
      month: month,
      day: day,
      sequence: parseInt(sequence),
      datePrefix: datePrefix,
      fullNumber: documentNumber
    };
  }

  /**
   * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
   * @param {string} quotationNumber - ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
   * @param {string} invoiceNumber - ‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
   * @returns {Promise<boolean>} ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
   */
  static async linkQuotationToInvoice(quotationNumber, invoiceNumber) {
    try {
      const Quotation = require('../models/Installment/Quotation');
      const Invoice = require('../models/Installment/Invoice');

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏´‡πâ‡∏°‡∏µ reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
      await Quotation.findOneAndUpdate(
        {
          $or: [
            { quotationNumber: quotationNumber },
            { number: quotationNumber }
          ]
        },
        {
          linkedInvoiceNumber: invoiceNumber,
          status: 'CONVERTED_TO_INVOICE',
          updatedAt: new Date()
        }
      );

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏°‡∏µ reference ‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      await Invoice.findOneAndUpdate(
        { invoiceNumber: invoiceNumber },
        {
          quotationNumber: quotationNumber,
          linkedQuotationNumber: quotationNumber,
          sourceDocument: 'QUOTATION',
          updatedAt: new Date()
        }
      );

      console.log('‚úÖ Successfully linked documents:', {
        quotation: quotationNumber,
        invoice: invoiceNumber
      });

      return true;
    } catch (error) {
      console.error('‚ùå Error linking quotation to invoice:', error);
      return false;
    }
  }

  /**
   * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ô
   * @param {string} documentNumber - ‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @returns {Promise<object>} ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á
   */
  static async findLinkedDocuments(documentNumber) {
    try {
      const documentInfo = this.parseDocumentNumber(documentNumber);
      if (documentInfo.error) {
        return { error: documentInfo.error };
      }

      const Quotation = require('../models/backup/Installment/Quotation');
      const Invoice = require('../models/backup/Installment/Invoice');

      let linkedDocuments = {};

      if (documentInfo.type === 'QT') {
        // ‡∏´‡∏≤‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ô‡∏µ‡πâ
        const quotation = await Quotation.findOne({
          $or: [
            { quotationNumber: documentNumber },
            { number: documentNumber }
          ]
        });

        if (quotation?.linkedInvoiceNumber) {
          const invoice = await Invoice.findOne({
            invoiceNumber: quotation.linkedInvoiceNumber
          });
          linkedDocuments.invoice = invoice;
        }

        linkedDocuments.quotation = quotation;

      } else if (documentInfo.type === 'INV') {
        // ‡∏´‡∏≤‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡πÇ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ô‡∏µ‡πâ
        const invoice = await Invoice.findOne({
          invoiceNumber: documentNumber
        });

        if (invoice?.quotationNumber) {
          const quotation = await Quotation.findOne({
            $or: [
              { quotationNumber: invoice.quotationNumber },
              { number: invoice.quotationNumber }
            ]
          });
          linkedDocuments.quotation = quotation;
        }

        linkedDocuments.invoice = invoice;
      }

      return linkedDocuments;

    } catch (error) {
      console.error('‚ùå Error finding linked documents:', error);
      return { error: error.message };
    }
  }

  /**
   * ‡∏£‡∏µ‡∏û‡∏≠‡∏£‡πå‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   * @returns {Promise<object>} ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
   */
  static async getUsageReport() {
    try {
      const stats = await DocumentSequenceManager.getUsageStats();

      // ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      const report = {
        summary: {
          totalDocumentTypes: 0,
          totalSequences: 0,
          generatedToday: 0
        },
        byType: {},
        recent: []
      };

      const today = new Date().toISOString().slice(0, 10);

      stats.forEach(stat => {
        if (!report.byType[stat.documentType]) {
          report.byType[stat.documentType] = {
            sequences: 0,
            totalGenerated: 0,
            latestSequence: 0
          };
          report.summary.totalDocumentTypes++;
        }

        report.byType[stat.documentType].sequences++;
        report.byType[stat.documentType].totalGenerated += stat.sequence;
        report.byType[stat.documentType].latestSequence = Math.max(
          report.byType[stat.documentType].latestSequence,
          stat.sequence
        );

        report.summary.totalSequences += stat.sequence;

        // ‡∏ô‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
        if (stat.updatedAt && stat.updatedAt.toISOString().slice(0, 10) === today) {
          report.summary.generatedToday++;
        }

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        report.recent.push({
          type: stat.documentType,
          prefix: stat.datePrefix,
          sequence: stat.sequence,
          updatedAt: stat.updatedAt
        });
      });

      // ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
      report.recent.sort((a, b) => new Date(b.updatedAt) - new Date(a.updatedAt));
      report.recent = report.recent.slice(0, 20); // ‡πÄ‡∏≠‡∏≤ 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î

      return report;

    } catch (error) {
      console.error('‚ùå Error generating usage report:', error);
      return { error: error.message };
    }
  }
}

module.exports = DocumentNumberSystem;
