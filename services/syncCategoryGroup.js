// services/syncCategoryGroup.js
const ProductImage = require('../models/Stock/ProductImage');
const BranchStock = require('../models/POS/BranchStock');

/**
 * ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• category_name ‡∏à‡∏≤‡∏Å ProductImage ‡πÑ‡∏õ‡∏¢‡∏±‡∏á BranchStock (initial sync)
 */
async function syncAllExisting() {
  const pics = await ProductImage.find().lean();
  console.log(`Found ${pics.length} ProductImage records to sync categories`);

  let totalMatched = 0;
  let totalModified = 0;
  const BATCH_SIZE = 5; // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 5 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
  const DELAY_MS = 100; // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ 100ms ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ batch

  // ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batches
  for (let i = 0; i < pics.length; i += BATCH_SIZE) {
    const batch = pics.slice(i, i + BATCH_SIZE);
    console.log(`üì¶ Processing category batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(pics.length/BATCH_SIZE)} (${batch.length} items)`);

    for (const pic of batch) {
    const {
      name,
      category_name = '',  // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
      category_group = '' // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á
    } = pic;

    if (!name) continue; // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
    console.log(`Syncing category for ProductImage: "${name}" (${category_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà'})`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á RegExp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö case-insensitive ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡πÜ ‡πÑ‡∏î‡πâ
    const regex = new RegExp(`^\\s*${name.trim()}\\s*$`, 'i');

    // 1) ‡∏´‡∏≤ BranchStock ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà name ‡πÅ‡∏°‡∏ï‡∏ä‡πå regex
    const matchedStocks = await BranchStock.find(
      { name: regex },
      { _id: 1 } // ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà _id ‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    ).lean();

    if (matchedStocks.length === 0) {
      console.log(`  ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ BranchStock ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ "${name}"`);
      continue;
    }

    // 2) ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞ _id
    for (const bs of matchedStocks) {
      const updateData = {
        category_name,
        category_group
      };

      const result = await BranchStock.updateOne(
        { _id: bs._id },
        { $set: updateData }
      );
      totalMatched += result.matchedCount;
      totalModified += result.modifiedCount;
    }

    console.log(`  ‚Üí Matched: ${matchedStocks.length}, Modified so far: ${totalModified}`);
  }

  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ batch (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô batch ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
  if (i + BATCH_SIZE < pics.length) {
    console.log(`‚è≥ Waiting ${DELAY_MS}ms before next category batch...`);
    await new Promise(resolve => setTimeout(resolve, DELAY_MS));
  }
  }

  console.log(`‚úÖ Initial category sync completed: ${totalMatched} matched, ${totalModified} modified`);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: initial sync + ‡∏™‡∏£‡πâ‡∏≤‡∏á change streams ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á
 */
async function watchAndSync(io) {
  // 1) ‡∏ó‡∏≥ initial sync ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
  if (process.env.ENABLE_PRODUCT_SYNC === 'true') {
    console.log('‚è∏Ô∏è  Skipping initial category sync on startup for better performance');
    console.log('üí° Run manual sync if needed: /api/admin/sync-categories');
  } else {
    console.log('‚è∏Ô∏è  Category sync skipped (ENABLE_PRODUCT_SYNC=false)');
  }

  console.log('üîÑ Watching ProductImage category changes...');
  // 2) ‡∏ü‡∏±‡∏á‡∏ù‡∏±‡πà‡∏á ProductImage ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï BranchStock
  const changeStreamPI = ProductImage.watch();
  changeStreamPI.on('change', async change => {
    try {
      if (!['insert', 'update', 'replace'].includes(change.operationType)) return;
      const id = change.documentKey._id;
      const pic = await ProductImage.findById(id).lean();
      if (!pic?.name) return;

      const {
        name,
        category_name = '',
        category_group = ''
      } = pic;

      const updateData = {
        category_name,
        category_group
      };

      const result = await BranchStock.updateMany(
        { name: { $regex: `^\\s*${name.trim()}\\s*$`, $options: 'i' } },
        { $set: updateData }
      );

      if (result.modifiedCount > 0) {
        console.log(`‚úÖ Updated categories for ${result.modifiedCount} BranchStock records for "${name}"`);
        // emit update event
        io.emit('branchStockCategoryUpdated', {
          productImageId: id.toString(),
          fields: updateData
        });
      }
    } catch (err) {
      console.error('‚ùå Error in ProductImage category changeStream:', err);
    }
  });

  console.log('üîÑ Watching BranchStock category changes...');
  // 3) ‡∏ü‡∏±‡∏á‡∏ù‡∏±‡πà‡∏á BranchStock ‚Üí ‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà)
  const changeStreamBS = BranchStock.watch();
  changeStreamBS.on('change', async change => {
    try {
      if (change.operationType === 'insert') {
        const newBS = change.fullDocument;
        if (!newBS.name) return;

        // ‡∏´‡∏≤ ProductImage ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (case-insensitive)
        const pic = await ProductImage.findOne({
          name: new RegExp(`^\\s*${newBS.name.trim()}\\s*$`, 'i')
        }).lean();
        if (!pic) return;

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ pic ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ù‡∏±‡πà‡∏á BranchStock
        const updateData = {
          category_name: pic.category_name || '',
          category_group: pic.category_group || ''
        };

        await BranchStock.updateOne(
          { _id: newBS._id },
          { $set: updateData }
        );
        console.log(`‚úÖ Categories for new BranchStock "${newBS.name}" synced from ProductImage.`);
        io.emit('branchStockCategoryUpdated', {
          branchStockId: newBS._id.toString(),
          fields: updateData
        });
      }
    } catch (err) {
      console.error('‚ùå Error in BranchStock category changeStream:', err);
    }
  });
}

module.exports = watchAndSync;
module.exports.syncAllExisting = syncAllExisting;
