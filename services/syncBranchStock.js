// services/syncBranchStock.js
const ProductImage = require('../models/Stock/ProductImage');
const BranchStock  = require('../models/POS/BranchStock');
const redis = require('redis');

// Redis client for caching (persistent connection)
let redisClient = null;
let isRedisConnected = false;

async function initRedisClient() {
  if (!redisClient && process.env.REDIS_URL) {
    try {
      redisClient = redis.createClient({ url: process.env.REDIS_URL });
      redisClient.on('error', (err) => console.log('Redis sync cache error:', err));
      redisClient.on('connect', () => { isRedisConnected = true; });
      redisClient.on('disconnect', () => { isRedisConnected = false; });

      if (!isRedisConnected) {
        await redisClient.connect();
      }
    } catch (error) {
      console.log('Redis not available for sync cache:', error.message);
      redisClient = null;
    }
  }
  return redisClient;
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á cache key ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ProductImage
 */
function getCacheKey(productImageId, version = 'v1') {
  return `sync:product:${productImageId}:${version}`;
}

/**
 * ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ ProductImage ‡∏ô‡∏µ‡πâ sync ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
 */
async function isSynced(productImageId, currentHash) {
  const client = await initRedisClient();
  if (!client || !isRedisConnected) return false;

  try {
    const cachedHash = await client.get(getCacheKey(productImageId));
    return cachedHash === currentHash;
  } catch (error) {
    console.log('Redis cache check error:', error.message);
    return false;
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤ ProductImage ‡∏ô‡∏µ‡πâ sync ‡πÅ‡∏•‡πâ‡∏ß
 */
async function markAsSynced(productImageId, hash, ttlSeconds = 3600) {
  const client = await initRedisClient();
  if (!client || !isRedisConnected) return;

  try {
    await client.setEx(getCacheKey(productImageId), ttlSeconds, hash);
  } catch (error) {
    console.log('Redis cache save error:', error.message);
  }
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ProductImage
 */
function createProductHash(productData) {
  const crypto = require('crypto');
  const dataString = JSON.stringify({
    name: productData.name,
    price: productData.price,
    updatedAt: productData.updatedAt,
    productType: productData.productType
  });
  return crypto.createHash('md5').update(dataString).digest('hex');
}

/**
 * ‡∏ã‡∏¥‡∏á‡∏Ñ‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ProductImage ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢ sync (optimized with Redis caching)
 */
async function syncAllExisting() {
  const pics = await ProductImage.find().lean();
  console.log(`üìä Found ${pics.length} ProductImage records to check for sync`);

  let totalMatched = 0;
  let totalModified = 0;
  let skippedCount = 0;
  const BATCH_SIZE = 10; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏ô‡∏≤‡∏î batch ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏°‡∏µ cache ‡πÅ‡∏•‡πâ‡∏ß
  const DELAY_MS = 50; // ‡∏•‡∏î‡πÄ‡∏ß‡∏•‡∏≤ delay ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ sync ‡∏ô‡πâ‡∏≠‡∏¢‡∏•‡∏á

  // ‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô batches
  for (let i = 0; i < pics.length; i += BATCH_SIZE) {
    const batch = pics.slice(i, i + BATCH_SIZE);
    console.log(`üì¶ Processing batch ${Math.floor(i/BATCH_SIZE) + 1}/${Math.ceil(pics.length/BATCH_SIZE)} (${batch.length} items)`);

    for (const pic of batch) {
      // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡πÅ‡∏•‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ cache ‡∏Å‡πà‡∏≠‡∏ô
      const currentHash = createProductHash(pic);
      const alreadySynced = await isSynced(pic._id.toString(), currentHash);

      if (alreadySynced) {
        skippedCount++;
        console.log(`‚è≠Ô∏è  Skipped \"${pic.name}\" (already synced)`);
        continue;
      }
    const {
      name,
      price = 0,
      downAmount = 0,
      downInstallmentCount = 0,
      downInstallment = 0,
      creditThreshold = 0,
      payUseInstallmentCount = 0,
      payUseInstallment = 0,
      pricePayOff = 0,
      docFee = 0,
      image = '',
      purchaseType = [],   // default to empty array
      productType = 'mobile',  // ‡πÄ‡∏û‡∏¥‡πà‡∏° productType
      boxsetType,             // ‡πÄ‡∏û‡∏¥‡πà‡∏° boxsetType
      boxsetProducts = [],     // ‡πÄ‡∏û‡∏¥‡πà‡∏° boxsetProducts
      stockType = 'imei'      // ‡πÄ‡∏û‡∏¥‡πà‡∏° stockType
    } = pic;

    if (!name) continue;   // ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠
    console.log(`Syncing ProductImage: "${name}" (${productType}${boxsetType ? ' - ' + boxsetType : ''})`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á RegExp ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö case-insensitive ‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡∏£‡∏£‡∏Ñ‡∏£‡∏≠‡∏ö‡πÜ ‡πÑ‡∏î‡πâ
    const regex = new RegExp(`^\\s*${name.trim()}\\s*$`, 'i');

    // 1) ‡∏´‡∏≤ BranchStock ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà name ‡πÅ‡∏°‡∏ï‡∏ä‡πå regex
    const matchedStocks = await BranchStock.find(
      { name: regex },
      { _id: 1 } // ‡πÄ‡∏£‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Ñ‡πà _id ‡∏°‡∏≤‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    ).lean();

    if (matchedStocks.length === 0) {
      console.log(`  ‚Üí ‡πÑ‡∏°‡πà‡∏°‡∏µ BranchStock ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ä‡∏∑‡πà‡∏≠ "${name}"`);
      continue;
    }

    // 2) ‡πÑ‡∏´‡∏•‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏µ‡∏•‡∏∞ _id ‡∏î‡πâ‡∏ß‡∏¢ updateOne (‡πÉ‡∏ä‡πâ $set ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏Å‡πâ‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß)
    for (const bs of matchedStocks) {
      const updateData = {
        price,
        downAmount,
        downInstallmentCount,
        downInstallment,
        creditThreshold,
        payUseInstallmentCount,
        payUseInstallment,
        pricePayOff,
        docFee,
        image,
        purchaseType,
        productType,
        boxsetProducts,
        stockType
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° boxsetType ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô boxset
      if (productType === 'boxset' && boxsetType) {
        updateData.boxsetType = boxsetType;
      }

      const result = await BranchStock.updateOne(
        { _id: bs._id },
        { $set: updateData }
      );
      totalMatched += result.matchedCount;
      totalModified += result.modifiedCount;
    }

    console.log(`  ‚Üí Matched: ${matchedStocks.length}, Modified so far: ${totalModified}`);

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    await markAsSynced(pic._id.toString(), currentHash, 3600); // cache 1 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
  }

  // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞ batch (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô batch ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢)
  if (i + BATCH_SIZE < pics.length) {
    console.log(`‚è≥ Waiting ${DELAY_MS}ms before next batch...`);
    await new Promise(resolve => setTimeout(resolve, DELAY_MS));
  }
  }

  console.log(`‚úÖ Initial BranchStock sync completed:`);
  console.log(`   üìä Total checked: ${pics.length}`);
  console.log(`   ‚è≠Ô∏è  Skipped (cached): ${skippedCount}`);
  console.log(`   ‚úÖ Processed: ${pics.length - skippedCount}`);
  console.log(`   üìù Matched: ${totalMatched}, Modified: ${totalModified}`);
}

/**
 * ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å: initial sync + ‡∏™‡∏£‡πâ‡∏≤‡∏á change streams ‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ù‡∏±‡πà‡∏á
 */
async function watchAndSync(io) {
  // 1) ‡∏ó‡∏≥ initial sync ‡∏Å‡πà‡∏≠‡∏ô (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô)
  if (process.env.ENABLE_PRODUCT_SYNC === 'true') {
    console.log('‚è∏Ô∏è  Skipping initial sync on startup for better performance');
    console.log('üí° Run manual sync if needed: /api/admin/sync-products');
  } else {
    console.log('‚è∏Ô∏è  BranchStock sync skipped (ENABLE_PRODUCT_SYNC=false)');
  }

  console.log('üîÑ Watching ProductImage changes...');
  // 2) ‡∏ü‡∏±‡∏á‡∏ù‡∏±‡πà‡∏á ProductImage ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï BranchStock
  const changeStreamPI = ProductImage.watch();
  changeStreamPI.on('change', async change => {
    try {
      if (!['insert','update','replace'].includes(change.operationType)) return;
      const id = change.documentKey._id;
      const pic = await ProductImage.findById(id).lean();
      if (!pic?.name) return;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á hash ‡πÅ‡∏•‡∏∞‡∏•‡∏ö cache ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ sync ‡πÉ‡∏´‡∏°‡πà)
      const currentHash = createProductHash(pic);

      // ‡∏•‡∏ö cache ‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏≠‡∏Å ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ sync ‡πÉ‡∏´‡∏°‡πà
      const client = await initRedisClient();
      if (client && isRedisConnected) {
        try {
          await client.del(getCacheKey(id.toString()));
        } catch (error) {
          console.log('Redis cache clear error:', error.message);
        }
      }

      const {
        name,
        price = 0,
        downAmount = 0,
        downInstallmentCount = 0,
        downInstallment = 0,
        creditThreshold = 0,
        payUseInstallmentCount = 0,
        payUseInstallment = 0,
        pricePayOff = 0,
        docFee = 0,
        image = '',
        purchaseType = [],
        productType = 'mobile',
        boxsetType,
        boxsetProducts = [],
        stockType = 'imei'
      } = pic;

      const updateData = {
        price,
        downAmount,
        downInstallmentCount,
        downInstallment,
        creditThreshold,
        payUseInstallmentCount,
        payUseInstallment,
        pricePayOff,
        docFee,
        image,
        purchaseType,
        productType,
        boxsetProducts,
        stockType
      };

      // ‡πÄ‡∏û‡∏¥‡πà‡∏° boxsetType ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô boxset
      if (productType === 'boxset' && boxsetType) {
        updateData.boxsetType = boxsetType;
      }

      const result = await BranchStock.updateMany(
        { name: { $regex: `^\\s*${name.trim()}\\s*$`, $options: 'i' } },
        { $set: updateData }
      );

      if (result.modifiedCount > 0) {
        console.log(`‚úÖ Updated ${result.modifiedCount} BranchStock records for "${name}"`);

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å sync ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await markAsSynced(id.toString(), currentHash, 3600);

        // emit update event with productImageId and updated fields
        io.emit('branchStockUpdated', {
          productImageId: id.toString(),
          fields: updateData
        });
      }
    } catch (err) {
      console.error('‚ùå Error in ProductImage changeStream:', err);
    }
  });

  console.log('üîÑ Watching BranchStock changes...');
  // 3) ‡∏ü‡∏±‡∏á‡∏ù‡∏±‡πà‡∏á BranchStock ‚Üí ‡∏ã‡∏¥‡∏á‡∏Å‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡∏Å‡∏£‡∏ì‡∏µ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà)
  const changeStreamBS = BranchStock.watch();
  changeStreamBS.on('change', async change => {
    try {
      if (change.operationType === 'insert') {
        const newBS = change.fullDocument;
        if (!newBS.name) return;

        // ‡∏´‡∏≤ ProductImage ‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô (case-insensitive)
        const pic = await ProductImage.findOne({
          name: new RegExp(`^\\s*${newBS.name.trim()}\\s*$`, 'i')
        }).lean();
        if (!pic) return;

        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ pic ‚Üí ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ù‡∏±‡πà‡∏á BranchStock (‡∏ó‡∏µ‡πà‡∏û‡∏∂‡πà‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏°‡∏≤)
        const updateData = {
          price: pic.price || 0,
          downAmount: pic.downAmount || 0,
          downInstallmentCount: pic.downInstallmentCount || 0,
          downInstallment: pic.downInstallment || 0,
          creditThreshold: pic.creditThreshold || 0,
          payUseInstallmentCount: pic.payUseInstallmentCount || 0,
          payUseInstallment: pic.payUseInstallment || 0,
          pricePayOff: pic.pricePayOff || 0,
          docFee: pic.docFee || 0,
          image: pic.image || '',
          purchaseType: pic.purchaseType || [],
          productType: pic.productType || 'mobile',
          boxsetProducts: pic.boxsetProducts || [],
          stockType: pic.stockType || 'imei'
        };

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° boxsetType ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡πá‡∏ô boxset
        if (pic.productType === 'boxset' && pic.boxsetType) {
          updateData.boxsetType = pic.boxsetType;
        }

        await BranchStock.updateOne(
          { _id: newBS._id },
          { $set: updateData }
        );
        console.log(`‚úÖ New BranchStock "${newBS.name}" synced from ProductImage (${pic.productType}${pic.boxsetType ? ' - ' + pic.boxsetType : ''}).`);
        io.emit('branchStockUpdated', {
          branchStockId: newBS._id.toString(),
          fields: updateData
        });
      }
    } catch (err) {
      console.error('‚ùå Error in BranchStock changeStream:', err);
    }
  });
}

module.exports = watchAndSync;
module.exports.syncAllExisting = syncAllExisting;
