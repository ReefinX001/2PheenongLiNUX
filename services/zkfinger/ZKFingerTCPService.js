/**
 * ZKFinger TCP Service - ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Windows Service ‡∏ú‡πà‡∏≤‡∏ô TCP
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠‡∏ú‡πà‡∏≤‡∏ô ZK9500 via TCP connection
 */

const net = require('net');
const path = require('path');
const fs = require('fs').promises;

class ZKFingerTCPService {
    constructor(options = {}) {
        this.host = options.host || '100.106.108.57';
        this.port = options.port || 8890;  // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô default ‡πÄ‡∏õ‡πá‡∏ô 8890
        this.timeout = options.timeout || 30000;
        this.isInitialized = false;
        this.isConnected = false;
        this.deviceHandle = null;
        this.lastStatus = null;
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö ZKTeco Service
     */
    async initialize() {
        try {
            console.log(`üîÑ Initializing ZKFinger TCP Service...`);
            console.log(`üì° Target: ${this.host}:${this.port}`);

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            const pingResult = await this.ping();
            if (!pingResult.success) {
                throw new Error('Cannot connect to ZKTeco Service');
            }

            // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å initialize ‡πÅ‡∏ó‡∏ô getStatus ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ status command ‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            const initResult = await this.initializeSDK();
            this.lastStatus = {
                serviceRunning: initResult.success || initResult.status === 'success',
                deviceConnected: initResult.data?.deviceHandle > 0,
                deviceHandle: initResult.data?.deviceHandle,
                deviceCount: initResult.data?.deviceCount,
                timestamp: new Date()
            };

            // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô SDK ‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            await this.initializeSDK();

            this.isInitialized = true;
            this.isConnected = true;

            console.log(`‚úÖ ZKFinger TCP Service initialized successfully`);
            console.log(`üìä Device Status: ${this.lastStatus.deviceConnected ? 'Connected' : 'Not Connected'}`);
            if (this.lastStatus.deviceCount) {
                console.log(`üì± Devices Found: ${this.lastStatus.deviceCount}`);
            }

            return {
                success: true,
                host: this.host,
                port: this.port,
                deviceConnected: this.lastStatus.deviceConnected,
                deviceCount: this.lastStatus.deviceCount,
                deviceHandle: this.lastStatus.deviceHandle,
                timestamp: new Date()
            };

        } catch (error) {
            console.error('‚ùå ZKFinger TCP Service initialization failed:', error);
            this.isInitialized = false;
            this.isConnected = false;
            throw error;
        }
    }

    /**
     * ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á TCP Server
     */
    async sendCommand(command, data = {}) {
        return new Promise((resolve, reject) => {
            const client = new net.Socket();
            let responseReceived = false;
            let buffer = '';  // Buffer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏¢‡∏≤‡∏ß

            const timeout = setTimeout(() => {
                if (!responseReceived) {
                    client.destroy();
                    reject(new Error(`Command timeout: ${command}`));
                }
            }, this.timeout);

            client.connect(this.port, this.host, () => {
                const request = { command, ...data };
                const jsonData = JSON.stringify(request);

                console.log(`üì§ Sending command: ${command}`);
                client.write(jsonData);
            });

            client.on('data', (chunk) => {
                buffer += chunk.toString();

                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏°‡∏µ closing brace)
                if (buffer.includes('}\n') || buffer.includes('}')) {
                    responseReceived = true;
                    clearTimeout(timeout);

                    try {
                        // ‡∏•‡∏ö newline ‡∏´‡∏£‡∏∑‡∏≠ whitespace ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ï‡πà‡∏≠‡∏ó‡πâ‡∏≤‡∏¢
                        const cleanedBuffer = buffer.trim();
                        const response = JSON.parse(cleanedBuffer);

                        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö log
                        const responseStatus = response.status === 'success' || response.success ? 'Success' : 'Failed';
                        console.log(`üì• Response: ${command} - ${responseStatus}`);

                        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö scan command ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                        if (command === 'scan' && response.data?.template) {
                            console.log(`üìä Template size: ${response.data.template.length} chars`);
                        }

                        resolve(response);
                    } catch (error) {
                        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debugging
                        const previewData = buffer.length > 200 ? buffer.substring(0, 200) + '...' : buffer;
                        reject(new Error(`Invalid JSON response for ${command}: ${previewData}`));
                    }

                    client.end();
                }
            });

            client.on('error', (error) => {
                clearTimeout(timeout);
                console.error(`‚ùå TCP Error for ${command}:`, error.message);
                reject(new Error(`TCP connection failed: ${error.message}`));
            });

            client.on('close', () => {
                if (!responseReceived) {
                    clearTimeout(timeout);
                    reject(new Error(`Connection closed before receiving response for ${command}`));
                }
            });
        });
    }

    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
     */
    async ping() {
        try {
            const response = await this.sendCommand('ping');
            // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö format ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å ZKTeco Service
            const isSuccess = response.status === 'success' || response.success === true;
            return {
                success: isSuccess,
                timestamp: response.data?.timestamp || new Date().toISOString(),
                service: response.data?.service,
                version: response.data?.version
            };
        } catch (error) {
            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ service ‡πÅ‡∏•‡∏∞‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
     */
    async getStatus() {
        try {
            // ‡πÉ‡∏ä‡πâ ping ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏ó‡∏ô status command ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
            const pingResult = await this.ping();

            this.lastStatus = {
                serviceRunning: pingResult.success,
                deviceConnected: this.deviceHandle && this.deviceHandle > 0,
                timestamp: new Date(),
                deviceHandle: this.deviceHandle,
                error: pingResult.success ? null : pingResult.error
            };

            return this.lastStatus;
        } catch (error) {
            this.lastStatus = {
                serviceRunning: false,
                deviceConnected: false,
                error: error.message,
                timestamp: new Date()
            };
            return this.lastStatus;
        }
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô ZK SDK
     */
    async initializeSDK() {
        try {
            const response = await this.sendCommand('initialize');

            // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö format ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å service
            const isSuccess = response.status === 'success' || response.success === true;

            if (isSuccess) {
                console.log(`‚úÖ ZK SDK initialized successfully`);
                // ‡πÄ‡∏Å‡πá‡∏ö device handle ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ï‡πà‡∏≠‡πÑ‡∏õ
                this.deviceHandle = response.data?.deviceHandle;
                if (response.data?.deviceCount) {
                    console.log(`üì± Found ${response.data.deviceCount} device(s)`);
                }
                return response;
            } else {
                console.warn(`‚ö†Ô∏è ZK SDK initialization warning: ${response.message}`);
                // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ service ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
                return response;
            }
        } catch (error) {
            console.warn(`‚ö†Ô∏è ZK SDK initialization failed: ${error.message}`);
            // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ service ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
            return { success: false, message: error.message };
        }
    }

    /**
     * ‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠
     */
    async scanFingerprint(options = {}) {
        try {
            if (!this.isInitialized) {
                await this.initialize();
            }

            const {
                timeout = 30000,
                quality = 'high'
            } = options;

            console.log(`üîç Starting fingerprint scan (timeout: ${timeout}ms)...`);

            const response = await this.sendCommand('scan', { timeout });

            // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö success condition - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö format ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å service
            const isSuccess = response.status === 'success' ||
                             response.success === true ||
                             (response.message && response.message.includes('Fingerprint scanned successfully'));

            if (isSuccess) {
                console.log(`‚úÖ Fingerprint scan successful`);

                const result = {
                    success: true,
                    template: response.data?.template,
                    imagePath: response.data?.imagePath,
                    imageData: response.data?.imageData, // ‡πÄ‡∏û‡∏¥‡πà‡∏° imageData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Base64
                    timestamp: response.data?.timestamp || new Date().toISOString(),
                    quality: response.data?.quality || 'high',
                    width: response.data?.width,
                    height: response.data?.height,
                    templateSize: response.data?.templateSize || response.data?.template?.length
                };

                // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£ debug
                if (response.data?.template) {
                    console.log(`üìã Template Length: ${response.data.template.length}`);
                }
                if (response.data?.imageData) {
                    console.log(`üñºÔ∏è Image Data Length: ${response.data.imageData.length}`);
                }

                return result;

            } else {
                console.error(`‚ùå Fingerprint scan failed: ${response.message}`);
                throw new Error(response.message || 'Scan failed');
            }

        } catch (error) {
            console.error(`‚ùå Fingerprint scan error:`, error);
            throw new Error(`Scan failed: ${error.message}`);
        }
    }


    /**
     * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠)
     */
    async connectDevice(deviceIP = null) {
        if (deviceIP && deviceIP !== this.host) {
            this.host = deviceIP;
            this.isInitialized = false;
            this.isConnected = false;
        }

        return await this.initialize();
    }

    /**
     * ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
     */
    async disconnect() {
        try {
            console.log(`üîÑ Disconnecting from ZKTeco Service...`);

            this.isInitialized = false;
            this.isConnected = false;
            this.deviceHandle = null;
            this.lastStatus = null;

            console.log(`‚úÖ Disconnected successfully`);

            return {
                success: true,
                message: 'Disconnected successfully',
                timestamp: new Date()
            };

        } catch (error) {
            console.error(`‚ùå Disconnect error:`, error);
            return {
                success: false,
                message: error.message,
                timestamp: new Date()
            };
        }
    }

    /**
     * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢ service instance
     */
    async destroy() {
        await this.disconnect();
        console.log(`üóëÔ∏è ZKFinger TCP Service destroyed`);
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
     */
    get isReady() {
        return this.isInitialized && this.isConnected;
    }

    /**
     * ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
     */
    get currentStatus() {
        return {
            isInitialized: this.isInitialized,
            isConnected: this.isConnected,
            host: this.host,
            port: this.port,
            lastStatus: this.lastStatus,
            timestamp: new Date()
        };
    }
}

module.exports = ZKFingerTCPService;