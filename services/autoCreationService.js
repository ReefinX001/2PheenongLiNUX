// services/autoCreationService.js
const mongoose = require('mongoose');
const { isConnected, waitForConnection } = require('../config/db');
const BranchStockHistory = require('../models/POS/BranchStockHistory');
const Branch = require('../models/Account/Branch');
const ReceiptVoucherAutoCreate = require('../controllers/Services/receiptVoucherAutoCreate');
const config = require('../config/receiptVoucherConfig');

class AutoCreationService {
    constructor() {
        this.isRunning = false;
        this.interval = null;
        this.lastRunTime = null;
        this.stats = {
            totalCreated: 0,
            totalFailed: 0,
            totalSkipped: 0,
            lastRun: null,
            byBranch: {}
        };
    }

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏ö‡∏ö Auto Creation
    start() {
        if (!config.AUTO_CREATION_ENABLED) {
            console.log('‚ö†Ô∏è  Backend Auto Creation is DISABLED in config');
            return;
        }

        if (this.isRunning) {
            console.log('‚ö†Ô∏è  Backend Auto Creation is already running');
            return;
        }

        console.log('üöÄ Starting Backend Auto Creation Service...');
        console.log(`‚è∞ Will run every ${config.AUTO_CREATE_INTERVAL / 1000} seconds`);
        console.log(`üìã Auto create reasons: ${config.AUTO_CREATE_REASONS.join(', ')}`);
        console.log(`üî¢ Batch limit: ${config.AUTO_CREATE_BATCH_LIMIT || 50} items per run`);

        this.isRunning = true;

        // ‡∏£‡∏±‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°
        this.runAutoCreation();

        // ‡∏ï‡∏±‡πâ‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏£‡∏±‡∏ô‡∏ï‡∏≤‡∏° interval
        this.interval = setInterval(() => {
            this.runAutoCreation();
        }, config.AUTO_CREATE_INTERVAL);

        console.log('‚úÖ Backend Auto Creation Service started successfully');
    }

    // ‡∏´‡∏¢‡∏∏‡∏î‡∏£‡∏∞‡∏ö‡∏ö
    stop() {
        if (!this.isRunning) {
            console.log('‚ö†Ô∏è  Backend Auto Creation is not running');
            return;
        }

        if (this.interval) {
            clearInterval(this.interval);
            this.interval = null;
        }

        this.isRunning = false;
        console.log('üõë Backend Auto Creation Service stopped');
    }

    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤
    async runAutoCreation() {
        try {
            // Check MongoDB connection first
            if (!isConnected()) {
                console.warn('‚ö†Ô∏è MongoDB not connected, skipping auto creation');
                return;
            }

            // Wait for connection to be ready
            try {
                await waitForConnection(5000);
            } catch (connectionError) {
                console.warn('‚ö†Ô∏è MongoDB connection not ready, skipping auto creation');
                return;
            }

            console.log('\n‚è∞ Running backend auto creation check...');
            this.lastRunTime = new Date();

            // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            const branches = await Branch.find({}).lean();
            console.log(`üè¢ Processing ${branches.length} branches...`);

            let totalSuccess = 0;
            let totalFailed = 0;
            let totalSkipped = 0;

            // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
            for (const branch of branches) {
                const branchCode = branch.code || branch.branch_code;
                const branchName = branch.name || branch.branch_name;

                console.log(`\nüìç Processing branch: ${branchName} (${branchCode})`);

                try {
                    const result = await this.processItemsForBranch(branchCode, branch._id);

                    totalSuccess += result.success;
                    totalFailed += result.failed;
                    totalSkipped += result.skipped;

                    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏™‡∏≤‡∏Ç‡∏≤
                    if (!this.stats.byBranch[branchCode]) {
                        this.stats.byBranch[branchCode] = {
                            name: branchName,
                            created: 0,
                            failed: 0,
                            skipped: 0
                        };
                    }

                    this.stats.byBranch[branchCode].created += result.success;
                    this.stats.byBranch[branchCode].failed += result.failed;
                    this.stats.byBranch[branchCode].skipped += result.skipped;

                } catch (error) {
                    console.error(`‚ùå Error processing branch ${branchCode}:`, error.message);
                }
            }

            // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏°
            this.stats.totalCreated += totalSuccess;
            this.stats.totalFailed += totalFailed;
            this.stats.totalSkipped += totalSkipped;
            this.stats.lastRun = new Date();

            console.log(`\nüìä Auto creation cycle completed:`);
            console.log(`   ‚úÖ Success: ${totalSuccess}`);
            console.log(`   ‚è≠Ô∏è  Skipped: ${totalSkipped}`);
            console.log(`   ‚ùå Failed: ${totalFailed}`);
            console.log(`   üìà Total created (all time): ${this.stats.totalCreated}`);

            // ‡∏™‡πà‡∏á Socket event ‡∏™‡∏£‡∏∏‡∏õ
            if (global.io) {
                global.io.emit('autoCreationSummary', {
                    timestamp: new Date(),
                    cycleStats: {
                        success: totalSuccess,
                        failed: totalFailed,
                        skipped: totalSkipped
                    },
                    totalStats: this.stats
                });
            }

        } catch (error) {
            console.error('‚ùå Error in auto creation cycle:', error);
        }
    }

    // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
    async processItemsForBranch(branchCode, branchId) {
        try {
            // Query ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á
            const query = {
                branch_code: branchCode,
                change_type: 'OUT',
                $or: [
                    { hasReceiptVoucher: { $ne: true } },
                    { hasReceiptVoucher: { $exists: false } },
                    { hasReceiptVoucher: false },
                    { hasReceiptVoucher: null }
                ],
                reason: { $in: config.AUTO_CREATE_REASONS }
            };

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
            const pendingItems = await BranchStockHistory.find(query)
                .limit(config.AUTO_CREATE_BATCH_LIMIT || 50)
                .sort({ performed_at: 1 }) // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
                .lean();

            if (pendingItems.length === 0) {
                console.log(`   ‚úÖ No pending items for branch ${branchCode}`);
                return { success: 0, failed: 0, skipped: 0 };
            }

            console.log(`   üìã Found ${pendingItems.length} pending items`);

            // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            let successCount = 0;
            let failCount = 0;
            let skipCount = 0;

            for (const item of pendingItems) {
                try {
                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ã‡πâ‡∏≥‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô race condition)
                    const currentItem = await BranchStockHistory.findById(item._id);
                    if (!currentItem || currentItem.hasReceiptVoucher) {
                        skipCount++;
                        console.log(`   ‚è≠Ô∏è  Skipping ${item.invoice_no} - Already processed or not found`);
                        continue;
                    }

                    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    const ReceiptVoucher = require('../models/POS/ReceiptVoucher');
                    const existingReceipt = await ReceiptVoucher.findOne({
                        $or: [
                            { 'reference.branchStockHistoryId': item._id },
                            { 'reference.invoiceNumber': item.invoice_no },
                            { notes: { $regex: item.invoice_no || '', $options: 'i' } }
                        ]
                    });

                    if (existingReceipt) {
                        skipCount++;
                        console.log(`   ‚è≠Ô∏è  Receipt already exists for ${item.invoice_no} - ${existingReceipt.documentNumber}`);

                        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó hasReceiptVoucher
                        await BranchStockHistory.findByIdAndUpdate(item._id, {
                            hasReceiptVoucher: true,
                            receiptVoucherId: existingReceipt._id
                        });
                        continue;
                    }

                    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                    const saleData = ReceiptVoucherAutoCreate.convertHistoryToSaleData(item);

                    // ‡πÄ‡∏û‡∏¥‡πà‡∏° branch ID
                    saleData.branchId = branchId;

                    // ‡πÉ‡∏ä‡πâ ObjectId ‡∏à‡∏≤‡∏Å performed_by ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
                    if (!saleData.staffId) {
                        saleData.staffId = item.performed_by || new mongoose.Types.ObjectId();
                    }

                    console.log(`   üîÑ Processing: ${item.invoice_no} - Amount: ‡∏ø${(item.net_amount || 0).toLocaleString()}`);

                    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
                    const result = await ReceiptVoucherAutoCreate.createFromSale(saleData);

                    if (result.success) {
                        successCount++;
                        console.log(`   ‚úÖ Created ${result.data.documentNumber} for ${item.invoice_no}`);

                        // ‡∏™‡πà‡∏á Socket event
                        if (global.io) {
                            global.io.emit('receiptVoucherCreated', {
                                success: true,
                                data: result.data,
                                branchCode: branchCode,
                                invoiceNo: item.invoice_no
                            });
                        }
                                            } else {
                            // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô skip
                            if (result.existingDocument || result.alreadyExists) {
                                skipCount++;
                                console.log(`   ‚è≠Ô∏è  Already exists: ${item.invoice_no} - ${result.existingDocument || 'Document exists'}`);
                            } else {
                                failCount++;
                                console.warn(`   ‚ö†Ô∏è  Failed: ${item.invoice_no} - ${result.message}`);
                            }
                        }
                } catch (error) {
                    failCount++;
                    console.error(`   ‚ùå Error: ${item.invoice_no} - ${error.message}`);
                }

                // ‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                await this.delay(100);
            }

            return {
                success: successCount,
                failed: failCount,
                skipped: skipCount
            };

        } catch (error) {
            console.error(`Error processing branch ${branchCode}:`, error);
            return { success: 0, failed: 0, skipped: 0 };
        }
    }

    // ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    getStats() {
        return {
            isRunning: this.isRunning,
            lastRunTime: this.lastRunTime,
            nextRunTime: this.lastRunTime && this.isRunning
                ? new Date(this.lastRunTime.getTime() + config.AUTO_CREATE_INTERVAL)
                : null,
            stats: this.stats,
            config: {
                enabled: config.AUTO_CREATION_ENABLED,
                interval: config.AUTO_CREATE_INTERVAL,
                batchLimit: config.AUTO_CREATE_BATCH_LIMIT,
                reasons: config.AUTO_CREATE_REASONS
            }
        };
    }

    // ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    resetStats() {
        this.stats = {
            totalCreated: 0,
            totalFailed: 0,
            totalSkipped: 0,
            lastRun: null,
            byBranch: {}
        };
        console.log('üìä Stats reset successfully');
    }

    // Helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤
    delay(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // Static method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility ‡∏Å‡∏±‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
    static async runAutoCreation(branchId, autoConfig = {}) {
        const instance = new AutoCreationService();

        // ‡∏´‡∏≤ branch code ‡∏à‡∏≤‡∏Å branch ID
        let branchCode = '00000';
        if (branchId) {
            const branch = await Branch.findById(branchId);
            if (branch) {
                branchCode = branch.code || branch.branch_code;
            }
        }

        // ‡∏£‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
        const result = await instance.processItemsForBranch(branchCode, branchId);

        return {
            success: true,
            branchId,
            branchCode,
            totalPending: result.success + result.failed + result.skipped,
            processed: result.success,
            failed: result.failed,
            skipped: result.skipped
        };
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡∏ó‡∏±‡πâ‡∏á app
const autoCreationService = new AutoCreationService();

module.exports = autoCreationService;
