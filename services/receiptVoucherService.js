// services/receiptVoucherService.js
const mongoose = require('mongoose');
const ReceiptVoucher = require('../models/POS/ReceiptVoucher');
const BranchStockHistory = require('../models/POS/BranchStockHistory');
const Branch = require('../models/Account/Branch');
const Counter = require('../models/POS/Counter'); // ‡πÉ‡∏ä‡πâ Counter ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß

class ReceiptVoucherService {
  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å BranchStockHistory
   * @param {String} branchStockHistoryId - ID ‡∏Ç‡∏≠‡∏á BranchStockHistory
   * @param {Object} options - ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
   * @returns {Object} ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á
   */
  static async createFromBranchStockHistory(branchStockHistoryId, options = {}) {
    const session = await mongoose.startSession();
    session.startTransaction();

    try {
      console.log(`üìã ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å BranchStockHistory ID: ${branchStockHistoryId}`);

      // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BranchStockHistory
      const stockHistory = await BranchStockHistory.findById(branchStockHistoryId)
        .populate('branch_code')
        .populate('performed_by', 'name email')
        .populate('supplier', 'name')
        .session(session);

      if (!stockHistory) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• BranchStockHistory');
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (stockHistory.change_type !== 'OUT') {
        throw new Error('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏î‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ (OUT) ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô');
      }

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const existingReceipt = await ReceiptVoucher.findOne({
        branchStockHistoryId: branchStockHistoryId
      }).session(session);

      if (existingReceipt && !options.force) {
        console.log(`‚ö†Ô∏è ‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß: ${existingReceipt.documentNumber}`);
        return {
          success: false,
          message: '‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß',
          data: existingReceipt
        };
      }

      // 4. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤
      const branch = await Branch.findOne({
        branch_code: stockHistory.branch_code
      }).session(session);

      if (!branch) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤');
      }

      // 5. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      const documentNumber = await this.generateDocumentNumber(
        stockHistory.branch_code,
        stockHistory.performed_at || new Date(),
        session
      );

      // 6. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
      const receiptData = {
        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
        documentNumber: documentNumber,
        documentDate: stockHistory.sale_date || stockHistory.performed_at || new Date(),
        documentType: 'receipt', // ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤
        branchId: branch._id,
        branchCode: stockHistory.branch_code,
        branchName: branch.branch_name,

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        customerType: stockHistory.customerType || 'individual',
        customerInfo: this.prepareCustomerInfo(stockHistory),

        // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤/‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
        items: this.prepareItems(stockHistory.items),

        // ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
        subTotal: stockHistory.sub_total || this.calculateSubTotal(stockHistory.items),
        discountAmount: stockHistory.discount || 0,
        vatAmount: stockHistory.vat_amount || 0,
        grandTotal: stockHistory.net_amount || stockHistory.total_amount || 0,

        // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏†‡∏≤‡∏©‡∏µ
        taxType: stockHistory.taxType || '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ',

        // ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
        paymentDetails: this.preparePaymentDetails(stockHistory, options),

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        reference: {
          type: this.getReferenceType(stockHistory.reason),
          invoiceNo: stockHistory.invoice_no,
          installmentId: stockHistory.installment_id,
          contractNo: stockHistory.contract_no,
          orderId: stockHistory.order_id,
          branchStockHistoryId: stockHistory._id
        },

        // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
        staffInfo: {
          staffId: stockHistory.performed_by?._id,
          staffName: stockHistory.staff_name || stockHistory.performed_by?.name,
          staffEmail: stockHistory.performed_by?.email
        },

        // ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
        reason: stockHistory.reason,
        remarks: options.remarks || `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏à‡∏≤‡∏Å ${stockHistory.reason || '‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢'}`,
        status: 'active',

        // Metadata
        createdBy: stockHistory.performed_by?._id || options.userId,
        createdAt: new Date(),
        isAutoGenerated: true
      };

      // 7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
      const receiptVoucher = new ReceiptVoucher(receiptData);
      const savedReceipt = await receiptVoucher.save({ session });

      // 8. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï BranchStockHistory
      stockHistory.receiptVoucherId = savedReceipt._id;
      stockHistory.hasReceiptVoucher = true;
      await stockHistory.save({ session });

      // 9. Commit transaction
      await session.commitTransaction();

      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${savedReceipt.documentNumber}`);

      return {
        success: true,
        message: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ${savedReceipt.documentNumber} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`,
        data: savedReceipt
      };

    } catch (error) {
      await session.abortTransaction();
      console.error('‚ùå Error creating receipt voucher:', error);

      return {
        success: false,
        error: error.message,
        details: error
      };

    } finally {
      session.endSession();
    }
  }

  /**
   * ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
   */
  static prepareCustomerInfo(stockHistory) {
    if (stockHistory.customerType === 'corporate' && stockHistory.corporateInfo) {
      return {
        type: 'corporate',
        name: stockHistory.corporateInfo.companyName || '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
        taxId: stockHistory.corporateInfo.taxId,
        branch: stockHistory.corporateInfo.branch || '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà',
        address: stockHistory.corporateInfo.address,
        phone: stockHistory.corporateInfo.phone,
        email: stockHistory.corporateInfo.email,
        contactPerson: stockHistory.corporateInfo.contactPerson
      };
    } else {
      // Default to individual
      const info = stockHistory.customerInfo || {};
      return {
        type: 'individual',
        name: info.name || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
        taxId: info.taxId,
        address: info.address,
        phone: info.phone,
        email: info.email,
        idCard: info.idCard
      };
    }
  }

  /**
   * ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
   */
  static prepareItems(items) {
    if (!Array.isArray(items)) return [];

    return items.map((item, index) => ({
      seq: index + 1,
      productId: item.product_id,
      productCode: item.sku || item.barcode || '',
      productName: item.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠',
      quantity: item.qty || 1,
      unit: item.unit || '‡∏ä‡∏¥‡πâ‡∏ô',
      unitPrice: item.price || item.sellPrice || 0,
      discount: item.discount || 0,
      amount: (item.qty || 1) * (item.price || item.sellPrice || 0),
      imei: item.imei,
      serialNumber: item.serialNumber,
      poNumber: item.poNumber,
      cost: item.cost || 0
    }));
  }

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì SubTotal
   */
  static calculateSubTotal(items) {
    if (!Array.isArray(items)) return 0;

    return items.reduce((sum, item) => {
      const qty = item.qty || 1;
      const price = item.price || item.sellPrice || 0;
      return sum + (qty * price);
    }, 0);
  }

  /**
   * ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
   */
  static preparePaymentDetails(stockHistory, options) {
    const paymentMethod = options.paymentMethod || this.getPaymentMethod(stockHistory.reason);

    const details = {
      method: paymentMethod,
      amount: stockHistory.net_amount || stockHistory.total_amount || 0,
      receivedAmount: options.receivedAmount || stockHistory.net_amount || 0,
      changeAmount: 0
    };

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô
    if (details.receivedAmount > details.amount) {
      details.changeAmount = details.receivedAmount - details.amount;
    }

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞
    if (paymentMethod === 'transfer') {
      details.bankAccount = options.bankAccount;
      details.transferDate = options.transferDate || new Date();
      details.transferRef = options.transferRef;
    } else if (paymentMethod === 'credit_card') {
      details.cardType = options.cardType;
      details.cardNumber = options.cardNumber; // Last 4 digits only
      details.approvalCode = options.approvalCode;
    } else if (paymentMethod === 'installment') {
      details.installmentId = stockHistory.installment_id;
      details.contractNo = stockHistory.contract_no;
      details.downPayment = options.downPayment || 0;
    }

    return details;
  }

  /**
   * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
   */
  static getReferenceType(reason) {
    const typeMap = {
      '‡∏Ç‡∏≤‡∏¢ POS': 'pos_sale',
      '‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô': 'installment_sale',
      '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£': 'service',
      '‡∏Ç‡∏≤‡∏¢‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå': 'online_sale',
      '‡∏Ç‡∏≤‡∏¢‡∏™‡πà‡∏á': 'wholesale'
    };

    return typeMap[reason] || 'other';
  }

  /**
   * ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
   */
  static getPaymentMethod(reason) {
    if (reason === '‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô') return 'installment';
    return 'cash'; // Default
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
   */
  static async generateDocumentNumber(branchCode, date, session) {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const yearThai = year + 543; // ‡∏õ‡∏µ‡∏û‡∏∏‡∏ó‡∏ò‡∏®‡∏±‡∏Å‡∏£‡∏≤‡∏ä

    // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö: RV-BRANCH-YYYYMM-XXXX
    const prefix = `RV-${branchCode}-${yearThai}${month}`;

    // ‡πÉ‡∏ä‡πâ Counter collection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö running number
    // ‡πÉ‡∏ä‡πâ key ‡πÅ‡∏•‡∏∞ reference_value ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
    const counter = await Counter.findOneAndUpdate(
      {
        key: 'receipt_voucher',
        reference_value: prefix
      },
      { $inc: { seq: 1 } },
      {
        new: true,
        upsert: true,
        session
      }
    );

    const sequence = String(counter.seq).padStart(4, '0');
    return `${prefix}-${sequence}`;
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Batch
   */
  static async createBatchFromHistories(filters = {}, options = {}) {
    try {
      console.log('üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Batch...');

      // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      const query = {
        change_type: 'OUT',
        reason: { $in: ['‡∏Ç‡∏≤‡∏¢ POS', '‡∏Ç‡∏≤‡∏¢‡πÅ‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô', '‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'] },
        hasReceiptVoucher: { $ne: true },
        ...filters
      };

      // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
      const histories = await BranchStockHistory.find(query)
        .limit(options.limit || 100)
        .sort({ performed_at: 1 });

      console.log(`üìä ‡∏û‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: ${histories.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

      const results = {
        success: [],
        failed: [],
        total: histories.length
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
      for (const history of histories) {
        try {
          const result = await this.createFromBranchStockHistory(history._id, options);

          if (result.success) {
            results.success.push({
              historyId: history._id,
              documentNumber: result.data.documentNumber
            });
          } else {
            results.failed.push({
              historyId: history._id,
              error: result.error
            });
          }
        } catch (error) {
          results.failed.push({
            historyId: history._id,
            error: error.message
          });
        }

        // Delay ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
        if (options.delay) {
          await new Promise(resolve => setTimeout(resolve, options.delay));
        }
      }

      console.log(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${results.success.length}/${results.total}`);
      console.log(`‚ùå ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${results.failed.length}/${results.total}`);

      return results;

    } catch (error) {
      console.error('‚ùå Batch creation error:', error);
      throw error;
    }
  }

  /**
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô auto‚Äêcreation ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏¢‡∏Å
   */
  static async startAutoCreationJob(branchId, types, userId) {
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å delegate ‡πÑ‡∏õ‡∏ó‡∏µ‡πà receiptVoucherAutoCreate.js
    const AutoCreateService = require('./receiptVoucherAutoCreate');
    return await AutoCreateService.startAutoCreationJob(branchId, types, userId);
  }
}

module.exports = ReceiptVoucherService;
