/**
 * @file receiptValidationRoutes.js
 * @description Routes for validating Receipt data completeness
 * @version 1.0.0
 * @date 2025-01-31
 */

const express = require('express');
const router = express.Router();
const Receipt = require('../models/Receipt');

/**
 * POST /api/receipt/validate
 * Validate receipt data before saving to database
 */
router.post('/validate', async (req, res) => {
  try {
    console.log('üîç Validating Receipt data...');
    const receiptData = req.body;

    // Validation results
    const validation = {
      isValid: true,
      missingFields: [],
      warnings: [],
      recommendations: [],
      completeness: {
        total: 0,
        present: 0,
        percentage: 0
      }
    };

    // Required fields check
    const requiredFields = [
      { field: 'receiptNumber', path: 'receiptNumber', description: '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à' },
      { field: 'customer.name', path: 'customer.name', description: '‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' },
      { field: 'items', path: 'items', description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤' },
      { field: 'summary', path: 'summary', description: '‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞' }
    ];

    // Optional but recommended fields
    const recommendedFields = [
      { field: 'customer.taxId', path: 'customer.taxId', description: '‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ' },
      { field: 'customer.phone', path: 'customer.phone', description: '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå' },
      { field: 'customer.address', path: 'customer.address', description: '‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà' },
      { field: 'signatures.customer', path: 'signatures.customer', description: '‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤' },
      { field: 'signatures.salesperson', path: 'signatures.salesperson', description: '‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô' },
      { field: 'company', path: 'company', description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó' },
      { field: 'branch', path: 'branch', description: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤' }
    ];

    // All fields for completeness calculation
    const allFields = [...requiredFields, ...recommendedFields];
    validation.completeness.total = allFields.length;

    // Check required fields
    for (const field of requiredFields) {
      const value = getNestedValue(receiptData, field.path);
      if (!value || (Array.isArray(value) && value.length === 0)) {
        validation.isValid = false;
        validation.missingFields.push({
          field: field.field,
          description: field.description,
          severity: 'error'
        });
      } else {
        validation.completeness.present++;
      }
    }

    // Check recommended fields
    for (const field of recommendedFields) {
      const value = getNestedValue(receiptData, field.path);
      if (!value || (Array.isArray(value) && value.length === 0)) {
        validation.warnings.push({
          field: field.field,
          description: field.description,
          severity: 'warning',
          impact: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏≠‡∏≤‡∏à‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•'
        });
      } else {
        validation.completeness.present++;
      }
    }

    // Calculate completeness percentage
    validation.completeness.percentage = Math.round(
      (validation.completeness.present / validation.completeness.total) * 100
    );

    // Additional validations
    validateCustomerData(receiptData.customer, validation);
    validateItemsData(receiptData.items, validation);
    validateSummaryData(receiptData.summary, validation);
    validateSignatures(receiptData.signatures, validation);

    // Recommendations based on analysis
    generateRecommendations(receiptData, validation);

    console.log('‚úÖ Receipt data validation completed:', {
      isValid: validation.isValid,
      completeness: validation.completeness.percentage + '%',
      missingFields: validation.missingFields.length,
      warnings: validation.warnings.length
    });

    res.json({
      success: true,
      data: validation,
      summary: {
        status: validation.isValid ? 'valid' : 'invalid',
        completeness: validation.completeness.percentage,
        issues: validation.missingFields.length + validation.warnings.length
      }
    });

  } catch (error) {
    console.error('‚ùå Error validating receipt data:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
      details: error.message
    });
  }
});

/**
 * GET /api/receipt/schema
 * Get Receipt schema structure for frontend validation
 */
router.get('/schema', (req, res) => {
  try {
    const schema = {
      required: [
        'receiptNumber',
        'customer.name',
        'items',
        'summary'
      ],
      optional: [
        'documentType',
        'receiptType',
        'issueDate',
        'contractNo',
        'quotationNumber',
        'customer.taxId',
        'customer.phone',
        'customer.address',
        'signatures',
        'company',
        'branch'
      ],
      customerFields: [
        'name', 'fullName', 'prefix', 'first_name', 'last_name',
        'taxId', 'tax_id', 'phone', 'phone_number', 'email', 'address', 'age'
      ],
      itemFields: [
        'product', 'name', 'brand', 'imei', 'quantity', 'unitPrice',
        'totalPrice', 'downAmount', 'termCount', 'installmentAmount'
      ],
      summaryFields: [
        'subtotal', 'discount', 'beforeTax', 'tax', 'netTotal', 'total'
      ]
    };

    res.json({
      success: true,
      data: schema
    });

  } catch (error) {
    console.error('‚ùå Error getting receipt schema:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
    });
  }
});

// Helper functions
function getNestedValue(obj, path) {
  return path.split('.').reduce((current, key) => {
    return current && current[key] !== undefined ? current[key] : null;
  }, obj);
}

function validateCustomerData(customer, validation) {
  if (!customer) return;

  // Check for either taxId or tax_id
  if (!customer.taxId && !customer.tax_id) {
    validation.recommendations.push({
      type: 'customer',
      message: '‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏ú‡∏π‡πâ‡πÄ‡∏™‡∏µ‡∏¢‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£'
    });
  }

  // Check for phone number in either format
  if (!customer.phone && !customer.phone_number) {
    validation.recommendations.push({
      type: 'customer',
      message: '‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'
    });
  }

  // Validate name completeness
  if (!customer.fullName && (!customer.first_name || !customer.last_name)) {
    validation.warnings.push({
      field: 'customer.name',
      description: '‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå',
      severity: 'warning'
    });
  }
}

function validateItemsData(items, validation) {
  if (!Array.isArray(items) || items.length === 0) {
    validation.missingFields.push({
      field: 'items',
      description: '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤',
      severity: 'error'
    });
    return;
  }

  items.forEach((item, index) => {
    if (!item.name) {
      validation.warnings.push({
        field: `items[${index}].name`,
        description: `‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•`,
        severity: 'warning'
      });
    }

    if (!item.quantity || item.quantity <= 0) {
      validation.warnings.push({
        field: `items[${index}].quantity`,
        description: `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`,
        severity: 'warning'
      });
    }

    if (!item.unitPrice || item.unitPrice <= 0) {
      validation.warnings.push({
        field: `items[${index}].unitPrice`,
        description: `‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà ${index + 1} ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á`,
        severity: 'warning'
      });
    }
  });
}

function validateSummaryData(summary, validation) {
  if (!summary) return;

  if (summary.total !== summary.netTotal && summary.netTotal) {
    validation.warnings.push({
      field: 'summary.total',
      description: '‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏¢‡∏≠‡∏î‡∏™‡∏∏‡∏ó‡∏ò‡∏¥',
      severity: 'warning'
    });
  }

  if (summary.tax && summary.tax > 0 && !summary.beforeTax) {
    validation.recommendations.push({
      type: 'summary',
      message: '‡∏Ñ‡∏ß‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡∏†‡∏≤‡∏©‡∏µ'
    });
  }
}

function validateSignatures(signatures, validation) {
  if (!signatures) return;

  if (!signatures.customer) {
    validation.recommendations.push({
      type: 'signatures',
      message: '‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
    });
  }

  if (!signatures.salesperson) {
    validation.recommendations.push({
      type: 'signatures',
      message: '‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏±‡∏ö‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£'
    });
  }
}

function generateRecommendations(receiptData, validation) {
  // Check PDF generation readiness
  if (validation.missingFields.length === 0) {
    validation.recommendations.push({
      type: 'pdf',
      message: '‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF'
    });
  } else {
    validation.recommendations.push({
      type: 'pdf',
      message: '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå'
    });
  }

  // Check email readiness
  if (receiptData.customer?.email) {
    validation.recommendations.push({
      type: 'email',
      message: '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• (‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)'
    });
  } else {
    validation.recommendations.push({
      type: 'email',
      message: '‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏î‡πâ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤)'
    });
  }

  // Completeness recommendations
  if (validation.completeness.percentage >= 90) {
    validation.recommendations.push({
      type: 'completeness',
      message: 'üéâ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏°‡∏≤‡∏Å ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏∏‡∏Å‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö'
    });
  } else if (validation.completeness.percentage >= 70) {
    validation.recommendations.push({
      type: 'completeness',
      message: 'üëç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°'
    });
  } else {
    validation.recommendations.push({
      type: 'completeness',
      message: '‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô'
    });
  }
}

module.exports = router;
