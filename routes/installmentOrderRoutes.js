/**
 * routes/installmentOrderRoutes.js - Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• InstallmentOrder
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≠‡∏ô
 */

const express = require('express');
const router = express.Router();
const mongoose = require('mongoose');

// Import models
const InstallmentOrder = require('../models/Installment/InstallmentOrder');
const Customer = require('../models/Customer/Customer');
const BranchStock = require('../models/POS/BranchStock');
const BranchStockHistory = require('../models/POS/BranchStockHistory');

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error handling
const asyncHandler = (fn) => (req, res, next) => {
  Promise.resolve(fn(req, res, next)).catch(next);
};

/**
 * GET /api/installment-orders
 * ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */
router.get('/', asyncHandler(async (req, res) => {
  console.log('üì± GET /api/installment-orders');

  try {
    const {
      page = 1,
      limit = 20,
      branchCode,
      customerPhone,
      customerName,
      contractNo,
      status,
      startDate,
      endDate
    } = req.query;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query
    const query = {};

    if (branchCode) {
      query.branch_code = branchCode;
    }

    if (customerPhone) {
      query['customer_info.phone'] = { $regex: customerPhone, $options: 'i' };
    }

    if (customerName) {
      query.$or = [
        { 'customer_info.firstName': { $regex: customerName, $options: 'i' } },
        { 'customer_info.lastName': { $regex: customerName, $options: 'i' } }
      ];
    }

    if (contractNo) {
      query.contractNo = { $regex: contractNo, $options: 'i' };
    }

    if (status) {
      query.status = status;
    }

    // Date range filter
    if (startDate || endDate) {
      query.createdAt = {};
      if (startDate) query.createdAt.$gte = new Date(startDate);
      if (endDate) query.createdAt.$lte = new Date(endDate);
    }

    // Execute query with pagination
    const skip = (page - 1) * limit;

    const [orders, totalCount] = await Promise.all([
      InstallmentOrder.find(query)
        .populate('customer')
        .sort({ createdAt: -1 })
        .skip(skip)
        .limit(parseInt(limit))
        .lean(),
      InstallmentOrder.countDocuments(query)
    ]);

    // Format response data
    const formattedOrders = orders.map(order => ({
      _id: order._id,
      contractNo: order.contractNo,
      planType: order.planType,
      installmentType: order.installmentType,
      createdAt: order.createdAt,
      customerName: `${order.customer_info?.prefix || ''} ${order.customer_info?.firstName || ''} ${order.customer_info?.lastName || ''}`.trim(),
      customerPhone: order.customer_info?.phone,
      customerTaxId: order.customer_info?.taxId,
      totalAmount: order.totalAmount,
      finalTotalAmount: order.finalTotalAmount,
      downPayment: order.downPayment,
      monthlyPayment: order.monthlyPayment,
      installmentCount: order.installmentCount,
      items: order.items,
      branch_code: order.branch_code,
      status: order.status,
      hasWarranty: order.hasWarranty,
      warrantyStartDate: order.warrantyStartDate,
      warrantyEndDate: order.warrantyEndDate
    }));

    res.json({
      success: true,
      data: formattedOrders,
      pagination: {
        currentPage: parseInt(page),
        totalPages: Math.ceil(totalCount / limit),
        totalDocs: totalCount,
        limit: parseInt(limit),
        hasNextPage: page * limit < totalCount,
        hasPrevPage: page > 1
      }
    });

  } catch (error) {
    console.error('‚ùå Error getting installment orders:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô',
      error: error.message
    });
  }
}));

/**
 * GET /api/installment-orders/:id
 * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏ï‡∏≤‡∏° ID
 */
router.get('/:id', asyncHandler(async (req, res) => {
  console.log('üì± GET /api/installment-orders/:id');

  try {
    const { id } = req.params;

    const order = await InstallmentOrder.findById(id)
      .populate('customer')
      .lean();

    if (!order) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô'
      });
    }

    // Format response - ‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
    const formattedOrder = {
      _id: order._id,
      contractNo: order.contractNo,
      planType: order.planType,
      installmentType: order.installmentType,
      createdAt: order.createdAt,

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (customer_info) ‡∏ó‡∏µ‡πà frontend ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
      customer_info: order.customer_info,

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ)
      customer: {
        name: `${order.customer_info?.prefix || ''} ${order.customer_info?.firstName || ''} ${order.customer_info?.lastName || ''}`.trim(),
        phone: order.customer_info?.phone,
        taxId: order.customer_info?.taxId,
        email: order.customer_info?.email,
        age: order.customer_info?.age,
        address: order.customer_info?.address,
        contactAddress: order.customer_info?.contactAddress
      },

      items: order.items || [],
      amounts: {
        subTotal: order.subTotal || 0,
        totalAmount: order.totalAmount || 0,
        finalTotalAmount: order.finalTotalAmount || 0,
        promotionDiscount: order.promotionDiscount || 0,
        downPayment: order.downPayment || 0,
        monthlyPayment: order.monthlyPayment || 0,
        installmentCount: order.installmentCount || 0
      },

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏Ñ‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö root ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
      subTotal: order.subTotal || 0,
      totalAmount: order.totalAmount || 0,
      finalTotalAmount: order.finalTotalAmount || 0,
      promotionDiscount: order.promotionDiscount || 0,
      downPayment: order.downPayment || 0,
      monthlyPayment: order.monthlyPayment || 0,
      installmentCount: order.installmentCount || 0,

      branch_code: order.branch_code,
      staffName: order.staffName,
      salesperson: order.salesperson,
      status: order.status,
      hasWarranty: order.hasWarranty,
      warrantyStartDate: order.warrantyStartDate,
      warrantyEndDate: order.warrantyEndDate,
      eligibleServices: order.eligibleServices,
      serviceUsageCount: order.serviceUsageCount,
      payments: order.payments,
      paidAmount: order.paidAmount,
      appliedPromotions: order.appliedPromotions
    };

    res.json({
      success: true,
      data: formattedOrder
    });

  } catch (error) {
    console.error('‚ùå Error getting installment order detail:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô',
      error: error.message
    });
  }
}));

/**
 * GET /api/installment-orders/search
 * ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
 */
router.get('/search', asyncHandler(async (req, res) => {
  console.log('üîç GET /api/installment-orders/search');

  try {
    const { q, phone, taxId, customerName, branchCode } = req.query;

    if (!q && !phone && !taxId && !customerName) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤'
      });
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á query
    const searchQueries = [];

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ q (general search)
    if (q) {
      if (/^\d+$/.test(q)) {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        searchQueries.push(
          { 'customer_info.phone': { $regex: q, $options: 'i' } }
        );
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        searchQueries.push(
          { 'customer_info.firstName': { $regex: q, $options: 'i' } },
          { 'customer_info.lastName': { $regex: q, $options: 'i' } }
        );
      }
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞
    if (phone) {
      searchQueries.push(
        { 'customer_info.phone': { $regex: phone, $options: 'i' } }
      );
    }

    if (taxId) {
      searchQueries.push(
        { 'customer_info.taxId': { $regex: taxId, $options: 'i' } }
      );
    }

    if (customerName) {
      searchQueries.push(
        { 'customer_info.firstName': { $regex: customerName, $options: 'i' } },
        { 'customer_info.lastName': { $regex: customerName, $options: 'i' } }
      );
    }

    const query = { $or: searchQueries };

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏™‡∏≤‡∏Ç‡∏≤
    if (branchCode) {
      query.branch_code = branchCode;
    }

    // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const orders = await InstallmentOrder.find(query)
      .populate('customer')
      .sort({ createdAt: -1 })
      .limit(50)
      .lean();

    // Format ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    const serviceEligibleOrders = orders.map(order => ({
      purchaseId: order._id,
      purchaseType: 'installment',
      purchaseDate: order.createdAt,
      contractNumber: order.contractNo,
      customer: {
        id: order.customer?._id || order._id,
        name: `${order.customer_info?.prefix || ''} ${order.customer_info?.firstName || ''} ${order.customer_info?.lastName || ''}`.trim(),
        phone: order.customer_info?.phone,
        taxId: order.customer_info?.taxId,
        email: order.customer_info?.email,
        customerType: 'individual'
      },
      items: (order.items || []).map(item => ({
        name: item.name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
        qty: item.qty || 1,
        imei: item.imei || '',
        downAmount: item.downAmount || 0,
        payUseInstallment: item.payUseInstallment || 0,
        payUseInstallmentCount: item.payUseInstallmentCount || 0
      })),
      amounts: {
        subTotal: order.subTotal || 0,
        totalAmount: order.totalAmount || 0,
        finalTotalAmount: order.finalTotalAmount || 0,
        promotionDiscount: order.promotionDiscount || 0,
        downPayment: order.downPayment || 0,
        monthlyPayment: order.monthlyPayment || 0,
        installmentCount: order.installmentCount || 0
      },
      warranty: {
        hasWarranty: order.hasWarranty !== false, // default true
        startDate: order.warrantyStartDate || order.createdAt,
        endDate: order.warrantyEndDate || new Date(new Date(order.createdAt).getTime() + 365 * 24 * 60 * 60 * 1000)
      },
      serviceUsage: order.serviceUsageCount || {},
      branch_code: order.branch_code,
      staffName: order.staffName,
      status: order.status,
      planType: order.planType
    }));

    res.json({
      success: true,
      data: serviceEligibleOrders,
      count: serviceEligibleOrders.length,
      message: serviceEligibleOrders.length > 0
        ? `‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô ${serviceEligibleOrders.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`
        : '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô'
    });

  } catch (error) {
    console.error('‚ùå Error searching installment orders:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô',
      error: error.message
    });
  }
}));

/**
 * GET /api/installment-orders/customer/:customerId
 * ‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á
 */
router.get('/customer/:customerId', asyncHandler(async (req, res) => {
  console.log('üë§ GET /api/installment-orders/customer/:customerId');

  try {
    const { customerId } = req.params;

    const orders = await InstallmentOrder.find({ customer: customerId })
      .populate('customer')
      .sort({ createdAt: -1 })
      .lean();

    res.json({
      success: true,
      data: orders,
      count: orders.length
    });

  } catch (error) {
    console.error('‚ùå Error getting customer installment orders:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏ú‡πà‡∏≠‡∏ô',
      error: error.message
    });
  }
}));

/**
 * GET /api/installment-orders/branch/:branchCode/recent
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤
 */
router.get('/branch/:branchCode/recent', asyncHandler(async (req, res) => {
  console.log('üè¢ GET /api/installment-orders/branch/:branchCode/recent');

  try {
    const { branchCode } = req.params;
    const { limit = 10 } = req.query;

    const recentOrders = await InstallmentOrder.find({ branch_code: branchCode })
      .populate('customer')
      .sort({ createdAt: -1 })
      .limit(parseInt(limit))
      .lean();

    res.json({
      success: true,
      data: recentOrders,
      count: recentOrders.length
    });

  } catch (error) {
    console.error('‚ùå Error getting recent installment orders:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î',
      error: error.message
    });
  }
}));

/**
 * GET /api/installment-orders/warranty-eligible
 * ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô
 */
router.get('/warranty-eligible', asyncHandler(async (req, res) => {
  console.log('üõ°Ô∏è GET /api/installment-orders/warranty-eligible');

  try {
    const { branchCode, customerPhone } = req.query;

    // ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô (‡∏†‡∏≤‡∏¢‡πÉ‡∏ô 1 ‡∏õ‡∏µ)
    const oneYearAgo = new Date();
    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);

    const query = {
      createdAt: { $gte: oneYearAgo },
      hasWarranty: { $ne: false } // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà false (‡∏£‡∏ß‡∏° true ‡πÅ‡∏•‡∏∞ undefined)
    };

    if (branchCode) {
      query.branch_code = branchCode;
    }

    if (customerPhone) {
      query['customer_info.phone'] = { $regex: customerPhone, $options: 'i' };
    }

    const eligibleOrders = await InstallmentOrder.find(query)
      .populate('customer')
      .sort({ createdAt: -1 })
      .lean();

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏´‡∏°‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô
    const ordersWithWarranty = eligibleOrders.map(order => {
      const warrantyEndDate = order.warrantyEndDate ||
        new Date(new Date(order.createdAt).getTime() + 365 * 24 * 60 * 60 * 1000);

      return {
        ...order,
        warrantyEndDate,
        warrantyValid: new Date() <= warrantyEndDate,
        warrantyDaysRemaining: Math.max(0, Math.ceil((warrantyEndDate - new Date()) / (1000 * 60 * 60 * 24)))
      };
    });

    res.json({
      success: true,
      data: ordersWithWarranty,
      count: ordersWithWarranty.length
    });

  } catch (error) {
    console.error('‚ùå Error getting warranty eligible orders:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô',
      error: error.message
    });
  }
}));

/**
 * PUT /api/installment-orders/:id/service-usage
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô
 */
router.put('/:id/service-usage', asyncHandler(async (req, res) => {
  console.log('üìù PUT /api/installment-orders/:id/service-usage');

  try {
    const { id } = req.params;
    const { serviceType, increment = 1 } = req.body;

    if (!serviceType) {
      return res.status(400).json({
        success: false,
        message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£'
      });
    }

    const order = await InstallmentOrder.findById(id);

    if (!order) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô'
      });
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
    if (!order.serviceUsageCount) {
      order.serviceUsageCount = new Map();
    }

    const currentUsage = order.serviceUsageCount.get(serviceType) || 0;
    order.serviceUsageCount.set(serviceType, currentUsage + increment);

    await order.save();

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      data: {
        serviceType,
        previousUsage: currentUsage,
        newUsage: currentUsage + increment
      }
    });

  } catch (error) {
    console.error('‚ùå Error updating service usage:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£',
      error: error.message
    });
  }
}));

/**
 * GET /api/installment-orders/statistics
 * ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô
 */
router.get('/statistics', asyncHandler(async (req, res) => {
  console.log('üìä GET /api/installment-orders/statistics');

  try {
    const { branchCode, startDate, endDate } = req.query;

    const matchQuery = {};

    if (branchCode) {
      matchQuery.branch_code = branchCode;
    }

    if (startDate || endDate) {
      matchQuery.createdAt = {};
      if (startDate) matchQuery.createdAt.$gte = new Date(startDate);
      if (endDate) matchQuery.createdAt.$lte = new Date(endDate);
    }

    const stats = await InstallmentOrder.aggregate([
      { $match: matchQuery },
      {
        $group: {
          _id: '$branch_code',
          totalOrders: { $sum: 1 },
          totalAmount: { $sum: '$finalTotalAmount' },
          avgAmount: { $avg: '$finalTotalAmount' },
          totalDownPayment: { $sum: '$downPayment' },
          avgMonthlyPayment: { $avg: '$monthlyPayment' },
          uniqueCustomers: { $addToSet: '$customer' }
        }
      },
      {
        $project: {
          branchCode: '$_id',
          totalOrders: 1,
          totalAmount: 1,
          avgAmount: { $round: ['$avgAmount', 2] },
          totalDownPayment: 1,
          avgMonthlyPayment: { $round: ['$avgMonthlyPayment', 2] },
          uniqueCustomerCount: { $size: '$uniqueCustomers' }
        }
      }
    ]);

    res.json({
      success: true,
      data: stats
    });

  } catch (error) {
    console.error('‚ùå Error getting installment order statistics:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô',
      error: error.message
    });
  }
}));

/**
 * GET /api/installment-orders/payment-status/:id
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô
 */
router.get('/payment-status/:id', asyncHandler(async (req, res) => {
  console.log('üí≥ GET /api/installment-orders/payment-status/:id');

  try {
    const { id } = req.params;

    const order = await InstallmentOrder.findById(id)
      .populate('installmentPayments')
      .lean();

    if (!order) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô'
      });
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    const totalPayments = order.payments?.reduce((sum, payment) => sum + payment.amount, 0) || 0;
    const remainingAmount = (order.finalTotalAmount || order.totalAmount) - totalPayments;
    const paymentProgress = totalPayments / (order.finalTotalAmount || order.totalAmount) * 100;

    res.json({
      success: true,
      data: {
        contractNo: order.contractNo,
        totalAmount: order.finalTotalAmount || order.totalAmount,
        paidAmount: totalPayments,
        remainingAmount: Math.max(0, remainingAmount),
        paymentProgress: Math.min(100, paymentProgress),
        payments: order.payments || [],
        status: order.status,
        monthlyPayment: order.monthlyPayment,
        installmentCount: order.installmentCount,
        completedPayments: order.payments?.length || 0
      }
    });

  } catch (error) {
    console.error('‚ùå Error getting payment status:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      error: error.message
    });
  }
}));

/**
 * PATCH /api/installment-orders/:id
 * ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
 */
router.patch('/:id', asyncHandler(async (req, res) => {
  console.log('üîß PATCH /api/installment-orders/:id - Updating missing contract data');

  try {
    const { id } = req.params;
    const updateData = req.body;

    console.log('üîç Update data received:', {
      contractId: id,
      updateFields: Object.keys(updateData),
      totalAmount: updateData.totalAmount,
      remainingAmount: updateData.remainingAmount,
      nextPaymentDate: updateData.nextPaymentDate,
      dueDate: updateData.dueDate
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ ID ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!mongoose.Types.ObjectId.isValid(id)) {
      return res.status(400).json({
        success: false,
        message: '‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
      });
    }

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• order ‡πÄ‡∏î‡∏¥‡∏°‡∏Å‡πà‡∏≠‡∏ô update
    const existingOrder = await InstallmentOrder.findById(id);
    if (!existingOrder) {
      return res.status(404).json({
        success: false,
        message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï'
      });
    }

    // üö®üö®üö® ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const needsStockDeduction = !existingOrder.isStockCommitted && existingOrder.items && existingOrder.items.length > 0;

    if (needsStockDeduction) {
      console.log('üö®üö®üö® STOCK DEDUCTION NEEDED - Contract has items but stock not committed yet');
      console.log('üö®üö®üö® Processing stock deduction for contract:', existingOrder.contractNo);

      try {
        // ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        for (const item of existingOrder.items) {
          // ‡πÉ‡∏ä‡πâ qty ‡πÅ‡∏ó‡∏ô quantity ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á productId ‡πÅ‡∏•‡∏∞ IMEI
          const quantity = item.qty || item.quantity || 1;
          const productIdentifier = item.productId || item.imei;

          if (productIdentifier && quantity > 0) {
            console.log(`üö®üö®üö® Deducting stock for product: ${item.name || productIdentifier}, IMEI: ${item.imei || 'N/A'}, quantity: ${quantity}`);

            // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ BranchStock ‡∏ï‡∏≤‡∏° IMEI ‡∏´‡∏£‡∏∑‡∏≠ barcode (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ IMEI)
            let branchStock = null;

            if (item.imei) {
              // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ IMEI ‡∏´‡∏£‡∏∑‡∏≠ barcode
              branchStock = await BranchStock.findOne({
                $or: [
                  { imei: item.imei, branch_code: existingOrder.branch_code },
                  { barcode: item.imei, branch_code: existingOrder.branch_code }
                ]
              });
            }

            if (branchStock) {
              const oldStock = branchStock.stock_value;
              const newStock = Math.max(0, oldStock - quantity);

              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ï‡πä‡∏≠‡∏Å
              branchStock.stock_value = newStock;
              branchStock.lastUpdated = new Date();
              await branchStock.save();

              console.log(`‚úÖ Stock deducted: ${item.name || item.productName || item.productId}`);
              console.log(`   Old stock: ${oldStock}, Deducted: ${quantity}, New stock: ${newStock}`);

              // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
              if (BranchStockHistory) {
                await BranchStockHistory.create({
                  branchStockId: branchStock._id,
                  branchId: existingOrder.branch_code,
                  changeType: 'sale',
                  changeAmount: -quantity,
                  previousValue: oldStock,
                  newValue: newStock,
                  reference: `INSTALLMENT-${existingOrder.contractNo}`,
                  performedBy: 'SYSTEM',
                  notes: `‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô ${existingOrder.contractNo}`
                });
              }
            } else {
              console.warn(`‚ö†Ô∏è BranchStock not found for product: ${item.name || productIdentifier}`);
            }
          }
        }

        // ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
        updateData.isStockCommitted = true;
        console.log('üö®üö®üö® Stock deduction completed, marking isStockCommitted = true');

      } catch (stockError) {
        console.error('‚ùå Error during stock deduction:', stockError);
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ error ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ update ‡πÅ‡∏ï‡πà‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
        console.warn('‚ö†Ô∏è Stock deduction failed but continuing with order update');
      }
    } else {
      if (existingOrder.isStockCommitted) {
        console.log('‚ÑπÔ∏è Stock already committed for this order');
      } else {
        console.log('‚ÑπÔ∏è No items to deduct stock for');
      }
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const updatedOrder = await InstallmentOrder.findByIdAndUpdate(
      id,
      {
        $set: updateData,
        updatedAt: new Date()
      },
      {
        new: true, // ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
        runValidators: true // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation
      }
    );

    console.log('‚úÖ InstallmentOrder updated successfully:', {
      contractId: id,
      totalAmount: updatedOrder.totalAmount,
      remainingAmount: updatedOrder.remainingAmount,
      nextPaymentDate: updatedOrder.nextPaymentDate,
      dueDate: updatedOrder.dueDate,
      isStockCommitted: updatedOrder.isStockCommitted
    });

    res.json({
      success: true,
      message: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
      data: updatedOrder,
      stockDeducted: needsStockDeduction
    });

  } catch (error) {
    console.error('‚ùå Error updating installment order:', error);
    res.status(500).json({
      success: false,
      message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô',
      error: error.message
    });
  }
}));

module.exports = router;
