/**
 * depositReceiptPdfRoutes.js - Routes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÅ‡∏•‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
 */

const express = require('express');
const router = express.Router();
const DepositReceiptPDFController = require('../controllers/pdf/DepositReceiptPDFController');
const A4PDFController = require('../controllers/pdf/A4PDFController');

// Middleware ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error handling
const asyncHandler = (fn) => (req, res, next) => {
  Promise.resolve(fn(req, res, next)).catch(next);
};

/**
 * POST /api/deposit-receipt-pdf/create
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
 */
router.post('/create', asyncHandler(async (req, res) => {
  console.log('üìÑ POST /api/deposit-receipt-pdf/create');

  try {
    const depositReceiptData = req.body;

    if (!depositReceiptData) {
      return res.status(400).json({
        success: false,
        message: 'Missing deposit receipt data'
      });
    }

    const result = await DepositReceiptPDFController.createDepositReceiptPdf(depositReceiptData);

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${result.fileName}"`);
    res.send(result.buffer);

  } catch (error) {
    console.error('‚ùå Error creating deposit receipt PDF:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create deposit receipt PDF',
      error: error.message
    });
  }
}));

/**
 * GET /api/deposit-receipt-pdf/:id
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏à‡∏≤‡∏Å ID
 */
router.get('/:id', asyncHandler(async (req, res) => {
  console.log('üìÑ GET /api/deposit-receipt-pdf/:id');

  try {
    const { id } = req.params;

    const result = await DepositReceiptPDFController.createDepositReceiptPdfById(id);

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${result.fileName}"`);
    res.send(result.buffer);

  } catch (error) {
    console.error('‚ùå Error creating deposit receipt PDF by ID:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create deposit receipt PDF',
      error: error.message
    });
  }
}));

/**
 * POST /api/deposit-receipt-pdf/:id/email
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á PDF ‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥‡∏ó‡∏≤‡∏á Email
 */
router.post('/:id/email', asyncHandler(async (req, res) => {
  console.log('üìß POST /api/deposit-receipt-pdf/:id/email');

  try {
    const { id } = req.params;
    const emailData = req.body;

    if (!emailData.to) {
      return res.status(400).json({
        success: false,
        message: 'Email recipient is required'
      });
    }

    const result = await DepositReceiptPDFController.generateAndEmailDepositReceipt(id, emailData);

    res.json(result);

  } catch (error) {
    console.error('‚ùå Error emailing deposit receipt PDF:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to email deposit receipt PDF',
      error: error.message
    });
  }
}));

/**
 * POST /api/deposit-receipt-pdf/:id/create-related
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤, ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ)
 */
router.post('/:id/create-related', asyncHandler(async (req, res) => {
  console.log('üìÑ POST /api/deposit-receipt-pdf/:id/create-related');

  try {
    const { id } = req.params;
    const options = req.body || {};

    const result = await DepositReceiptPDFController.createRelatedDocuments(id, options);

    res.json(result);

  } catch (error) {
    console.error('‚ùå Error creating related documents:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create related documents',
      error: error.message
    });
  }
}));

/**
 * GET /api/deposit-receipt-pdf/:id/navigation-data/:saleType
 * ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢‡∏™‡∏î/‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô
 */
router.get('/:id/navigation-data/:saleType', asyncHandler(async (req, res) => {
  console.log('üîÑ GET /api/deposit-receipt-pdf/:id/navigation-data/:saleType');

  try {
    const { id, saleType } = req.params;

    if (!['cash', 'installment'].includes(saleType)) {
      return res.status(400).json({
        success: false,
        message: 'Invalid sale type. Must be "cash" or "installment"'
      });
    }

    const result = await DepositReceiptPDFController.prepareNavigationData(id, saleType);

    res.json(result);

  } catch (error) {
    console.error('‚ùå Error preparing navigation data:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to prepare navigation data',
      error: error.message
    });
  }
}));

/**
 * POST /api/deposit-receipt-pdf/:id/create-quotation
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô)
 */
router.post('/:id/create-quotation', asyncHandler(async (req, res) => {
  console.log('üìã POST /api/deposit-receipt-pdf/:id/create-quotation');

  try {
    const { id } = req.params;

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
    const DepositReceipt = require('../models/DepositReceipt');
    const depositReceipt = await DepositReceipt.findById(id)
      .populate('customer')
      .populate('product')
      .populate('branch')
      .populate('salesperson');

    if (!depositReceipt) {
      return res.status(404).json({
        success: false,
        message: 'Deposit receipt not found'
      });
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
    const quotationData = {
      _id: depositReceipt._id,
      quotationNumber: `QT-${depositReceipt.receiptNumber}`,
      issueDate: depositReceipt.depositDate,
      customer: depositReceipt.customer,
      items: [{
        description: depositReceipt.product?.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
        quantity: 1,
        unitPrice: depositReceipt.product?.price || 0,
        amount: depositReceipt.product?.price || 0,
        imei: depositReceipt.product?.imei
      }],
      subTotal: depositReceipt.product?.price || 0,
      docFee: 500,
      grandTotal: (depositReceipt.product?.price || 0) + 500,
      company: depositReceipt.company || { name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î' },
      branch: depositReceipt.branch,
      salesperson: depositReceipt.salesperson,
      documentType: 'QUOTATION'
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (‡πÉ‡∏ä‡πâ A4PDFController)
    const result = await A4PDFController.createReceiptPdf(quotationData);

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${result.fileName}"`);
    res.send(result.buffer);

  } catch (error) {
    console.error('‚ùå Error creating quotation from deposit receipt:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create quotation',
      error: error.message
    });
  }
}));

/**
 * POST /api/deposit-receipt-pdf/:id/create-receipt
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
 */
router.post('/:id/create-receipt', asyncHandler(async (req, res) => {
  console.log('üßæ POST /api/deposit-receipt-pdf/:id/create-receipt');

  try {
    const { id } = req.params;
    const { documentType = 'RECEIPT' } = req.body; // RECEIPT ‡∏´‡∏£‡∏∑‡∏≠ TAX_INVOICE

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏°‡∏±‡∏î‡∏à‡∏≥
    const DepositReceipt = require('../models/DepositReceipt');
    const depositReceipt = await DepositReceipt.findById(id)
      .populate('customer')
      .populate('product')
      .populate('branch')
      .populate('salesperson');

    if (!depositReceipt) {
      return res.status(404).json({
        success: false,
        message: 'Deposit receipt not found'
      });
    }

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
    const receiptData = {
      _id: depositReceipt._id,
      order_number: `RE-${depositReceipt.receiptNumber}`,
      invoiceNo: `RE-${depositReceipt.receiptNumber}`,
      documentType: documentType,
      saleDate: depositReceipt.depositDate,
      customer: depositReceipt.customer,
      items: [{
        description: `‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå - ${depositReceipt.product?.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'}`,
        quantity: 1,
        unitPrice: depositReceipt.amounts?.depositAmount || 0,
        amount: depositReceipt.amounts?.depositAmount || 0,
        imei: depositReceipt.product?.imei
      }],
      subTotal: depositReceipt.amounts?.depositAmount || 0,
      docFee: 0,
      vatTotal: documentType === 'TAX_INVOICE' ? (depositReceipt.amounts?.depositAmount || 0) * 0.07 : 0,
      grandTotal: documentType === 'TAX_INVOICE' ?
        (depositReceipt.amounts?.depositAmount || 0) * 1.07 :
        (depositReceipt.amounts?.depositAmount || 0),
      company: depositReceipt.company || { name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î' },
      branch: depositReceipt.branch,
      salesperson: depositReceipt.salesperson,
      taxType: documentType === 'TAX_INVOICE' ? 'inclusive' : 'no_vat'
    };

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
    const result = await A4PDFController.createReceiptPdf(receiptData);

    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${result.fileName}"`);
    res.send(result.buffer);

  } catch (error) {
    console.error('‚ùå Error creating receipt from deposit receipt:', error);
    res.status(500).json({
      success: false,
      message: 'Failed to create receipt',
      error: error.message
    });
  }
}));

/**
 * Error handling middleware
 */
router.use((error, req, res, next) => {
  console.error('‚ùå Deposit Receipt PDF Routes Error:', error);

  res.status(error.status || 500).json({
    success: false,
    message: error.message || 'Internal server error',
    error: process.env.NODE_ENV === 'development' ? error.stack : undefined
  });
});

module.exports = router;
