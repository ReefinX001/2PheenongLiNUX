const express = require('express');
const router = express.Router();
const multer = require('multer');
const upload = multer({ dest: 'uploads/' });
const branchStockController = require('../../controllers/branchStockController');
const { findStockByBranch } = require('../../utils/findStockByBranch');
const BranchStock = require('../../models/POS/BranchStock');

// GET /api/branch-stock/overview - ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏ó‡∏∏‡∏Å‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÅ‡∏ö‡∏ö grouped)
router.get('/overview', async (req, res) => {
  try {
    console.log('üîç API called: /api/branch-stock/overview');

    const stocks = await BranchStock.find({ verified: true })
      .populate('supplier', 'name')
      .populate('categoryGroup', 'name unitName')
      .populate('updated_by', 'username')
      .select([
        'branch_code', 'name', 'brand', 'model', 'imei', 'barcode', 'sku',
        'price', 'cost', 'stock_value', 'image', 'unit', 'taxType',
        'supplier', 'categoryGroup', 'updated_by', 'last_updated',
        'stockType', 'verified', 'pending'
      ].join(' '))
      .lean();

    // Group ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡∏≤‡∏° name, brand, model, branch_code
    const groupedStocks = {};

    stocks.forEach(stock => {
      const groupKey = `${stock.branch_code}-${stock.name}-${stock.brand}-${stock.model}`;

      if (!groupedStocks[groupKey]) {
        // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö‡∏ï‡∏≤‡∏° category
        let unit = '‡∏ä‡∏¥‡πâ‡∏ô'; // default
        const categoryName = stock.categoryGroup?.name?.toLowerCase() || '';
        if (categoryName.includes('‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠') || categoryName.includes('‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå') || categoryName.includes('smartphone')) {
          unit = '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á';
        } else if (stock.categoryGroup?.unitName) {
          unit = stock.categoryGroup.unitName;
        }

        groupedStocks[groupKey] = {
          _id: stock._id, // ‡πÉ‡∏ä‡πâ ID ‡∏Ç‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏£‡∏Å
          branch_code: stock.branch_code,
          name: stock.name,
          brand: stock.brand,
          model: stock.model,
          image: stock.image,
          supplier_name: stock.supplier?.name || '',
          category_name: stock.categoryGroup?.name || '',
          unit: unit,
          taxType: stock.taxType,
          last_updated: stock.last_updated,
          updated_by: stock.updated_by?.username || '',

          // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          total_stock: 0,
          total_cost_value: 0,
          average_cost: 0,
          average_price: 0,
          items: [], // ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ IMEI ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß
          has_imei: false
        };
      }

      // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
      const group = groupedStocks[groupKey];
      group.total_stock += stock.stock_value || 0;
      group.total_cost_value += (stock.stock_value || 0) * (stock.cost || 0);

      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ IMEI
      if (stock.imei && stock.imei.trim()) {
        group.has_imei = true;
        group.items.push({
          _id: stock._id,
          imei: stock.imei,
          barcode: stock.barcode,
          sku: stock.sku,
          cost: stock.cost || 0,
          price: stock.price || 0,
          stock_value: stock.stock_value || 0,
          last_updated: stock.last_updated
        });
      } else {
        // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ IMEI ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡πâ‡∏≠‡∏ô
        group.items.push({
          _id: stock._id,
          imei: null,
          barcode: stock.barcode,
          sku: stock.sku,
          cost: stock.cost || 0,
          price: stock.price || 0,
          stock_value: stock.stock_value || 0,
          last_updated: stock.last_updated
        });
      }
    });

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
    const transformedStocks = Object.values(groupedStocks).map(group => {
      const totalItems = group.items.length;
      group.average_cost = totalItems > 0 ?
        group.items.reduce((sum, item) => sum + (item.cost || 0), 0) / totalItems : 0;
      group.average_price = totalItems > 0 ?
        group.items.reduce((sum, item) => sum + (item.price || 0), 0) / totalItems : 0;

      return group;
    });

    console.log(`‚úÖ Found ${stocks.length} stock records, grouped into ${transformedStocks.length} groups`);

    res.json({
      success: true,
      data: transformedStocks,
      total: transformedStocks.length,
      raw_total: stocks.length
    });
  } catch (error) {
    console.error('‚ùå Error in /api/branch-stock/overview:', error);
    res.status(500).json({
      success: false,
      error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πä‡∏≠‡∏Å',
      message: error.message
    });
  }
});

// GET /api/branch-stock/taxType?branch_code=xxx[&imei=yyy][&purchaseType=zzz][&verified=true][&taxRate=7]
router.get('/taxType', async (req, res) => {
  const { branch_code, imei, purchaseType, verified, taxRate } = req.query;

  if (!branch_code) {
    return res.status(400).json({ success: false, error: 'branch_code is required' });
  }

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
  const filter = { branch_code };
  if (imei) {
    filter.imei = imei;
  }
  if (purchaseType) {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô ?purchaseType=installment,cash
    const types = purchaseType.split(',').map(t => t.trim());
    filter.purchaseType = { $in: types };
  }
  if (typeof verified !== 'undefined') {
    // ‡πÅ‡∏õ‡∏•‡∏á "true"/"false" ‡πÄ‡∏õ‡πá‡∏ô boolean
    filter.verified = verified === 'true';
  }
  if (typeof taxRate !== 'undefined') {
    // ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á rate ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏°‡∏≤
    filter.taxRate = Number(taxRate);
  }

  try {
    const stocks = await BranchStock.find(filter)
      .select([
        'imei', 'name', 'image', 'price',
        'downAmount','downInstallment','downInstallmentCount',
        'creditThreshold','payUseInstallment','payUseInstallmentCount',
        'pricePayOff','docFee',
        'taxType','taxRate',            // ‚Üê ‡πÄ‡∏û‡∏¥‡πà‡∏° taxRate ‡πÉ‡∏ô select
        'purchaseType','stock_value','verified','stockType'
      ].join(' '))
      .lean();

    return res.json({ success: true, data: stocks });
  } catch (err) {
    console.error('‚ùå Error get branch-stock/taxType:', err);
    return res.status(500).json({ success: false, error: err.message });
  }
});

/**
 * ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà
 */
router.post('/', branchStockController.createStock);

/**
 * ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà pending=true ‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏≤ stock ‡∏à‡∏£‡∏¥‡∏á
 * POST /api/branch-stock/:id/approve
 */
router.post(
  '/:id/approve',
  // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ middleware ‡∏ï‡∏£‡∏ß‡∏à token ‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡∏£‡∏Å‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏ä‡πà‡∏ô authenticateJWT
  branchStockController.approveStock
);

/**
 * ‚úÖ ‡∏•‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ branch_code
 */
router.post('/decrement', async (req, res) => {
  console.log('üîç API ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: /api/branch-stock/decrement');
  await branchStockController.decrementStock(req, res);
});

/**
 * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤
 *    (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ populate ‡∏ó‡∏±‡πâ‡∏á supplier => name ‡πÅ‡∏•‡∏∞ product_id => name, image)
 */
router.get('/', async (req, res) => {
  try {
    const { branch_code, include_unverified } = req.query;
    const filter = {};

    if (branch_code) {
      filter.branch_code = branch_code;
    }
    if (include_unverified !== '1') {
      filter.verified = true;
    }

    const stocks = await BranchStock.find(filter)
      .populate('supplier', 'name')
      .populate({
        path: 'product_id',
        select: 'name image stockType brand model price cost'
      })
      .select('branch_code name brand model barcode sku imei price cost stock_value verified pending supplier product_id productModel image categoryGroup taxType invoiceNumber poNumber documentNumber stockType created_at updated_at')
      .lean();

    return res.json({ success: true, data: stocks });
  } catch (err) {
    console.error('‚ùå Error get branch-stock:', err);
    return res.status(500).json({ success: false, error: err.message });
  }
});

/**
 * ‚úÖ (‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç) ‡∏î‡∏∂‡∏á‡∏ï‡πâ‡∏ô‡∏ó‡∏∏‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å BranchStock ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ branch_code + poNumber
 *    GET /api/branch-stock/cost?branch_code=xxx&poNumber=yyy
 */
router.get('/cost', branchStockController.getCostByPoNumber);

/**
 * ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÇ‡∏î‡∏¢ `_id`
 */
router.get('/:id', async (req, res) => {
  try {
    const stockId = req.params.id;
    const stock = await BranchStock.findById(stockId).exec();

    if (!stock) {
      return res.status(404).json({ success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏ô‡∏µ‡πâ' });
    }
    return res.json({ success: true, data: stock });
  } catch (err) {
    console.error('‚ùå Error getStockById:', err);
    return res.status(500).json({ success: false, error: err.message });
  }
});

/**
 * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πä‡∏≠‡∏Å
 */
router.patch('/:id', branchStockController.updateStock);

/**
 * ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å
 */
router.patch('/price/:id', branchStockController.updatePrice);

/**
 * ‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏ï‡∏≤‡∏° `_id`
 */
router.delete('/:id', branchStockController.deleteStock);

/**
 * ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
 */
router.post('/find', async (req, res) => {
  try {
    const { branch_code, brand, model } = req.body;

    if (!branch_code || !brand) {
      return res.status(400).json({
        success: false,
        error: '‚ùå ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏ branch_code ‡πÅ‡∏•‡∏∞ brand'
      });
    }

    console.log(`üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ brand:${brand}, model:${model || ''} ‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤: ${branch_code}`);

    const stock = await findStockByBranch(branch_code, { brand, model });

    if (!stock) {
      console.log(`‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (brand:${brand}, model:${model}) ‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ (${branch_code})`);
      return res.status(404).json({
        success: false,
        error: '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î'
      });
    }

    console.log(`‚úÖ ‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ brand:${brand}, model:${model} ‡πÉ‡∏ô‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏™‡∏≤‡∏Ç‡∏≤ (${branch_code})`);
    return res.json({ success: true, data: stock });
  } catch (error) {
    console.error('‚ùå Error:', error);
    return res.status(500).json({
      success: false,
      error: '‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏Ñ‡∏•‡∏±‡∏á'
    });
  }
});

/**
 * POST /api/branch-stock/installment/commit
 * ‡πÄ‡∏≠‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏≠‡∏Å (physical delete) ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ OUT
 */
router.post(
  '/installment/commit',
  branchStockController.commitInstallment
);

/**
 * POST /api/branch-stock/check-boxset
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Boxset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
 */
router.post('/check-boxset', branchStockController.checkBoxsetStock);

/**
 * POST /api/branch-stock/deduct-boxset
 * ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô Boxset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏°‡∏≠‡∏ö
 */
router.post('/deduct-boxset', branchStockController.deductBoxsetStock);

/**
 * GET /api/branch-stock/boxset-status/:contractNo
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏™‡∏ï‡πä‡∏≠‡∏Å Boxset ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏
 */
router.get('/boxset-status/:contractNo', branchStockController.getBoxsetStockStatus);

module.exports = router;
