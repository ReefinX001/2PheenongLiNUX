// printer-service.js - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏ö‡∏ö Real-time Multi-Branch
class PrinterService {
    constructor() {
        // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô multiple instances
        if (window.PrinterServiceInstance) {
            console.warn('‚ö†Ô∏è PrinterService already initialized, reusing existing instance');
            return window.PrinterServiceInstance;
        }

        this.isInitialized = false;
        this.branchData = null;
        this.printerURL = null;
        this.currentBranch = null;

        // Real-time monitoring (‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢)
        this.printerStatus = {
            status: 'unknown',
            message: '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö',
            lastCheck: null,
            isOnline: false
        };

        this.statusCheckInterval = null;
        this.statusCheckFrequency = 60000; // ‚ö° ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 60 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ

        // Callbacks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö status change events
        this.statusChangeCallbacks = [];

        // ‡πÄ‡∏Å‡πá‡∏ö reference ‡πÑ‡∏ß‡πâ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô multiple instances
        window.PrinterServiceInstance = this;

        // üîß ‡πÑ‡∏°‡πà auto-initialize ‡πÉ‡∏ô constructor ‡πÅ‡∏•‡πâ‡∏ß
        console.log('üîß PrinterService instance created (manual initialization required)');
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö - ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÅ‡∏•‡∏∞ setup printer
     */
    async init() {
        if (this.isInitialized) {
            console.log('‚úÖ PrinterService already initialized, skipping...');
            return;
        }

        try {
            console.log('üîß Initializing PrinterService with Real-time Monitoring...');
            await this.detectBranch();
            await this.setupPrinter();

            // ‡πÄ‡∏£‡∏¥‡πà‡∏° real-time monitoring
            this.startRealtimeMonitoring();

            this.isInitialized = true;
            console.log('‚úÖ PrinterService initialized successfully with real-time monitoring');
        } catch (error) {
            console.error('‚ùå PrinterService initialization failed:', error);
        }
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å URL parameter ‡∏´‡∏£‡∏∑‡∏≠ localStorage
     */
    async detectBranch() {
        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å URL parameter
        const urlParams = new URLSearchParams(window.location.search);
        let branchCode = urlParams.get('branch');

        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage
        if (!branchCode) {
            branchCode = localStorage.getItem('currentBranch');
        }

        // ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 3: ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å global variable (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
        if (!branchCode && typeof window.BRANCH_CODE !== 'undefined') {
            branchCode = window.BRANCH_CODE;
        }

        if (branchCode) {
            this.currentBranch = branchCode;
            console.log(`üìç Detected branch: ${branchCode}`);

            // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
            localStorage.setItem('currentBranch', branchCode);

            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å API
            await this.loadBranchData(branchCode);
        } else {
            console.warn('‚ö†Ô∏è No branch detected, using default settings');
        }
    }

    /**
     * ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å API
     */
    async loadBranchData(branchCode) {
        try {
            console.log(`üîç Loading branch data for: ${branchCode}`);

            const response = await fetch('/api/branch');
            if (!response.ok) {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }

            const result = await response.json();
            if (!result.success) {
                throw new Error(result.error || 'Failed to load branch data');
            }

            // ‡∏´‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö branch_code
            this.branchData = result.data.find(branch => branch.branch_code === branchCode);

            if (this.branchData) {
                console.log(`‚úÖ Branch data loaded: ${this.branchData.name}`);
            } else {
                console.warn(`‚ö†Ô∏è Branch ${branchCode} not found in database`);
            }

        } catch (error) {
            console.error('‚ùå Error loading branch data:', error);
            throw error;
        }
    }

    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ printer URL ‡∏ï‡∏≤‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤
     */
    async setupPrinter() {
        if (this.branchData && this.branchData.printerServerUrl) {
            this.printerURL = this.branchData.printerServerUrl;
            console.log(`üñ®Ô∏è Printer URL configured: ${this.printerURL}`);

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            await this.testConnection();
        } else {
            console.warn('‚ö†Ô∏è No printer URL configured for this branch');
        }
    }

    /**
     * ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö printer server
     */
    async testConnection() {
        if (!this.printerURL) {
            return false;
        }

        try {
            console.log(`üîç Testing printer connection: ${this.printerURL}`);
            console.log('üîÑ Using proxy endpoint for printer test');

            const response = await fetch('/api/printer/print', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    image: 'test-connection',
                    printerURL: this.printerURL
                })
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    console.log('‚úÖ Printer connection successful via proxy');
                    return true;
                } else {
                    console.warn(`‚ö†Ô∏è Printer proxy test failed: ${result.error}`);
                    return false;
                }
            } else {
                console.warn(`‚ö†Ô∏è Printer proxy responded with status: ${response.status}`);
                return false;
            }

        } catch (error) {
            console.warn(`‚ö†Ô∏è Printer connection test failed: ${error.message}`);
            return false;
        }
    }

    /**
     * ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏ö‡∏ö real-time
     */
    startRealtimeMonitoring() {
        if (this.statusCheckInterval) {
            clearInterval(this.statusCheckInterval);
        }

        console.log('üïê Starting real-time printer monitoring (60s intervals)...');

        // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö (‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£ cache)
        setTimeout(() => {
            this.checkPrinterStatus();
        }, 2000);

        // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ö‡∏ö interval
        this.statusCheckInterval = setInterval(() => {
            // ‚ö° ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô visible ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if (document.visibilityState === 'visible') {
                this.checkPrinterStatus();
            } else {
                console.log('üì± Page not visible, skipping printer status check');
            }
        }, this.statusCheckFrequency);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° Page Visibility API event listener
        this.setupPageVisibilityListener();
    }

    /**
     * ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Page Visibility API listener
     */
    setupPageVisibilityListener() {
        if (this.visibilityChangeHandler) {
            document.removeEventListener('visibilitychange', this.visibilityChangeHandler);
        }

        this.visibilityChangeHandler = () => {
            if (document.visibilityState === 'visible') {
                console.log('üì± Page became visible, resuming printer monitoring...');
                // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ visible
                this.checkPrinterStatus();
            } else {
                console.log('üì± Page became hidden, printer monitoring will pause...');
            }
        };

        document.addEventListener('visibilitychange', this.visibilityChangeHandler);
    }

    /**
     * ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö real-time
     */
    stopRealtimeMonitoring() {
        if (this.statusCheckInterval) {
            clearInterval(this.statusCheckInterval);
            this.statusCheckInterval = null;
            console.log('üõë Real-time printer monitoring stopped');
        }

        // ‡∏•‡∏ö event listener
        if (this.visibilityChangeHandler) {
            document.removeEventListener('visibilitychange', this.visibilityChangeHandler);
            this.visibilityChangeHandler = null;
        }
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå
     */
    async checkPrinterStatus() {
        if (!this.printerURL) {
            this.updatePrinterStatus('no_printer', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ', false);
            return;
        }

        try {
            // üîß ‡πÉ‡∏ä‡πâ GET /api/printer/status ‡πÅ‡∏ó‡∏ô POST /api/printer/print
            const response = await fetch('/api/printer/status', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                }
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    this.updatePrinterStatus('online', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', true);
                } else {
                    this.updatePrinterStatus('error', `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${result.error}`, false);
                }
            } else {
                this.updatePrinterStatus('error', `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏î‡πâ‡∏ß‡∏¢ status: ${response.status}`, false);
            }

        } catch (error) {
            if (error.name === 'AbortError') {
                this.updatePrinterStatus('timeout', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á (timeout)', false);
            } else {
                this.updatePrinterStatus('offline', `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≠‡∏ü‡πÑ‡∏•‡∏ô‡πå: ${error.message}`, false);
            }
        }
    }

    /**
     * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
     */
    updatePrinterStatus(status, message, isOnline) {
        const previousStatus = this.printerStatus.status;
        const previousOnline = this.printerStatus.isOnline;

        this.printerStatus = {
            status: status,
            message: message,
            lastCheck: new Date(),
            isOnline: isOnline
        };

        // Log ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
        if (previousStatus !== status) {
            if (isOnline) {
                console.log(`‚úÖ Printer status changed: ${message}`);
            } else {
                console.warn(`‚ö†Ô∏è Printer status changed: ${message}`);
            }
        }

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å callbacks ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö status change
        this.statusChangeCallbacks.forEach(callback => {
            try {
                callback(this.printerStatus, { previousStatus, previousOnline });
            } catch (error) {
                console.error('‚ùå Status change callback error:', error);
            }
        });

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI indicators
        this.updateStatusUI();
    }

    /**
     * ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå (‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢)
     */
    updateStatusUI() {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó indicator ‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô UI
        const statusIndicator = document.getElementById('printer-status-indicator');
        if (statusIndicator) {
            statusIndicator.className = `printer-status-indicator ${this.printerStatus.isOnline ? 'online' : 'offline'}`;
            statusIndicator.textContent = this.printerStatus.message;
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó badge
        const statusBadge = document.getElementById('printer-status-badge');
        if (statusBadge) {
            statusBadge.className = `badge ${this.printerStatus.isOnline ? 'badge-success' : 'badge-error'}`;
            statusBadge.textContent = this.printerStatus.isOnline ? 'üü¢ Online' : 'üî¥ Offline';
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó status dot
        const printerStatusDot = document.getElementById('printerStatus');
        if (printerStatusDot) {
            printerStatusDot.className = `w-2 h-2 rounded-full ${this.printerStatus.isOnline ? 'online' : 'offline'}`;
        }

        // ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô (‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢)
        if (window.showToast && typeof window.showToast === 'function') {
            const previousStatus = this.printerStatus.status;
            if (previousStatus !== this.printerStatus.status) {
                if (this.printerStatus.isOnline) {
                    window.showToast('üñ®Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô', 'success');
                } else {
                    window.showToast('‚ö†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏Ç‡∏≤‡∏¢‡πÑ‡∏î‡πâ)', 'warning');
                }
            }
        }
    }

    /**
     * ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢)
     */
    async print(imageData, options = {}) {
        if (!this.isInitialized) {
            console.log('‚è≥ PrinterService not ready, initializing...');
            await this.init();
        }

        if (!imageData) {
            throw new Error('Image data is required');
        }

        // ‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏≤‡∏Å‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡πÑ‡∏î‡πâ
        if (!this.printerStatus.isOnline) {
            console.warn('‚ö†Ô∏è Printer is offline but proceeding with print job...');
            if (window.showToast && typeof window.showToast === 'function') {
                window.showToast('‚ö†Ô∏è ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏•‡∏≠‡∏á‡∏û‡∏¥‡∏°‡∏û‡πå...', 'warning');
            }
        }

        console.log('üñ®Ô∏è Starting print job...');

        const printData = {
            image: imageData,
            branchCode: this.currentBranch,
            printerURL: this.printerURL,
            ...options
        };

        try {
            const response = await fetch('/api/printer/print', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(printData)
            });

            const result = await response.json();

            if (!response.ok) {
                throw new Error(result.error || `HTTP ${response.status}`);
            }

            if (result.success) {
                console.log('‚úÖ Print job completed successfully');
                return result;
            } else {
                throw new Error(result.error || 'Print job failed');
            }

        } catch (error) {
            console.error('‚ùå Print job failed:', error);
            throw error;
        }
    }

    /**
     * ‡πÄ‡∏û‡∏¥‡πà‡∏° callback ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
     */
    onStatusChange(callback) {
        if (typeof callback === 'function') {
            this.statusChangeCallbacks.push(callback);
        }
    }

    /**
     * ‡∏•‡∏ö callback
     */
    removeStatusChange(callback) {
        const index = this.statusChangeCallbacks.indexOf(callback);
        if (index > -1) {
            this.statusChangeCallbacks.splice(index, 1);
        }
    }

    /**
     * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ printer ‡πÅ‡∏ö‡∏ö manual
     */
    async manualStatusCheck() {
        console.log('üîÑ Manual printer status check requested...');
        await this.checkPrinterStatus();
        return this.printerStatus;
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
     */
    getCurrentStatus() {
        return {
            ...this.printerStatus,
            monitoringActive: !!this.statusCheckInterval
        };
    }

    /**
     * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤
     */
    async switchBranch(branchCode) {
        // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£ monitor ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
        this.stopRealtimeMonitoring();

        this.currentBranch = branchCode;
        this.branchData = null;
        this.printerURL = null;
        this.isInitialized = false;

        localStorage.setItem('currentBranch', branchCode);

        await this.init(); // ‡∏à‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏° monitoring ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    }

    /**
     * ‡∏ó‡∏≥‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö
     */
    destroy() {
        this.stopRealtimeMonitoring();
        this.statusChangeCallbacks = [];

        // ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå global reference
        if (window.PrinterServiceInstance === this) {
            window.PrinterServiceInstance = null;
        }

        console.log('üóëÔ∏è PrinterService destroyed');
    }

    /**
     * ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
     */
    getCurrentBranch() {
        return {
            code: this.currentBranch,
            data: this.branchData,
            printerURL: this.printerURL,
            status: this.printerStatus
        };
    }
}

// üåü Global PrinterService Management
(function() {
    'use strict';

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á global instance
    if (!window.PrinterService) {
        window.PrinterService = new PrinterService();
        console.log('üîß Global PrinterService instance created');

        // Auto-initialize ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', () => {
                console.log('üìÑ DOM loaded, initializing PrinterService...');
                window.PrinterService.init();
            });
        } else {
            // ‡∏´‡∏≤‡∏Å‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏•‡∏¢
            console.log('üìÑ DOM already loaded, initializing PrinterService...');
            window.PrinterService.init();
        }
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô multiple initialization
    window.initializePrinterService = function() {
        if (window.PrinterService) {
            return window.PrinterService.init();
        } else {
            console.error('‚ùå PrinterService not available');
            return Promise.reject(new Error('PrinterService not available'));
        }
    };

    // Cleanup function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö page unload
    window.addEventListener('beforeunload', () => {
        if (window.PrinterService && typeof window.PrinterService.destroy === 'function') {
            window.PrinterService.destroy();
        }
    });

    console.log('‚úÖ PrinterService global setup completed');
})();

// Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö module system
if (typeof module !== 'undefined' && module.exports) {
    module.exports = PrinterService;
}
