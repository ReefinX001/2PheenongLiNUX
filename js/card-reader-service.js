/**
 * Card Reader Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ IP ‡∏ï‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤)
 * ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Dynamic Configuration ‡πÅ‡∏•‡∏∞ Fallback Mechanism ‡πÅ‡∏ö‡∏ö Multi-IP
 */

window.CardReaderService = {

  // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ï‡∏≤‡∏° configuration ‡∏™‡∏≤‡∏Ç‡∏≤ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ IP)
  readCard: async function(options = {}) {
    const branchCode = options.branchCode || window.CardReaderConfig?.getCurrentBranchCode() || '00000';
    const source = options.source || 'unknown';

    console.log(`üÜî Starting card read for branch: ${branchCode} (${source})`);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!window.CardReaderConfig?.isCardReaderEnabled(branchCode)) {
      console.warn(`‚ö†Ô∏è Card reader disabled for branch: ${branchCode}`);
      return {
        success: false,
        error: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ'
      };
    }

    // ‡∏î‡∏∂‡∏á URLs ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ IP)
    const urlConfig = window.CardReaderConfig.getCardProxyUrls(branchCode);
    console.log(`üì° Card Proxy URLs for branch ${branchCode}:`, urlConfig);

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Protocol ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡∏¢‡∏∏‡∏ó‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
    const isHTTPS = location.protocol === 'https:';
    console.log(`üîê Protocol check: ${location.protocol} (HTTPS: ${isHTTPS})`);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á attempts ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏∏‡∏Å IP + Main Server API
    const attempts = [];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° local IPs ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö priority (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ HTTP mode)
    if (!isHTTPS) {
      urlConfig.all.forEach((proxy, index) => {
        attempts.push({
          name: `${proxy.name} (${proxy.host})`,
          url: proxy.http,
          timeout: 5000,
          priority: proxy.priority,
          type: 'local'
        });
      });
    }

    if (isHTTPS) {
      // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTPS: ‡πÉ‡∏ä‡πâ Proxy Server ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á Mixed Content Policy
      console.log(`üîê HTTPS Mode: Using server proxy to avoid Mixed Content Policy`);
      attempts.unshift({
        name: 'Card Reader Proxy (HTTPS Safe)',
        url: '/api/cardreader/card-proxy/read-card', // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç path ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        timeout: 8000,
        useAuth: true,
        priority: 0, // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTPS
        type: 'proxy',
        branchCode: branchCode
      });

      // ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTTPS: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô HTTP endpoints ‡πÄ‡∏õ‡πá‡∏ô HTTPS ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ proxy
      urlConfig.all.forEach((proxy, index) => {
        // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô HTTP ‡πÄ‡∏õ‡πá‡∏ô HTTPS ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ proxy endpoint
        const httpsUrl = proxy.http.replace('http://', 'https://');
        attempts.push({
          name: `${proxy.name} (HTTPS - ${proxy.host})`,
          url: httpsUrl,
          timeout: 5000,
          priority: proxy.priority + 1,
          type: 'local-https'
        });
      });
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Main Server API ‡πÄ‡∏õ‡πá‡∏ô fallback ‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
    attempts.push({
      name: 'Main Server API',
      url: '/api/read-card',
      timeout: 8000,
      useAuth: true,
      priority: 999,
      type: 'server'
    });

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority (‡∏ô‡πâ‡∏≠‡∏¢‡πÑ‡∏õ‡∏°‡∏≤‡∏Å)
    attempts.sort((a, b) => a.priority - b.priority);

    console.log(`üîÑ Will try ${attempts.length} endpoints:`, attempts.map(a => a.name));

    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏•‡∏∞ endpoint ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
    let connectionErrors = [];

    for (const [index, attempt] of attempts.entries()) {
        try {
        console.log(`üîÑ Attempt ${index + 1}/${attempts.length}: ${attempt.name}`);
        console.log(`üìç URL: ${attempt.url}`);

        const result = await this._makeCardRequest(attempt.url, {
          timeout: attempt.timeout,
          useAuth: attempt.useAuth,
          branchCode: attempt.branchCode || branchCode,
          attemptName: attempt.name,
          isProxy: attempt.type === 'proxy'
        });

        if (result.success) {
          console.log(`‚úÖ Card read successful via: ${attempt.name} (${attempt.type})`);

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• endpoint ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
          result.usedEndpoint = {
            name: attempt.name,
            url: attempt.url,
            type: attempt.type,
            priority: attempt.priority,
            attemptNumber: index + 1,
            totalAttempts: attempts.length
          };

          return result;
        }

      } catch (error) {
        const errorInfo = {
          name: attempt.name,
          url: attempt.url,
          type: attempt.type,
          error: error.message,
          timestamp: new Date().toISOString()
        };
        connectionErrors.push(errorInfo);

        console.warn(`‚ùå ${attempt.name} failed:`, error.message);

        // ‡πÄ‡∏û‡∏¥‡πà‡∏° debugging information ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö development
        if (attempt.type === 'local' || attempt.type === 'local-https') {
          console.debug(`üîç [${attempt.name}] Network Debug:`, {
            url: attempt.url,
            timeout: attempt.timeout,
            protocol: location.protocol,
            origin: location.origin,
            userAgent: navigator.userAgent.substring(0, 50) + '...'
          });
        }

        continue;
        }
    }

    // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    console.error(`üí• All ${attempts.length} endpoints failed for branch ${branchCode}`);
    console.error('üîç Failed endpoints details:', connectionErrors);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á detailed error message
    const errorSummary = connectionErrors.map(err => `${err.name}: ${err.error}`).join('\n');

    return {
      success: false,
      error: `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ (‡∏•‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ${attempts.length} endpoint) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á`,
      failedEndpoints: attempts.map(a => ({ name: a.name, url: a.url, type: a.type })),
      connectionErrors: connectionErrors,
      debugInfo: {
        branchCode: branchCode,
        totalAttempts: attempts.length,
        protocol: location.protocol,
        timestamp: new Date().toISOString()
      }
    };
  },

  // ‚úÖ ‡∏ó‡∏≥ HTTP Request ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£ (‡πÄ‡∏û‡∏¥‡πà‡∏° logging ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)
  _makeCardRequest: async function(url, options = {}) {
    const { timeout = 5000, useAuth = false, branchCode, attemptName = 'Unknown', isProxy = false } = options;

    const headers = {
      'Content-Type': 'application/json'
    };

    if (useAuth) {
      const token = localStorage.getItem('authToken');
      if (token) {
        headers['Authorization'] = `Bearer ${token}`;
      }
      if (branchCode) {
        // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç encoding error ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ encodeURIComponent
        headers['X-Branch-Code'] = encodeURIComponent(branchCode);
      }
    }

            const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), timeout);

        console.log(`üåê [${attemptName}] Making request to: ${url} (timeout: ${timeout}ms)`);

    try {
      // ‚úÖ Force HTTP for local Card Reader endpoints to prevent HTTPS upgrade
      let requestBody = undefined;

      if (useAuth) {
        requestBody = JSON.stringify({
          branchCode: branchCode,
          // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö proxy endpoint
          ...(isProxy && {
            action: 'read-card',
            source: 'frontend'
          })
        });
      }

      const requestOptions = {
        method: useAuth ? 'POST' : 'GET',
        headers: headers,
        signal: controller.signal,
        body: requestBody,
        // ‚úÖ Add options to prevent HTTPS upgrade for local IPs
        mode: 'cors',
        credentials: 'omit' // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô HTTPS upgrade
      };

      // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á warning ‡∏ñ‡πâ‡∏≤ Browser ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏° upgrade ‡πÄ‡∏õ‡πá‡∏ô HTTPS
      if (url.startsWith('http://') && location.protocol === 'https:') {
        console.warn(`‚ö†Ô∏è [${attemptName}] Mixed content warning: HTTPS page calling HTTP endpoint`);
      }

      const response = await fetch(url, requestOptions);

            clearTimeout(timeoutId);

      console.log(`üì° [${attemptName}] Response: ${response.status} ${response.statusText}`);

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const data = await response.json();
      console.log(`üìã [${attemptName}] Response data:`, data.success ? '‚úÖ Success' : '‚ùå Failed');

      if (!data.success) {
        throw new Error(data.error || 'Unknown error');
      }

      return data;

    } catch (error) {
      clearTimeout(timeoutId);

      if (error.name === 'AbortError') {
        const timeoutError = new Error(`Request timeout after ${timeout}ms`);
        console.error(`‚è∞ [${attemptName}] ${timeoutError.message}`);
        throw timeoutError;
      }

      console.error(`‚ùå [${attemptName}] Error: ${error.message}`);
      throw error;
    }
  },

  // ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö real-time card reading (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ IP)
  connectWebSocket: function(branchCode, callbacks = {}) {
    const { onConnect, onData, onError, onClose } = callbacks;

    if (!window.CardReaderConfig?.isCardReaderEnabled(branchCode)) {
      console.warn(`‚ö†Ô∏è WebSocket disabled for branch: ${branchCode}`);
      return null;
        }

    const urlConfig = window.CardReaderConfig.getCardProxyUrls(branchCode);
    console.log(`üîå Connecting WebSocket for branch ${branchCode}:`, urlConfig);

    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ WebSocket ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö priority
    let wsConnection = null;
    let currentAttempt = 0;

    const tryConnectWebSocket = (proxyIndex = 0) => {
      if (proxyIndex >= urlConfig.all.length) {
        console.error(`‚ùå All WebSocket endpoints failed for branch ${branchCode}`);
        if (onError) onError(new Error('All WebSocket endpoints failed'));
        return null;
            }

      const proxy = urlConfig.all[proxyIndex];
      currentAttempt = proxyIndex + 1;

      console.log(`üîå WebSocket attempt ${currentAttempt}/${urlConfig.all.length}: ${proxy.name} (${proxy.ws})`);

      try {
        const ws = new WebSocket(proxy.ws);

        ws.onopen = function(event) {
          console.log(`‚úÖ WebSocket connected via: ${proxy.name} (${proxy.host})`);
          wsConnection = ws;

          if (onConnect) {
            onConnect({
              ...event,
              endpoint: {
                name: proxy.name,
                url: proxy.ws,
                host: proxy.host,
                priority: proxy.priority,
                attemptNumber: currentAttempt
              }
            });
            }
        };

        ws.onmessage = function(event) {
            try {
            const data = JSON.parse(event.data);
            console.log(`üì® WebSocket data via ${proxy.name}:`, data);
            if (onData) onData(data);
            } catch (error) {
            console.error(`‚ùå Failed to parse WebSocket message from ${proxy.name}:`, error);
        }
        };

        ws.onerror = function(error) {
          console.error(`‚ùå WebSocket error from ${proxy.name}:`, error);

          // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ endpoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          setTimeout(() => {
            tryConnectWebSocket(proxyIndex + 1);
          }, 2000);
        };

        ws.onclose = function(event) {
          console.log(`üîå WebSocket closed from ${proxy.name}:`, event.code, event.reason);

          if (onClose) {
            onClose({
              ...event,
              endpoint: {
                name: proxy.name,
                url: proxy.ws,
                host: proxy.host,
                priority: proxy.priority
              }
            });
          }

          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÅ‡∏ö‡∏ö‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡∏°‡∏µ endpoint ‡∏≠‡∏∑‡πà‡∏ô ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
          if (event.code !== 1000 && proxyIndex + 1 < urlConfig.all.length) {
            console.log(`üîÑ Trying next WebSocket endpoint...`);
            setTimeout(() => {
              tryConnectWebSocket(proxyIndex + 1);
            }, 3000);
                }
        };

        return ws;

        } catch (error) {
        console.error(`‚ùå Failed to create WebSocket for ${proxy.name}:`, error);

        // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ endpoint ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
        setTimeout(() => {
          tryConnectWebSocket(proxyIndex + 1);
        }, 1000);

        return null;
        }
    };

    // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å endpoint ‡πÅ‡∏£‡∏Å
    return tryConnectWebSocket(0);
  },

  // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£ (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ IP)
  checkStatus: async function(branchCode) {
    if (!branchCode) {
      branchCode = window.CardReaderConfig?.getCurrentBranchCode() || '00000';
    }

    console.log(`üè• Checking card reader status for branch: ${branchCode}`);

    if (!window.CardReaderConfig?.isCardReaderEnabled(branchCode)) {
        return {
        success: false,
        status: 'disabled',
        message: '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏µ‡πâ'
      };
    }

    const cardProxyConfig = window.CardReaderConfig.getCardProxyUrls(branchCode);
    const zkConfig = window.CardReaderConfig.getZKDeviceUrls(branchCode);

    const allChecks = [];

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° Card Proxy checks
    cardProxyConfig.all.forEach(proxy => {
      allChecks.push({
        name: `Card Proxy - ${proxy.name}`,
        url: proxy.http.replace('/read-card', '/status'),
        type: 'cardProxy',
        priority: proxy.priority,
        host: proxy.host
      });
    });

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° ZK Device checks
    zkConfig.all.forEach(device => {
      allChecks.push({
        name: `ZK Device - ${device.name}`,
        url: device.status,
        type: 'zkDevice',
        priority: device.priority,
        host: device.host
      });
    });

    console.log(`üîç Will check ${allChecks.length} endpoints for status...`);

    const results = {};
    let onlineCount = 0;
    let totalCount = allChecks.length;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏∏‡∏Å endpoint ‡πÅ‡∏ö‡∏ö parallel
    const checkPromises = allChecks.map(async (check) => {
      try {
        console.log(`üîç Checking: ${check.name} (${check.url})`);

        const response = await fetch(check.url, {
          method: 'GET',
          timeout: 3000
        });

        const result = {
          status: response.ok ? 'online' : 'error',
          code: response.status,
          message: response.ok ? '‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' : `HTTP ${response.status}`,
          host: check.host,
          priority: check.priority,
          type: check.type
        };

        if (response.ok) onlineCount++;

        results[check.name] = result;
        console.log(`${response.ok ? '‚úÖ' : '‚ùå'} ${check.name}: ${result.message}`);

      } catch (error) {
        results[check.name] = {
          status: 'offline',
          message: error.message,
          host: check.host,
          priority: check.priority,
          type: check.type
        };

        console.log(`‚ùå ${check.name}: ${error.message}`);
                }
            });

    await Promise.all(checkPromises);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏£‡∏ß‡∏°
    let overallStatus = 'offline';
    let overallMessage = '';

    if (onlineCount === totalCount) {
      overallStatus = 'online';
      overallMessage = `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (${onlineCount}/${totalCount} endpoints online)`;
    } else if (onlineCount > 0) {
      overallStatus = 'partial';
      overallMessage = `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô (${onlineCount}/${totalCount} endpoints online)`;
            } else {
      overallStatus = 'offline';
      overallMessage = `‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (0/${totalCount} endpoints online)`;
    }

    console.log(`üìä Overall status for branch ${branchCode}: ${overallStatus} - ${overallMessage}`);

    return {
      success: onlineCount > 0,
      status: overallStatus,
      message: overallMessage,
      details: results,
      summary: {
        onlineCount,
        totalCount,
        offlineCount: totalCount - onlineCount,
        cardProxyCount: cardProxyConfig.totalCount,
        zkDeviceCount: zkConfig.totalCount
      }
    };
  },

  // ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ IP)
  showDebugInfo: function() {
    const branchCode = window.CardReaderConfig?.getCurrentBranchCode() || '00000';
    const config = window.CardReaderConfig?.showDebugInfo();

    console.group('üîç Card Reader Service Debug (Multi-IP Support)');
    console.log('Current Branch:', branchCode);
    console.log('Configuration:', config);
    console.log('Service Methods:', Object.keys(this));

    if (config && config.cardProxyUrls) {
      console.log(`\nüì° Available Endpoints Summary:`);
      console.log(`  - Card Proxy: ${config.cardProxyUrls.totalCount} endpoints`);
      console.log(`  - ZK Device: ${config.zkUrls.totalCount} endpoints`);
      console.log(`  - Total: ${config.cardProxyUrls.totalCount + config.zkUrls.totalCount} endpoints`);
        }

    console.groupEnd();

    return config;
    }
};

// ‚úÖ Auto-initialize
document.addEventListener('DOMContentLoaded', function() {
  console.log('üÜî Card Reader Service initialized (Multi-IP Support)');

  // ‡πÅ‡∏™‡∏î‡∏á debug info ‡πÉ‡∏ô development
  if (window.location.hostname === 'localhost' || window.location.search.includes('debug=1')) {
    setTimeout(() => {
      window.CardReaderService.showDebugInfo();
    }, 1500);
    }
});

// ‚úÖ Export ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Node.js
if (typeof module !== 'undefined' && module.exports) {
  module.exports = window.CardReaderService;
}