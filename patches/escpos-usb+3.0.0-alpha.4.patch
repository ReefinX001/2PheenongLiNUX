diff --git a/node_modules/escpos-usb/index.js b/node_modules/escpos-usb/index.js
index 8c21546..daabb68 100644
--- a/node_modules/escpos-usb/index.js
+++ b/node_modules/escpos-usb/index.js
@@ -1,192 +1,177 @@
 'use strict';
-const os           = require('os');
-const util          = require('util');
-const EventEmitter  = require('events');
-let usb = null;
+const os = require('os');
+const util = require('util');
+const { EventEmitter } = require('events');
 
-/**
- * [USB Class Codes ]
- * @type {Object}
- * @docs http://www.usb.org/developers/defined_class
- */
-const IFACE_CLASS = {
-  AUDIO  : 0x01,
-  HID    : 0x03,
-  PRINTER: 0x07,
-  HUB    : 0x09
-};
+let usb = null;
 
 /**
- * [function USB]
- * @param  {[type]} vid [description]
- * @param  {[type]} pid [description]
- * @return {[type]}     [description]
+ * ฟังก์ชัน getUSB() จะโหลดโมดูล usb และตรวจสอบว่าโมดูลนั้นมี method on หรือไม่
  */
-function USB(vid, pid){
-
+function getUSB() {
   if (!usb) {
     usb = require('usb');
-  }
-
-  EventEmitter.call(this);
-  var self = this;
-  this.device = null;
-  if(vid && pid){
-    this.device = usb.findByIds(vid, pid);
-  }else if(vid){
-      // Set spesific USB device from devices array as coming from USB.findPrinter() function.
-      // for example
-      // let devices = escpos.USB.findPrinter();
-      // => devices [ Device1, Device2 ];
-      // And Then
-      // const device = new escpos.USB(Device1); OR device = new escpos.USB(Device2);
-      this.device = vid;
-  }else{
-    var devices = USB.findPrinter();
-    if(devices && devices.length)
-      this.device = devices[0];
-  }
-  if (!this.device)
-    throw new Error('Can not find printer');
-
-  usb.on('detach', function(device){
-    if(device == self.device) {
-      self.emit('detach'    , device);
-      self.emit('disconnect', device);
-      self.device = null;
+    if (typeof usb.on !== 'function') {
+      // ถ้าไม่พบ method on ให้เพิ่มลงไปโดยใช้ EventEmitter
+      console.warn("usb module does not support 'on'. Adding dummy event emitter methods.");
+      const emitter = new EventEmitter();
+      usb.on = emitter.on.bind(emitter);
+      usb.emit = emitter.emit.bind(emitter);
+      usb.removeAllListeners = emitter.removeAllListeners.bind(emitter);
     }
-  });
-
-  return this;
+  }
+  return usb;
+}
 
+const IFACE_CLASS = {
+  AUDIO: 0x01,
+  HID: 0x03,
+  PRINTER: 0x07,
+  HUB: 0x09
 };
 
-/**
- * [findPrinter description]
- * @return {[type]} [description]
- */
-USB.findPrinter = function(){
-  if (!usb) {
-    usb = require('usb');
+class USB extends EventEmitter {
+  /**
+   * สร้าง instance ของ USB
+   * @param {Number|Object} vid - ถ้าเป็นเลข จะใช้เป็น Vendor ID; ถ้าเป็นอ็อบเจ็กต์ ให้ถือว่าเป็นอุปกรณ์ USB
+   * @param {Number} [pid] - Product ID (ถ้ามี)
+   */
+  constructor(vid, pid) {
+    super();
+    const usbModule = getUSB();
+    this.device = null;
+    if (vid && pid) {
+      this.device = usbModule.findByIds(vid, pid);
+    } else if (vid) {
+      // ถ้า vid เป็นอ็อบเจ็กต์ ให้ถือว่าเป็นอุปกรณ์ USB ที่ส่งเข้ามาแล้ว
+      this.device = vid;
+    } else {
+      const devices = USB.findPrinter();
+      if (devices && devices.length) {
+        this.device = devices[0];
+      }
+    }
+    if (!this.device)
+      throw new Error('Can not find printer');
+
+    // หาก usbModule มี method on ให้ attach listener สำหรับ event 'detach'
+    if (typeof usbModule.on === 'function') {
+      usbModule.on('detach', (device) => {
+        if (device === this.device) {
+          this.emit('detach', device);
+          this.emit('disconnect', device);
+          this.device = null;
+        }
+      });
+    }
+    return this;
   }
-  return usb.getDeviceList().filter(function(device){
-    try{
-      return device.configDescriptor.interfaces.filter(function(iface){
-        return iface.filter(function(conf){
-          return conf.bInterfaceClass === IFACE_CLASS.PRINTER;
+
+  /**
+   * ค้นหาเครื่องพิมพ์จาก USB devices
+   */
+  static findPrinter() {
+    const usbModule = getUSB();
+    return usbModule.getDeviceList().filter((device) => {
+      try {
+        return device.configDescriptor.interfaces.filter((iface) => {
+          return iface.filter((conf) => conf.bInterfaceClass === IFACE_CLASS.PRINTER).length;
         }).length;
-      }).length;
-    }catch(e){
-      // console.warn(e)
-      return false;
-    }
-  });
-};
-/**
- * getDevice
- */
-USB.getDevice = function(vid, pid){
-  return new Promise((resolve, reject) => {
-    const device = new USB(vid, pid);
-    device.open(err => {
-      if(err) return reject(err);
-      resolve(device);
+      } catch (e) {
+        return false;
+      }
     });
-  });
-};
+  }
 
-/**
- * make USB extends EventEmitter
- */
-util.inherits(USB, EventEmitter);
+  /**
+   * สร้าง instance ของ USB โดยใช้ Vendor ID และ Product ID
+   * @param {Number} vid
+   * @param {Number} pid
+   * @return {Promise}
+   */
+  static getDevice(vid, pid) {
+    return new Promise((resolve, reject) => {
+      try {
+        const device = new USB(vid, pid);
+        device.open(err => {
+          if (err) return reject(err);
+          resolve(device);
+        });
+      } catch (err) {
+        reject(err);
+      }
+    });
+  }
 
-/**
- * [open usb device]
- * @param  {Function} callback [description]
- * @return {[type]}            [description]
- */
-USB.prototype.open = function (callback){
-  let self = this, counter = 0, index = 0;
-  this.device.open();
-  this.device.interfaces.forEach(function(iface){
-    (function(iface){
-      iface.setAltSetting(iface.altSetting, function(){
+  /**
+   * เปิดการเชื่อมต่อกับ USB device
+   * @param {Function} callback
+   */
+  open(callback) {
+    this.device.open();
+    let counter = 0;
+    this.device.interfaces.forEach((iface) => {
+      iface.setAltSetting(iface.altSetting, () => {
         try {
-          // http://libusb.sourceforge.net/api-1.0/group__dev.html#gab14d11ed6eac7519bb94795659d2c971
-          // libusb_kernel_driver_active / libusb_attach_kernel_driver / libusb_detach_kernel_driver : "This functionality is not available on Windows."
-          if ("win32" !== os.platform()) {
-            if(iface.isKernelDriverActive()) {
+          if (os.platform() !== "win32") {
+            if (iface.isKernelDriverActive()) {
               try {
                 iface.detachKernelDriver();
-              } catch(e) {
-                console.error("[ERROR] Could not detatch kernel driver: %s", e)
+              } catch (e) {
+                console.error("[ERROR] Could not detach kernel driver:", e);
               }
             }
           }
-          iface.claim(); // must be called before using any endpoints of this interface.
-          iface.endpoints.filter(function(endpoint){
-            if(endpoint.direction == 'out' && !self.endpoint) {
-              self.endpoint = endpoint;
+          iface.claim();
+          iface.endpoints.forEach((endpoint) => {
+            if (endpoint.direction === 'out' && !this.endpoint) {
+              this.endpoint = endpoint;
             }
           });
-          if(self.endpoint) {
-            self.emit('connect', self.device);
-            callback && callback(null, self);
-          } else if(++counter === this.device.interfaces.length && !self.endpoint){
+          if (this.endpoint) {
+            this.emit('connect', this.device);
+            callback && callback(null, this);
+          } else if (++counter === this.device.interfaces.length && !this.endpoint) {
             callback && callback(new Error('Can not find endpoint from printer'));
           }
         } catch (e) {
-          // Try/Catch block to prevent process from exit due to uncaught exception.
-          // i.e LIBUSB_ERROR_ACCESS might be thrown by claim() if USB device is taken by another process
-          // example: MacOS Parallels
           callback && callback(e);
         }
       });
-    })(iface);
-  });
-  return this;
-
-};
-
-/**
- * [function write]
- * @param  {[type]} data [description]
- * @return {[type]}      [description]
- */
-USB.prototype.write = function(data, callback){
-  this.emit('data', data);
-  this.endpoint.transfer(data, callback);
-  return this;
-};
-
-USB.prototype.close = function(callback){
-
-  if(this.device) {
-
-    try {
+    });
+    return this;
+  }
 
-      this.device.close();
-      usb.removeAllListeners('detach');
+  /**
+   * เขียนข้อมูลไปยัง USB endpoint
+   * @param {*} data
+   * @param {Function} callback
+   */
+  write(data, callback) {
+    this.emit('data', data);
+    this.endpoint.transfer(data, callback);
+    return this;
+  }
 
+  /**
+   * ปิดการเชื่อมต่อกับ USB device
+   * @param {Function} callback
+   */
+  close(callback) {
+    if (this.device) {
+      try {
+        this.device.close();
+        getUSB().removeAllListeners('detach');
+        callback && callback(null);
+        this.emit('close', this.device);
+      } catch (e) {
+        callback && callback(e);
+      }
+    } else {
       callback && callback(null);
-      this.emit('close', this.device);
-
-    }
-    catch (e) {
-      callback && callback(e);
     }
-
-  }
-  else {
-    callback && callback(null);
+    return this;
   }
+}
 
-  return this;
-
-};
-
-/**
- * [exports description]
- * @type {[type]}
- */
 module.exports = USB;
