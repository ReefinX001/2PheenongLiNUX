// loadProvinces-fixed.js
require('dotenv').config();
const fs = require('fs');
const mongoose = require('mongoose');
const Province = require('./models/Province');
const connectDB = require('./config/db');

async function main() {
  try {
    console.log('üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB...');
    await connectDB();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

    console.log('üìñ ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON...');
    const raw = fs.readFileSync('api_province_with_amphure_tambon.json', 'utf8');
    const data = JSON.parse(raw);
    console.log(`üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ${data.length} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î`);

    console.log('üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...');
    await Province.deleteMany({});
    console.log('‚úÖ ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

    let successCount = 0;
    let errorCount = 0;
    let totalAmphures = 0;
    let totalTambons = 0;

    for (let i = 0; i < data.length; i++) {
      const prov = data[i];

      try {
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
        if (!prov.id || !prov.name_th) {
          console.log(`‚ö†Ô∏è ‡∏Ç‡πâ‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà ${i + 1}: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô`);
          errorCount++;
          continue;
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÅ‡∏•‡∏∞‡∏ï‡∏≥‡∏ö‡∏•
        const amphures = [];
        if (prov.amphure && Array.isArray(prov.amphure)) {
          for (const amphure of prov.amphure) {
            if (amphure.id && amphure.name_th) {
              totalAmphures++;

              // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≥‡∏ö‡∏•
              const tambons = [];
              if (amphure.tambon && Array.isArray(amphure.tambon)) {
                for (const tambon of amphure.tambon) {
                  if (tambon.id && tambon.name_th && tambon.zip_code) {
                    tambons.push({
                      tambon_id: tambon.id,
                      name_th: tambon.name_th,
                      zip_code: tambon.zip_code
                    });
                    totalTambons++;
                  }
                }
              }

              amphures.push({
                amphure_id: amphure.id,
                name_th: amphure.name_th,
                tambons: tambons
              });
            }
          }
        }

        // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á MongoDB
        await Province.create({
          province_id: prov.id,
          name_th: prov.name_th,
          amphures: amphures
        });

        successCount++;
        if (successCount % 10 === 0 || successCount === 1) {
          const amphureCount = amphures.length;
          const tambonCount = amphures.reduce((sum, a) => sum + a.tambons.length, 0);
          console.log(`üìç ${successCount}. ${prov.name_th} - ${amphureCount} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠, ${tambonCount} ‡∏ï‡∏≥‡∏ö‡∏•`);
        }

      } catch (innerError) {
        console.error(`‚ùå Error ‡∏Å‡∏±‡∏ö ${prov.name_th}:`, innerError.message);
        errorCount++;
      }
    }

    console.log('\nüéâ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log(`‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${successCount} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î`);
    console.log(`üìç ‡∏£‡∏ß‡∏°‡∏≠‡∏≥‡πÄ‡∏†‡∏≠: ${totalAmphures} ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠`);
    console.log(`üèòÔ∏è ‡∏£‡∏ß‡∏°‡∏ï‡∏≥‡∏ö‡∏•: ${totalTambons} ‡∏ï‡∏≥‡∏ö‡∏•`);
    console.log(`‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${errorCount} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î`);
    console.log(`üìä ‡∏£‡∏ß‡∏°: ${successCount + errorCount} ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î`);

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    console.log('\nüß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á:');
    const sampleProvince = await Province.findOne().lean();
    if (sampleProvince) {
      console.log(`- ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î: ${sampleProvince.name_th}`);
      if (sampleProvince.amphures.length > 0) {
        const sampleAmphure = sampleProvince.amphures[0];
        console.log(`- ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÅ‡∏£‡∏Å: ${sampleAmphure.name_th}`);
        if (sampleAmphure.tambons && sampleAmphure.tambons.length > 0) {
          const sampleTambon = sampleAmphure.tambons[0];
          console.log(`- ‡∏ï‡∏≥‡∏ö‡∏•‡πÅ‡∏£‡∏Å: ${sampleTambon.name_th} (‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå: ${sampleTambon.zip_code})`);
        }
      }
    }

    await mongoose.disconnect();
    console.log('üîå ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);

    if (error.message.includes('ECONNREFUSED')) {
      console.error('\n‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB ‡πÑ‡∏î‡πâ');
      console.error('üí° ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
      console.error('1. ‡πÄ‡∏õ‡∏¥‡∏î MongoDB (mongod)');
      console.error('2. ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ MongoDB Atlas ‡πÅ‡∏ó‡∏ô');
      console.error('3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö MONGO_URI ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå .env');
    }

    process.exit(1);
  }
}

if (require.main === module) {
  main();
}