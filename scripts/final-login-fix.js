const fs = require('fs');
const path = require('path');

console.log('üîß Final Fix: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Errors ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÉ‡∏ô Login HTML...\n');

const loginPath = path.join(__dirname, '../views/login.html');
let loginContent = fs.readFileSync(loginPath, 'utf8');

let fixCount = 0;

// 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç if else statements ‡∏ó‡∏µ‡πà‡∏°‡∏µ quote ‡πÄ‡∏Å‡∏¥‡∏ô
const ifElseErrors = [
  { from: "} else if (allowedPages.includes('frontstore')) {'", to: "} else if (allowedPages.includes('frontstore')) {" },
  { from: "} else if (allowedPages.includes('pos')) {'", to: "} else if (allowedPages.includes('pos')) {" },
  { from: "} else if (allowedPages.includes('hr')) {'", to: "} else if (allowedPages.includes('hr')) {" }
];

ifElseErrors.forEach(error => {
  if (loginContent.includes(error.from)) {
    loginContent = loginContent.replace(error.from, error.to);
    fixCount++;
    console.log(`‚úÖ [${fixCount}] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç if-else statement`);
  }
});

// 2. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç showToast calls ‡∏ó‡∏µ‡πà‡∏°‡∏µ quote ‡πÄ‡∏Å‡∏¥‡∏ô
loginContent = loginContent.replace(/showToast\(err\.message, 'error'\);'/g, "showToast(err.message, 'error');");
fixCount++;
console.log(`‚úÖ [${fixCount}] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç showToast call`);

// 3. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç throw new Error statements ‡∏ó‡∏µ‡πà‡∏°‡∏µ quote ‡πÄ‡∏Å‡∏¥‡∏ô
const throwErrors = [
  { from: "throw new Error(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');'", to: "throw new Error(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');" },
  { from: "throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');'", to: "throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡∏ô‡∏∏‡∏°‡∏±‡∏ï‡∏¥ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');" }
];

throwErrors.forEach(error => {
  if (loginContent.includes(error.from)) {
    loginContent = loginContent.replace(error.from, error.to);
    fixCount++;
    console.log(`‚úÖ [${fixCount}] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç throw new Error`);
  }
});

// 4. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç localStorage.setItem calls ‡∏ó‡∏µ‡πà‡∏°‡∏µ quote ‡πÄ‡∏Å‡∏¥‡∏ô
const localStorageErrors = [
  { from: "localStorage.setItem('allowedPages', JSON.stringify(result.user.allowedPages || []));'", to: "localStorage.setItem('allowedPages', JSON.stringify(result.user.allowedPages || []));" },
  { from: "localStorage.setItem('userData', JSON.stringify(result.user));'", to: "localStorage.setItem('userData', JSON.stringify(result.user));" },
  { from: "localStorage.setItem('approvedLogin', 'true'); // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô approved login'", to: "localStorage.setItem('approvedLogin', 'true'); // ‡πÄ‡∏û‡∏¥‡πà‡∏° flag ‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô approved login" }
];

localStorageErrors.forEach(error => {
  if (loginContent.includes(error.from)) {
    loginContent = loginContent.replace(error.from, error.to);
    fixCount++;
    console.log(`‚úÖ [${fixCount}] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç localStorage.setItem`);
  }
});

// 5. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç quote errors ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
const remainingQuoteErrors = [
  { pattern: /throw new Error\('([^']+)'\);'/g, replacement: "throw new Error('$1');" },
  { pattern: /showToast\('([^']+)', '([^']+)'\);'/g, replacement: "showToast('$1', '$2');" },
  { pattern: /localStorage\.setItem\('([^']+)', '([^']+)'\);'/g, replacement: "localStorage.setItem('$1', '$2');" },
  { pattern: /localStorage\.setItem\('([^']+)', JSON\.stringify\(([^)]+)\)\);'/g, replacement: "localStorage.setItem('$1', JSON.stringify($2));" },
  { pattern: /window\.location\.href = '([^']+)';'/g, replacement: "window.location.href = '$1';" }
];

remainingQuoteErrors.forEach((error, index) => {
  const before = loginContent;
  loginContent = loginContent.replace(error.pattern, error.replacement);
  if (before !== loginContent) {
    fixCount++;
    console.log(`‚úÖ [${fixCount}] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç quote error ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà ${index + 1}`);
  }
});

// 6. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç function calls ‡∏ó‡∏µ‡πà‡∏°‡∏µ quote ‡πÄ‡∏Å‡∏¥‡∏ô
const functionCallErrors = [
  { from: "document.getElementById('loginReason').focus();'", to: "document.getElementById('loginReason').focus();" },
  { from: "document.getElementById('loginRequestForm').reset();'", to: "document.getElementById('loginRequestForm').reset();" },
  { from: "document.getElementById('requestIdDisplay').textContent = currentRequestId || '-';'", to: "document.getElementById('requestIdDisplay').textContent = currentRequestId || '-';" }
];

functionCallErrors.forEach(error => {
  if (loginContent.includes(error.from)) {
    loginContent = loginContent.replace(error.from, error.to);
    fixCount++;
    console.log(`‚úÖ [${fixCount}] ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç function call`);
  }
});

// ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏Å‡∏•‡∏±‡∏ö
fs.writeFileSync(loginPath, loginContent, 'utf8');

console.log(`\nüéâ Final Fix ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!`);
console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç ${fixCount} ‡∏à‡∏∏‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢`);

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏ü‡∏•‡πå
const stats = fs.statSync(loginPath);
console.log(`üìÑ ‡πÑ‡∏ü‡∏•‡πå login.html: ${(stats.size / 1024).toFixed(1)}KB`);

const loadingSystemPath = path.join(__dirname, '../js/loading-system.js');
if (fs.existsSync(loadingSystemPath)) {
  const loadingStats = fs.statSync(loadingSystemPath);
  console.log(`üìÑ ‡πÑ‡∏ü‡∏•‡πå loading-system.js: ${(loadingStats.size / 1024).toFixed(1)}KB`);
}

console.log('\nüöÄ ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô 100%!');