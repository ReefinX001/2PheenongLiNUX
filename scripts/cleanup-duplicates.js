const mongoose = require('mongoose');
require('dotenv').config();

// Connect to database
const connectDB = require('../config/db');

async function cleanupDuplicates() {
  try {
    console.log('üßπ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ã‡πâ‡∏≥‡πÅ‡∏•‡∏∞ sync hasReceiptVoucher flag...\n');

    // ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    await connectDB();
    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à\n');

    const ReceiptVoucher = require('../models/POS/ReceiptVoucher');
    const BranchStockHistory = require('../models/POS/BranchStockHistory');

    // 1. ‡∏´‡∏≤‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    console.log('üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô...');
    const duplicateGroups = await ReceiptVoucher.aggregate([
      {
        $group: {
          _id: '$reference.invoiceNumber',
          count: { $sum: 1 },
          docs: { $push: { id: '$_id', docNumber: '$documentNumber', createdAt: '$createdAt' } }
        }
      },
      {
        $match: { count: { $gt: 1 } }
      }
    ]);

    if (duplicateGroups.length > 0) {
      console.log(`üìã ‡∏û‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ã‡πâ‡∏≥ ${duplicateGroups.length} ‡∏Å‡∏•‡∏∏‡πà‡∏°:`);

      let deletedCount = 0;
      for (const group of duplicateGroups) {
        console.log(`\n   Invoice: ${group._id}`);
        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° createdAt ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏Å‡πá‡∏ö‡∏≠‡∏±‡∏ô‡πÅ‡∏£‡∏Å ‡∏•‡∏ö‡∏≠‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
        const sortedDocs = group.docs.sort((a, b) => new Date(a.createdAt) - new Date(b.createdAt));
        const keepDoc = sortedDocs[0];
        const deleteIds = sortedDocs.slice(1).map(doc => doc.id);

        console.log(`   - ‡πÄ‡∏Å‡πá‡∏ö: ${keepDoc.docNumber} (${new Date(keepDoc.createdAt).toLocaleString('th-TH')})`);

        for (const deleteId of deleteIds) {
          const deleteDoc = sortedDocs.find(d => d.id.toString() === deleteId.toString());
          console.log(`   - ‡∏•‡∏ö: ${deleteDoc.docNumber} (${new Date(deleteDoc.createdAt).toLocaleString('th-TH')})`);
          await ReceiptVoucher.findByIdAndDelete(deleteId);
          deletedCount++;
        }
      }

      console.log(`\n‚úÖ ‡∏•‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ã‡πâ‡∏≥ ${deletedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    } else {
      console.log('‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ã‡πâ‡∏≥');
    }

    // 2. Sync hasReceiptVoucher flag
    console.log('\nüîÑ Sync hasReceiptVoucher flag...');

    // ‡∏´‡∏≤ BranchStockHistory ‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ flag ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡πâ‡∏ß
    const historyWithoutFlag = await BranchStockHistory.find({
      $or: [
        { hasReceiptVoucher: { $ne: true } },
        { hasReceiptVoucher: { $exists: false } }
      ]
    }).limit(100);

    console.log(`üìã ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ${historyWithoutFlag.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£...`);

    let syncCount = 0;
    for (const history of historyWithoutFlag) {
      // ‡∏´‡∏≤‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
      const receipt = await ReceiptVoucher.findOne({
        $or: [
          { 'reference.branchStockHistoryId': history._id },
          { 'reference.invoiceNumber': history.invoice_no },
          { notes: { $regex: history.invoice_no || '', $options: 'i' } }
        ]
      });

      if (receipt) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó flag
        await BranchStockHistory.findByIdAndUpdate(history._id, {
          hasReceiptVoucher: true,
          receiptVoucherId: receipt._id,
          receiptVoucherCreatedAt: receipt.createdAt
        });

        console.log(`   ‚úÖ Synced ${history.invoice_no} -> ${receipt.documentNumber}`);
        syncCount++;
      }
    }

    console.log(`\n‚úÖ Sync ${syncCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à`);

    // 3. ‡∏´‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ flag ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
    console.log('\nüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ flag ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô...');
    const historyWithFlag = await BranchStockHistory.find({
      hasReceiptVoucher: true
    }).limit(50);

    let cleanupCount = 0;
    for (const history of historyWithFlag) {
      const receipt = await ReceiptVoucher.findOne({
        $or: [
          { _id: history.receiptVoucherId },
          { 'reference.branchStockHistoryId': history._id },
          { 'reference.invoiceNumber': history.invoice_no }
        ]
      });

      if (!receipt) {
        // ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô ‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag
        await BranchStockHistory.findByIdAndUpdate(history._id, {
          $unset: {
            hasReceiptVoucher: 1,
            receiptVoucherId: 1,
            receiptVoucherCreatedAt: 1
          }
        });

        console.log(`   üîÑ Reset flag for ${history.invoice_no} (no receipt found)`);
        cleanupCount++;
      }
    }

    console.log(`\n‚úÖ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï flag ${cleanupCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    // 4. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
    console.log('\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î:');
    const totalReceipts = await ReceiptVoucher.countDocuments({});
    const totalHistory = await BranchStockHistory.countDocuments({});
    const historyWithReceipts = await BranchStockHistory.countDocuments({ hasReceiptVoucher: true });

    console.log(`   - ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalReceipts} ‡πÉ‡∏ö`);
    console.log(`   - BranchStockHistory ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${totalHistory} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   - ‡∏°‡∏µ hasReceiptVoucher: ${historyWithReceipts} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    console.log(`   - ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ hasReceiptVoucher: ${totalHistory - historyWithReceipts} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    console.log('\nüéâ ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
  } finally {
    process.exit(0);
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ
if (require.main === module) {
  cleanupDuplicates();
}

module.exports = cleanupDuplicates;
