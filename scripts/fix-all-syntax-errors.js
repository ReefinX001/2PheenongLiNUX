#!/usr/bin/env node

/**
 * Fix All Syntax Errors
 * ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç syntax errors ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
 */

const fs = require('fs');
const path = require('path');
const glob = require('glob');

console.log('üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Syntax Errors ‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...\n');

let totalFiles = 0;
let fixedFiles = 0;
let totalFixes = 0;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
function fixFile(filePath) {
  try {
    let content = fs.readFileSync(filePath, 'utf8');
    const originalContent = content;
    let fixes = 0;

    // Common syntax fixes
    const fixRules = [
      // Fix Swal.const syntax error
      {
        from: /Swal\.const loaderId = LoadingSystem\.show\(/g,
        to: 'const loaderId = LoadingSystem.show(',
        desc: 'Fix Swal.const syntax error'
      },

      // Fix extra single quotes at end of lines
      {
        from: /(\w+\.classList\.\w+\([^)]+\));'/g,
        to: '$1;',
        desc: 'Fix classList method quotes'
      },
      {
        from: /(localStorage\.setItem\([^)]+\));'/g,
        to: '$1;',
        desc: 'Fix localStorage quotes'
      },
      {
        from: /(const \w+ = [^;]+);'/g,
        to: '$1;',
        desc: 'Fix const declaration quotes'
      },
      {
        from: /(socket\.emit\([^)]+\));'/g,
        to: '$1;',
        desc: 'Fix socket.emit quotes'
      },
      {
        from: /(\w+\.textContent = [^;]+);'/g,
        to: '$1;',
        desc: 'Fix textContent quotes'
      },
      {
        from: /(document\.getElementById\([^)]+\));'/g,
        to: '$1;',
        desc: 'Fix getElementById quotes'
      },

      // Fix CSS quotes
      {
        from: "font-family: 'Prompt', 'Poppins', sans-serif;'",
        to: "font-family: 'Prompt', 'Poppins', sans-serif;",
        desc: 'Fix font-family quote'
      },
      {
        from: "content: '';'",
        to: "content: '';",
        desc: 'Fix content quote'
      },

      // Fix onclick quotes
      {
        from: /onclick="([^"]+)"'/g,
        to: 'onclick="$1"',
        desc: 'Fix onclick quotes'
      },

      // Fix if statement quotes
      {
        from: /if \([^)]+\) \{'/g,
        to: function(match) { return match.slice(0, -1); },
        desc: 'Fix if statement quotes'
      },

      // Fix method call quotes
      {
        from: /(\w+\.[a-zA-Z]+\([^)]*\));'/g,
        to: '$1;',
        desc: 'Fix method call quotes'
      }
    ];

    // Apply fixes
    fixRules.forEach(rule => {
      const beforeLength = content.length;
      if (typeof rule.from === 'string') {
        content = content.replace(new RegExp(rule.from.replace(/[.*+?^${}()|[\]\\]/g, '\\$&'), 'g'), rule.to);
      } else {
        content = content.replace(rule.from, rule.to);
      }
      const afterLength = content.length;

      if (beforeLength !== afterLength) {
        fixes++;
      }
    });

    // Check if LoadingSystem is used but includes are missing
    if (content.includes('LoadingSystem.') && !content.includes('loading-system.js')) {
      const headIndex = content.indexOf('</head>');
      if (headIndex !== -1) {
        const jsInclude = '\n  <!-- Loading System -->\n  <script src="/js/loading-system.js"></script>\n\n';
        content = content.slice(0, headIndex) + jsInclude + content.slice(headIndex);
        fixes++;
        console.log(`   + Added LoadingSystem include`);
      }
    }

    // Save if there were changes
    if (content !== originalContent) {
      fs.writeFileSync(filePath, content, 'utf8');
      fixedFiles++;
      totalFixes += fixes;
      console.log(`‚úÖ Fixed: ${path.relative(process.cwd(), filePath)} (${fixes} fixes)`);
      return true;
    }

    return false;
  } catch (error) {
    console.error(`‚ùå Error fixing ${filePath}:`, error.message);
    return false;
  }
}

// ‡∏´‡∏≤‡πÑ‡∏ü‡∏•‡πå HTML ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
const htmlFiles = glob.sync('views/**/*.html');
totalFiles = htmlFiles.length;

console.log(`üìÅ ‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå HTML: ${totalFiles} ‡πÑ‡∏ü‡∏•‡πå\n`);

// ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡∏•‡∏∞‡πÑ‡∏ü‡∏•‡πå
htmlFiles.forEach((file, index) => {
  if (index < 50) { // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô
    fixFile(path.resolve(file));
  }
});

console.log('\n' + '='.repeat(60));
console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:');
console.log(`üìÇ ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:      ${totalFiles}`);
console.log(`üîß ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:     ${fixedFiles}`);
console.log(`‚ú® ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô fixes:      ${totalFixes}`);
console.log('='.repeat(60));

if (fixedFiles > 0) {
  console.log('\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:');
  console.log('1. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå');
  console.log('2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Console errors');
  console.log('3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö LoadingSystem: test-loading.html');
  console.log('4. ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
} else {
  console.log('\n‚ú® ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç');
}