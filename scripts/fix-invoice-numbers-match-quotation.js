// scripts/fix-invoice-numbers-match-quotation.js
// Script ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ (QT-680901-004 ‚Üí INV-680901-004)

require('dotenv').config();
const mongoose = require('mongoose');
const Invoice = require('../models/Installment/Invoice');

// ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å config ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö server)
async function connectDB() {
  try {
    // ‡∏≠‡πà‡∏≤‡∏ô connection string ‡∏à‡∏≤‡∏Å .env ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö server
    const mongoURI = process.env.MONGO_URI || 'mongodb://127.0.0.1:27017/myAccountingDB';

    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB...');

    // ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Atlas ‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ MONGO_URI)
    if (process.env.MONGO_URI) {
      try {
        await mongoose.connect(process.env.MONGO_URI, {
          serverSelectionTimeoutMS: 15000,
          connectTimeoutMS: 20000,
          socketTimeoutMS: 30000,
          maxPoolSize: 5,
          minPoolSize: 1,
          maxIdleTimeMS: 30000,
          family: 4,
          retryWrites: true,
          w: 'majority',
          readPreference: 'primaryPreferred'
        });
        console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MongoDB Atlas ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
        return;
      } catch (atlasError) {
        console.warn('‚ö†Ô∏è Atlas connection failed, trying local MongoDB...', atlasError.message);
        await mongoose.disconnect();
      }
    }

    // Fallback ‡πÑ‡∏õ‡πÉ‡∏ä‡πâ local MongoDB
    await mongoose.connect('mongodb://127.0.0.1:27017/myAccountingDB', {
      serverSelectionTimeoutMS: 10000,
      connectTimeoutMS: 10000,
      socketTimeoutMS: 20000,
      maxPoolSize: 5,
      family: 4
    });

    console.log('‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Local MongoDB ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

  } catch (error) {
    console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:', error.message);
    process.exit(1);
  }
}

async function fixInvoiceNumbersToMatchQuotation() {
  try {
    console.log('üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤...');

    // ‡∏´‡∏≤‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ quotationNumber ‡πÅ‡∏•‡∏∞ invoiceNumber ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    const invoices = await Invoice.find({
      quotationNumber: { $exists: true, $ne: null },
      $expr: {
        $ne: [
          { $replaceOne: { input: '$quotationNumber', find: 'QT-', replacement: 'INV-' } },
          '$invoiceNumber'
        ]
      }
    });

    console.log(`üìã ‡∏û‡∏ö‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${invoices.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    if (invoices.length === 0) {
      return {
        success: true,
        message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç',
        fixed: 0
      };
    }

    let fixedCount = 0;
    const results = [];

    for (const invoice of invoices) {
      const oldInvoiceNumber = invoice.invoiceNumber;
      const quotationNumber = invoice.quotationNumber;

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      const newInvoiceNumber = quotationNumber.replace('QT-', 'INV-');

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
      await Invoice.updateOne(
        { _id: invoice._id },
        { $set: { invoiceNumber: newInvoiceNumber } }
      );

      results.push({
        id: invoice._id,
        quotationNumber: quotationNumber,
        oldInvoiceNumber: oldInvoiceNumber,
        newInvoiceNumber: newInvoiceNumber
      });

      console.log(`‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ${quotationNumber} ‚Üí ${oldInvoiceNumber} ‚Üí ${newInvoiceNumber}`);
      fixedCount++;
    }

    console.log(`üéâ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${fixedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);

    return {
      success: true,
      message: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô: ${fixedCount} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
      fixed: fixedCount,
      results: results
    };

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error);
    throw error;
  } finally {
    mongoose.disconnect();
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
async function main() {
  await connectDB();
  await fixInvoiceNumbersToMatchQuotation();
}

main().catch(console.error);
