// =======================================
// üîß Payment Validation Fix Script
// ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
// =======================================

console.log('üîß Payment Validation Fix Script Loading...');

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô
window.fixPaymentPlans = function() {
  console.log('üîß Fixing payment plans...');

  try {
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const cartItems = window.InstallmentProduct?.cartItems || window.cartItems || [];
    if (cartItems.length === 0) {
      console.log('‚ö†Ô∏è No cart items found');
      return;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á
    const totalAmount = cartItems.reduce((sum, item) => {
      const price = parseFloat(item.price || 0);
      const quantity = parseInt(item.quantity || item.qty || 1);
      return sum + (price * quantity);
    }, 0);

    console.log('üí∞ Total amount calculated:', totalAmount);

    if (totalAmount <= 0) {
      console.error('‚ùå Invalid total amount');
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    const newPlans = [
      {
        id: 'plan1',
        name: '‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏¢‡∏≤‡∏ß (‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ô‡πâ‡∏≠‡∏¢)',
        down: Math.floor(totalAmount * 0.3), // 30%
        perMonth: Math.floor(totalAmount * 0.07), // 7%
        count: 10
      },
      {
        id: 'plan2',
        name: '‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á',
        down: Math.floor(totalAmount * 0.5), // 50%
        perMonth: Math.floor(totalAmount * 0.08), // 8%
        count: 6
      },
      {
        id: 'plan3',
        name: '‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏™‡∏±‡πâ‡∏ô (‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏°‡∏≤‡∏Å)',
        down: Math.floor(totalAmount * 0.7), // 70%
        perMonth: Math.floor(totalAmount * 0.1), // 10%
        count: 3
      }
    ];

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    newPlans.forEach(plan => {
      if (plan.down > totalAmount) {
        console.warn(`‚ö†Ô∏è Plan ${plan.id} down payment too high, adjusting...`);
        plan.down = Math.floor(totalAmount * 0.8);
      }
      console.log(`‚úÖ Plan ${plan.id}: Down=${plan.down}, Total=${totalAmount}`);
    });

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï global variables
    window._autoPlan = newPlans[0];

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ container
    const container = document.getElementById('autoPlansContainer');
    if (container) {
      container.innerHTML = newPlans.map(plan => {
        const total = plan.down + (plan.perMonth * plan.count);
        return `
          <div class="border rounded-lg p-4 mb-3">
            <label class="flex items-center gap-3 cursor-pointer">
              <input type="radio" name="installmentPlan" value='${JSON.stringify(plan)}' 
                     ${plan.id === 'plan1' ? 'checked' : ''} class="radio radio-primary">
              <div class="flex-1">
                <h4 class="font-semibold">${plan.name}</h4>
                <p class="text-sm text-gray-600">
                  ‡∏î‡∏≤‡∏ß‡∏ô‡πå: ‡∏ø${plan.down.toLocaleString()} | 
                  ‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î: ‡∏ø${plan.perMonth.toLocaleString()}/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô | 
                  ${plan.count} ‡∏á‡∏ß‡∏î
                </p>
                <p class="text-lg font-bold text-primary">
                  ‡∏£‡∏ß‡∏°: ‡∏ø${total.toLocaleString()}
                </p>
              </div>
            </label>
          </div>
        `;
      }).join('');

      // Bind events
      const radios = container.querySelectorAll('input[name="installmentPlan"]');
      radios.forEach(radio => {
        radio.addEventListener('change', function() {
          if (this.checked) {
            try {
              const planData = JSON.parse(this.value);
              window._autoPlan = planData;
              console.log('‚úÖ Plan selected:', planData);
            } catch (e) {
              console.error('‚ùå Error parsing plan data:', e);
            }
          }
        });
      });
    }

    console.log('‚úÖ Payment plans fixed successfully');

    if (window.LoadingSystem?.show) {
      window.LoadingSystem.show({
        message: '‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß',
        type: 'success',
        timeout: 3000
      });
    }

    return newPlans;

  } catch (error) {
    console.error('‚ùå Error fixing payment plans:', error);
    return null;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
window.validateBeforeSubmit = function() {
  console.log('üîç Validating before submit...');

  const cartItems = window.InstallmentProduct?.cartItems || window.cartItems || [];
  if (cartItems.length === 0) {
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤');
  }

  const totalAmount = cartItems.reduce((sum, item) => {
    const price = parseFloat(item.price || 0);
    const quantity = parseInt(item.quantity || item.qty || 1);
    return sum + (price * quantity);
  }, 0);

  const selectedPlan = window._autoPlan || {};
  const downPayment = selectedPlan.down || selectedPlan.downPayment || 0;

  console.log('üìä Validation data:', {
    totalAmount,
    downPayment,
    isValid: downPayment <= totalAmount
  });

  if (downPayment > totalAmount) {
    const errorMsg = `‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå (${downPayment.toLocaleString()}) ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (${totalAmount.toLocaleString()})`;

    // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    const correctedDown = Math.floor(totalAmount * 0.8);
    console.log('üîß Auto-correcting down payment to:', correctedDown);

    if (window._autoPlan) {
      window._autoPlan.down = correctedDown;
      window._autoPlan.downPayment = correctedDown;
    }

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ú‡∏ô‡πÉ‡∏´‡∏°‡πà
    window.fixPaymentPlans();

    if (window.LoadingSystem?.show) {
      window.LoadingSystem.show({
        message: `üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô ${correctedDown.toLocaleString()} ‡∏ö‡∏≤‡∏ó‡πÅ‡∏•‡πâ‡∏ß`,
        type: 'warning',
        timeout: 4000
      });
    }

    throw new Error(errorMsg);
  }

  return true;
};

// ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
window.addEventListener('installmentSystemReady', () => {
  console.log('üéØ System ready, applying payment fixes...');

  setTimeout(() => {
    try {
      window.fixPaymentPlans();
    } catch (error) {
      console.warn('‚ö†Ô∏è Auto-fix failed:', error);
    }
  }, 1000);
});

// ‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
setTimeout(() => {
  if (window.InstallmentProduct?.cartItems?.length > 0) {
    console.log('üéØ System already ready, applying payment fixes...');
    try {
      window.fixPaymentPlans();
    } catch (error) {
      console.warn('‚ö†Ô∏è Auto-fix failed:', error);
    }
  }
}, 3000);

console.log('‚úÖ Payment Validation Fix Script Loaded');
