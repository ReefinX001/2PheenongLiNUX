/**
 * üß™ Installment System Test Runner
 * ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç
 *
 * ‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ:
 * 1. ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤ installment_Pattani.html
 * 2. ‡πÄ‡∏õ‡∏¥‡∏î Developer Console (F12)
 * 3. Copy ‡πÅ‡∏•‡∏∞ paste script ‡∏ô‡∏µ‡πâ‡∏•‡∏á‡πÉ‡∏ô console
 * 4. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ runInstallmentTests()
 */

console.log('üß™ Loading Installment System Test Runner...');

// Mock data ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
const TEST_DATA = {
    customer: {
        prefix: '‡∏ô‡∏≤‡∏¢',
        firstName: '‡∏≠‡∏≤‡∏£‡∏µ‡∏ü‡∏µ‡∏ô',
        lastName: '‡∏Å‡∏≤‡∏ã‡∏≠',
        idCard: '1941001330617',
        phone: '0622070097',
        email: 'bisyrunn@gmail.com',
        birthDate: '1994-01-01',
        age: '30',
        houseNo: '103/2',
        moo: '4',
        soi: '',
        road: '',
        subDistrict: '‡∏£‡∏∞‡πÅ‡∏ß‡πâ‡∏á',
        district: '‡∏¢‡∏∞‡∏£‡∏±‡∏á',
        province: '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ',
        zipcode: '94160',
        address: '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà 103/2 ‡∏´‡∏°‡∏π‡πà 4 ‡∏ï‡∏≥‡∏ö‡∏• ‡∏£‡∏∞‡πÅ‡∏ß‡πâ‡∏á ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ‡∏¢‡∏∞‡∏£‡∏±‡∏á ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94160'
    },
    cartItems: [
        {
            name: 'iPhone 16 Pro 256Gb Pink',
            model: 'iPhone 16 Pro',
            price: 39500,
            quantity: 1,
            total: 39500,
            imei: '236514236985214',
            sku: 'IP16PRO256P',
            brand: 'Apple',
            category: 'Smartphone',
            taxType: '‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ',
            taxRate: 0,
            netAmount: 39500,
            taxAmount: 0,
            totalWithTax: 39500,
            taxDisplay: '‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ 0%'
        }
    ],
    paymentPlan: {
        type: 'plan1',
        planType: 'plan1',
        planName: '‡πÅ‡∏ú‡∏ô‡∏ú‡πà‡∏≠‡∏ô‡∏¢‡∏≤‡∏ß (‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏ô‡πâ‡∏≠‡∏¢)',
        downPayment: 15210,
        installmentAmount: 2450,
        installmentPeriod: 12,
        interestRate: 0,
        totalAmount: 44610
    }
};

// Test Framework
class InstallmentTestFramework {
    constructor() {
        this.tests = [];
        this.results = {
            passed: 0,
            failed: 0,
            warnings: 0,
            total: 0
        };
    }

    // ‡πÄ‡∏û‡∏¥‡πà‡∏° test case
    addTest(name, testFunction, category = 'general') {
        this.tests.push({
            name,
            testFunction,
            category,
            status: 'pending'
        });
    }

    // ‡∏£‡∏±‡∏ô test ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    async runAllTests() {
        console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö Installment...');
        console.log('='.repeat(60));

        this.results = { passed: 0, failed: 0, warnings: 0, total: 0 };

        for (const test of this.tests) {
            await this.runSingleTest(test);
        }

        this.printSummary();
    }

    // ‡∏£‡∏±‡∏ô test ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
    async runSingleTest(test) {
        console.log(`\nüß™ Testing: ${test.name}`);

        try {
            const result = await test.testFunction();

            if (result === true || (result && result.passed === true)) {
                test.status = 'passed';
                this.results.passed++;
                console.log(`   ‚úÖ PASSED: ${result.message || 'Test completed successfully'}`);
            } else if (result && result.warning === true) {
                test.status = 'warning';
                this.results.warnings++;
                console.log(`   ‚ö†Ô∏è WARNING: ${result.message || 'Test completed with warnings'}`);
            } else {
                test.status = 'failed';
                this.results.failed++;
                console.log(`   ‚ùå FAILED: ${result.message || 'Test failed'}`);
            }
        } catch (error) {
            test.status = 'failed';
            this.results.failed++;
            console.log(`   ‚ùå ERROR: ${error.message}`);
        }

        this.results.total++;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    printSummary() {
        console.log('\n' + '='.repeat(60));
        console.log('üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö');
        console.log('='.repeat(60));
        console.log(`‚úÖ Passed: ${this.results.passed}`);
        console.log(`‚ùå Failed: ${this.results.failed}`);
        console.log(`‚ö†Ô∏è Warnings: ${this.results.warnings}`);
        console.log(`üìã Total: ${this.results.total}`);

        const successRate = ((this.results.passed / this.results.total) * 100).toFixed(1);
        console.log(`üìà Success Rate: ${successRate}%`);

        if (this.results.failed === 0) {
            console.log('\nüéâ ‡∏ó‡∏∏‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡πà‡∏≤‡∏ô‡∏´‡∏°‡∏î! ‡∏£‡∏∞‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        } else {
            console.log(`\n‚ö†Ô∏è ‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß ${this.results.failed} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö`);
        }
    }

    // ‡∏£‡∏±‡∏ô test ‡∏ï‡∏≤‡∏° category
    async runTestsByCategory(category) {
        const categoryTests = this.tests.filter(test => test.category === category);
        console.log(`üß™ Running ${category} tests (${categoryTests.length} tests)...`);

        for (const test of categoryTests) {
            await this.runSingleTest(test);
        }
    }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á test framework instance
const testFramework = new InstallmentTestFramework();

// ======== BASIC FUNCTION TESTS ========

testFramework.addTest('‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î InstallmentBusiness module', () => {
    if (typeof window.InstallmentBusiness === 'undefined') {
        return { passed: false, message: 'InstallmentBusiness module ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡πÇ‡∏´‡∏•‡∏î' };
    }

    const requiredFunctions = [
        'getCustomerFormData',
        'getSelectedPlan',
        'calculateTotalAmount',
        'saveInstallmentData',
        'validateRequiredDocuments'
    ];

    const missingFunctions = requiredFunctions.filter(fn =>
        typeof window.InstallmentBusiness[fn] !== 'function'
    );

    if (missingFunctions.length > 0) {
        return {
            passed: false,
            message: `‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ${missingFunctions.join(', ')}`
        };
    }

    return { passed: true, message: '‡∏ó‡∏∏‡∏Å‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' };
}, 'basic');

testFramework.addTest('‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î test functions ‡πÉ‡∏´‡∏°‡πà', () => {
    const testFunctions = [
        'testInstallmentSystemFixes',
        'highlightValidationErrors',
        'getSelectedPlanName'
    ];

    const availableFunctions = testFunctions.filter(fn =>
        typeof window[fn] === 'function' ||
        (window.InstallmentBusiness && typeof window.InstallmentBusiness[fn] === 'function')
    );

    if (availableFunctions.length === 0) {
        return {
            warning: true,
            message: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà ‡∏≠‡∏≤‡∏à‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏£‡∏∑‡∏≠ refresh ‡∏´‡∏ô‡πâ‡∏≤'
        };
    }

    return {
        passed: true,
        message: `‡∏û‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö: ${availableFunctions.join(', ')}`
    };
}, 'basic');

// ======== CUSTOMER DATA TESTS ========

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', () => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≥‡∏•‡∏≠‡∏á
    const customerData = TEST_DATA.customer;

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏° (‡∏ñ‡πâ‡∏≤‡∏ü‡∏¥‡∏•‡∏î‡πå‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
    Object.keys(customerData).forEach(key => {
        const element = document.getElementById(`customer${key.charAt(0).toUpperCase() + key.slice(1)}`);
        if (element) {
            element.value = customerData[key];
        }
    });

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getCustomerFormData
    if (window.InstallmentBusiness && window.InstallmentBusiness.getCustomerFormData) {
        const retrievedData = window.InstallmentBusiness.getCustomerFormData();

        const requiredFields = ['firstName', 'lastName', 'phone', 'idCard'];
        const missingData = requiredFields.filter(field => !retrievedData[field]);

        if (missingData.length > 0) {
            return {
                passed: false,
                message: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ: ${missingData.join(', ')}`
            };
        }

        return {
            passed: true,
            message: `‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${retrievedData.firstName} ${retrievedData.lastName}`
        };
    }

    return { passed: false, message: '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getCustomerFormData ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
}, 'customer');

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage', () => {
    if (!window.InstallmentBusiness) {
        return { passed: false, message: 'InstallmentBusiness module ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
    }

    const testData = TEST_DATA.customer;

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
    if (window.InstallmentBusiness.saveCustomerDataToStorage) {
        window.InstallmentBusiness.saveCustomerDataToStorage(testData);
    } else {
        return { passed: false, message: '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô saveCustomerDataToStorage ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (window.InstallmentBusiness.getCustomerDataFromStorage) {
        const retrievedData = window.InstallmentBusiness.getCustomerDataFromStorage();

        if (!retrievedData) {
            return { passed: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡πÑ‡∏î‡πâ' };
        }

        if (retrievedData.firstName !== testData.firstName) {
            return { passed: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å' };
        }

        return { passed: true, message: '‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• localStorage ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    }

    return { passed: false, message: '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getCustomerDataFromStorage ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
}, 'customer');

// ======== PAYMENT PLAN TESTS ========

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• Payment Plan', () => {
    if (!window.InstallmentBusiness) {
        return { passed: false, message: 'InstallmentBusiness module ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö getSelectedPlan function
    if (window.InstallmentBusiness.getSelectedPlan) {
        const plan = window.InstallmentBusiness.getSelectedPlan();

        if (!plan) {
            return { passed: false, message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment plan ‡πÑ‡∏î‡πâ' };
        }

        const requiredPlanFields = ['downPayment', 'installmentAmount', 'installmentPeriod', 'totalAmount'];
        const missingFields = requiredPlanFields.filter(field =>
            plan[field] === undefined || plan[field] === null || plan[field] <= 0
        );

        if (missingFields.length > 0) {
            return {
                passed: false,
                message: `Payment plan ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${missingFields.join(', ')}`
            };
        }

        return {
            passed: true,
            message: `Payment plan ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${plan.planName || plan.type}, Down: ‡∏ø${plan.downPayment.toLocaleString()}`
        };
    }

    return { passed: false, message: '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô getSelectedPlan ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
}, 'payment');

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö JSON serialization ‡∏Ç‡∏≠‡∏á Payment Plan', () => {
    const testPlan = TEST_DATA.paymentPlan;

    try {
        const serialized = JSON.stringify({
            id: testPlan.planType || testPlan.type || 'plan1',
            name: testPlan.planName || '‡πÅ‡∏ú‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
            down: testPlan.downPayment || 0,
            perMonth: testPlan.installmentAmount || 0,
            count: testPlan.installmentPeriod || 0
        });

        const parsed = JSON.parse(serialized);

        if (!parsed.id || !parsed.name || !parsed.down || !parsed.perMonth || !parsed.count) {
            return { passed: false, message: '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• serialized plan ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô' };
        }

        return { passed: true, message: 'JSON serialization ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' };
    } catch (error) {
        return { passed: false, message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô serialization: ${error.message}` };
    }
}, 'payment');

// ======== CART TESTS ========

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Cart Items', () => {
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ mock cart items
    if (window.InstallmentProduct) {
        window.InstallmentProduct.cartItems = TEST_DATA.cartItems;
    } else {
        window.cartItems = TEST_DATA.cartItems;
    }

    const cartItems = window.InstallmentProduct?.cartItems || window.cartItems || [];

    if (cartItems.length === 0) {
        return { passed: false, message: '‡πÑ‡∏°‡πà‡∏û‡∏ö cart items' };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const requiredFields = ['name', 'price', 'quantity'];
    let errors = [];

    cartItems.forEach((item, index) => {
        requiredFields.forEach(field => {
            if (!item[field] && item[field] !== 0) {
                errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà ${index + 1}: ‡∏Ç‡∏≤‡∏î ${field}`);
            }
        });

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö quantity field specifically (not qty)
        if (!item.quantity && item.qty) {
            errors.push(`‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà ${index + 1}: ‡πÉ‡∏ä‡πâ 'qty' ‡πÅ‡∏ó‡∏ô 'quantity' (‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ 'quantity')`);
        }
    });

    if (errors.length > 0) {
        return { passed: false, message: errors.join(', ') };
    }

    return {
        passed: true,
        message: `Cart items ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${cartItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏£‡∏ß‡∏° ‡∏ø${cartItems.reduce((sum, item) => sum + (item.total || item.price * item.quantity), 0).toLocaleString()}`
    };
}, 'cart');

// ======== VALIDATION TESTS ========

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö Payload Structure ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Backend', () => {
    const customerData = TEST_DATA.customer;
    const cartItems = TEST_DATA.cartItems;
    const plan = TEST_DATA.paymentPlan;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏ï‡∏≤‡∏°‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà
    const payload = {
        customerName: `${customerData.firstName} ${customerData.lastName}`,
        name: `${customerData.firstName} ${customerData.lastName}`,
        firstName: customerData.firstName,
        lastName: customerData.lastName,
        phone: customerData.phone,
        email: customerData.email,
        idCard: customerData.idCard,

        products: cartItems.map(item => ({
            name: item.name,
            quantity: parseInt(item.quantity || item.qty || 1), // ‡πÉ‡∏ä‡πâ 'quantity'
            price: parseFloat(item.price || 0),
            total: parseFloat(item.total || (item.price * (item.quantity || item.qty || 1)))
        })),

        paymentPlan: {
            selectedPlan: JSON.stringify({
                id: plan.planType || plan.type || 'plan1',
                name: plan.planName || '‡πÅ‡∏ú‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
                down: plan.downPayment || 0,
                perMonth: plan.installmentAmount || 0,
                count: plan.installmentPeriod || 0
            }),
            planType: plan.planType || plan.type,
            downPayment: plan.downPayment,
            monthlyPayment: plan.installmentAmount,
            terms: plan.installmentPeriod,
            totalAmount: plan.totalAmount
        },

        totalAmount: cartItems.reduce((sum, item) => sum + (item.total || item.price * item.quantity), 0),
        branchCode: '00000',
        requestId: `test_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    };

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö backend
    const requiredFields = [
        'customerName', 'firstName', 'lastName', 'phone', 'idCard',
        'products', 'paymentPlan', 'totalAmount', 'branchCode'
    ];

    const missingFields = requiredFields.filter(field => !payload[field]);

    if (missingFields.length > 0) {
        return { passed: false, message: `Payload ‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: ${missingFields.join(', ')}` };
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö products ‡πÉ‡∏ä‡πâ 'quantity' field
    const hasCorrectQuantityField = payload.products.every(p => p.hasOwnProperty('quantity'));
    if (!hasCorrectQuantityField) {
        return { passed: false, message: 'Products ‡πÑ‡∏°‡πà‡∏°‡∏µ quantity field' };
    }

    return { passed: true, message: 'Payload structure ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà backend ‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á' };
}, 'validation');

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö Error Handling Functions', () => {
    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö highlightValidationErrors function
    if (typeof window.highlightValidationErrors !== 'function' &&
        !(window.InstallmentBusiness && typeof window.InstallmentBusiness.highlightValidationErrors === 'function')) {
        return { warning: true, message: '‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô highlightValidationErrors ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
    }

    const testErrors = [
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡∏ä‡∏∑‡πà‡∏≠‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó',
        '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå',
        '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ó‡∏µ‡πà 1: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á'
    ];

    try {
        if (window.highlightValidationErrors) {
            window.highlightValidationErrors(testErrors);
        } else if (window.InstallmentBusiness && window.InstallmentBusiness.highlightValidationErrors) {
            window.InstallmentBusiness.highlightValidationErrors(testErrors);
        }

        return { passed: true, message: 'Error handling functions ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ' };
    } catch (error) {
        return { passed: false, message: `Error ‡πÉ‡∏ô error handling: ${error.message}` };
    }
}, 'validation');

// ======== INTEGRATION TESTS ========

testFramework.addTest('‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö (Integration Test)', () => {
    if (!window.InstallmentBusiness) {
        return { passed: false, message: 'InstallmentBusiness module ‡πÑ‡∏°‡πà‡∏û‡∏ö' };
    }

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    const customerData = TEST_DATA.customer;
    const cartItems = TEST_DATA.cartItems;

    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ mock data
    if (window.InstallmentProduct) {
        window.InstallmentProduct.cartItems = cartItems;
    } else {
        window.cartItems = cartItems;
    }

    // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö flow ‡∏´‡∏•‡∏±‡∏Å
    let testResults = [];

    // 1. Customer data
    try {
        const retrievedCustomer = window.InstallmentBusiness.getCustomerFormData();
        if (retrievedCustomer) {
            testResults.push('‚úÖ Customer data retrieval');
        } else {
            testResults.push('‚ùå Customer data retrieval');
        }
    } catch (e) {
        testResults.push('‚ùå Customer data retrieval (error)');
    }

    // 2. Payment plan
    try {
        const plan = window.InstallmentBusiness.getSelectedPlan();
        if (plan && plan.downPayment > 0) {
            testResults.push('‚úÖ Payment plan selection');
        } else {
            testResults.push('‚ùå Payment plan selection');
        }
    } catch (e) {
        testResults.push('‚ùå Payment plan selection (error)');
    }

    // 3. Total calculation
    try {
        const total = window.InstallmentBusiness.calculateTotalAmount();
        if (total > 0) {
            testResults.push('‚úÖ Total calculation');
        } else {
            testResults.push('‚ùå Total calculation');
        }
    } catch (e) {
        testResults.push('‚ùå Total calculation (error)');
    }

    const passedTests = testResults.filter(r => r.startsWith('‚úÖ')).length;
    const totalTests = testResults.length;

    if (passedTests === totalTests) {
        return {
            passed: true,
            message: `‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏ö ${passedTests}/${totalTests} functions`
        };
    } else {
        return {
            passed: false,
            message: `‡∏ú‡πà‡∏≤‡∏ô ${passedTests}/${totalTests} functions: ${testResults.join(', ')}`
        };
    }
}, 'integration');

// ======== MAIN TEST RUNNER FUNCTIONS ========

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
async function runInstallmentTests() {
    console.clear();
    console.log('üß™ Installment System Comprehensive Tests');
    console.log('========================================');

    await testFramework.runAllTests();

    // ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡∏°‡∏µ testInstallmentSystemFixes
    if (typeof window.testInstallmentSystemFixes === 'function') {
        console.log('\nüîß Running additional system fixes tests...');
        try {
            const additionalResults = window.testInstallmentSystemFixes();
            console.log('‚úÖ Additional tests completed');
        } catch (error) {
            console.log('‚ùå Additional tests failed:', error.message);
        }
    }

    return testFramework.results;
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏° category
async function runTestsByCategory(category) {
    console.clear();
    console.log(`üß™ Running ${category} tests...`);
    await testFramework.runTestsByCategory(category);
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
function showTestInfo() {
    console.log('üß™ Available Test Categories:');
    console.log('- basic: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô');
    console.log('- customer: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
    console.log('- payment: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô');
    console.log('- cart: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤');
    console.log('- validation: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
    console.log('- integration: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ô');
    console.log('\nCommands:');
    console.log('- runInstallmentTests() - ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î');
    console.log('- runTestsByCategory("category") - ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏≤‡∏° category');
    console.log('- showTestInfo() - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ');
}

// Export functions to global scope
window.runInstallmentTests = runInstallmentTests;
window.runTestsByCategory = runTestsByCategory;
window.showTestInfo = showTestInfo;
window.InstallmentTestFramework = testFramework;

console.log('‚úÖ Test Runner loaded successfully!');
console.log('üìã Run showTestInfo() to see available commands');
console.log('üöÄ Run runInstallmentTests() to start testing');