// ========================================
// INSTALLMENT API SYSTEM - Pattani Branch
// ‡∏£‡∏∞‡∏ö‡∏ö API ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ
// ========================================

console.log('üì¶ Loading Installment API Module...');

// =========================================
// API PERFORMANCE OPTIMIZATIONS
// =========================================

// API Response Cache
const apiCache = new Map();
const cacheExpiry = new Map();
const CACHE_DURATION = 5 * 60 * 1000; // 5 minutes

// Request batching
let pendingRequests = new Map();
let batchTimeout = null;

// API caching helper
function getCachedResponse(cacheKey) {
  if (apiCache.has(cacheKey)) {
    const expiry = cacheExpiry.get(cacheKey);
    if (Date.now() < expiry) {
      console.log(`üìã Cache hit: ${cacheKey}`);
      return apiCache.get(cacheKey);
    } else {
      // Expired cache
      apiCache.delete(cacheKey);
      cacheExpiry.delete(cacheKey);
    }
  }
  return null;
}

// Set cached response
function setCachedResponse(cacheKey, response, duration = CACHE_DURATION) {
  apiCache.set(cacheKey, response);
  cacheExpiry.set(cacheKey, Date.now() + duration);
  console.log(`üíæ Cached: ${cacheKey}`);
}

// Enhanced fetch with caching and retry
async function cachedFetch(url, options = {}, cacheKey = null, cacheDuration = CACHE_DURATION) {
  // Generate cache key if not provided
  if (!cacheKey) {
    cacheKey = `${url}_${JSON.stringify(options)}`;
  }

  // Check cache first (only for GET requests)
  if (!options.method || options.method === 'GET') {
    const cached = getCachedResponse(cacheKey);
    if (cached) {
      return cached;
    }
  }

  const startTime = performance.now();

  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const data = await response.json();

    // Cache successful GET responses
    if (!options.method || options.method === 'GET') {
      setCachedResponse(cacheKey, data, cacheDuration);
    }

    const duration = performance.now() - startTime;
    console.log(`üåê API call completed: ${url} (${duration.toFixed(2)}ms)`);

    return data;

  } catch (error) {
    console.error(`‚ùå API call failed: ${url}`, error);
    throw error;
  }
}

// Request batching for multiple API calls
function batchApiCall(apiCall) {
  return new Promise((resolve, reject) => {
    const batchId = Date.now() + Math.random();
    pendingRequests.set(batchId, { apiCall, resolve, reject });

    if (batchTimeout) {
      clearTimeout(batchTimeout);
    }

    batchTimeout = setTimeout(async () => {
      const batch = Array.from(pendingRequests.values());
      pendingRequests.clear();

      console.log(`üîÑ Processing batch of ${batch.length} API calls`);

      // Execute all API calls in parallel
      const results = await Promise.allSettled(
        batch.map(({ apiCall }) => apiCall())
      );

      // Resolve/reject individual promises
      results.forEach((result, index) => {
        const { resolve, reject } = batch[index];
        if (result.status === 'fulfilled') {
          resolve(result.value);
        } else {
          reject(result.reason);
        }
      });

    }, 50); // 50ms batch window
  });
}

// Clear API cache
function clearApiCache() {
  apiCache.clear();
  cacheExpiry.clear();
  console.log('üßπ API cache cleared');
}

// =========================================
// API CONFIGURATION
// =========================================
const API_CONFIG = {
  baseURL: window.location.origin,
  timeout: 30000,
  retryAttempts: 3,
  retryDelay: 1000
};

// =========================================
// BRANCH DATA MANAGEMENT
// =========================================

// Helper function to get branch code
function getBranchCode() {
  if (window.BRANCH_CODE) return window.BRANCH_CODE;
  if (window.urlParams) return window.urlParams.get('branch');
  if (localStorage.getItem('branchCode')) return localStorage.getItem('branchCode');
  return 'PATTANI';
}

async function loadBranchInstallments() {
  try {
    console.log('üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≠‡∏ô...');

    const token = localStorage.getItem('authToken') || '';
    const branchCode = window.BRANCH_CODE || getBranchCode() || 'PATTANI';

    // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ API endpoints ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
    const apiEndpoints = [
      // API 1: Branch Stock API (‡∏°‡∏±‡∏Å‡∏à‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏à‡∏£‡∏¥‡∏á)
      {
        url: `/api/branch-stock/taxType?branch_code=${branchCode}&verified=true&purchaseType=installment`,
        dataPath: 'data'
      },
      // API 2: Product Image API (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏¥‡∏ï‡∏†‡∏±‡∏ì‡∏ë‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ)
      {
        url: `/api/product-image/pricing/installment`,
        dataPath: 'data'
      },
      // API 3: Fallback endpoint
      {
        url: `/api/installments/items`,
        dataPath: 'items'
      }
    ];

    let installmentItems = [];
    let lastError = null;

    // ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    for (const endpoint of apiEndpoints) {
      try {
        console.log(`üîç ‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API: ${endpoint.url}`);

        const response = await fetch(endpoint.url, {
          method: 'GET',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': token ? `Bearer ${token}` : '',
            'X-Branch': branchCode
          }
        });

        if (response.ok) {
          const data = await response.json();
          const items = data[endpoint.dataPath] || data.data || data.items || [];

          if (Array.isArray(items) && items.length > 0) {
            installmentItems = items;
            console.log(`‚úÖ ‡πÉ‡∏ä‡πâ API: ${endpoint.url} - ‡∏û‡∏ö ${items.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
            break;
          } else {
            console.log(`‚ö†Ô∏è API ${endpoint.url} ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤`);
          }
        } else {
          console.log(`‚ùå API ${endpoint.url} - HTTP ${response.status}`);
        }
      } catch (err) {
        console.log(`‚ùå API ${endpoint.url} - Error: ${err.message}`);
        lastError = err;
        continue;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ API ‡πÑ‡∏´‡∏ô‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
    if (installmentItems.length === 0) {
      const errorMsg = lastError ? `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${lastError.message}` : '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö API ‡πÑ‡∏î‡πâ';
      console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API ‡πÑ‡∏î‡πâ');

      if (window.InstallmentUI && window.InstallmentUI.showToast) {
        window.InstallmentUI.showToast(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ: ${errorMsg}`, 'error');
      }

      throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API ‡πÑ‡∏î‡πâ: ${errorMsg}`);
    }

    // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô global variables
    window.branchInstallments = installmentItems;

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô InstallmentProduct module
    if (window.InstallmentProduct && window.InstallmentProduct.setBranchInstallments) {
      window.InstallmentProduct.setBranchInstallments(installmentItems);
      console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï InstallmentProduct module');
    } else {
      // ‡∏ñ‡πâ‡∏≤ InstallmentProduct ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
      setTimeout(() => {
        if (window.InstallmentProduct && window.InstallmentProduct.setBranchInstallments) {
          window.InstallmentProduct.setBranchInstallments(installmentItems);
          console.log('‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï InstallmentProduct module (delayed)');
        } else {
          console.warn('‚ö†Ô∏è InstallmentProduct module ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô');
        }
      }, 1000);
    }

    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${installmentItems.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`);
    return installmentItems;

  } catch (error) {
    console.error('‚ùå Error loading branch installments:', error);
    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ: ${error.message}`, 'error');
    }

    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÉ‡∏ô global variables
    window.branchInstallments = [];

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô InstallmentProduct module ‡πÄ‡∏õ‡πá‡∏ô array ‡∏ß‡πà‡∏≤‡∏á
    if (window.InstallmentProduct && window.InstallmentProduct.setBranchInstallments) {
      window.InstallmentProduct.setBranchInstallments([]);
      console.log('‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô InstallmentProduct module');
    }

    // ‡πÇ‡∏¢‡∏ô error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
    throw error;
  }
}



async function loadBranchInfo() {
  try {
    const BRANCH_CODE = window.InstallmentCore?.BRANCH_CODE || 'PATTANI';
    const token = localStorage.getItem('authToken') || '';

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å /api/branch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á list ‡∏™‡∏≤‡∏Ç‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö frontstore_pattani.html)
    const res = await fetch('/api/branch', {
      headers: { Authorization: `Bearer ${token}` }
    });
    const js = await res.json();

    if (res.ok && js.success) {
      // ‡∏´‡∏≤ record ‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö BRANCH_CODE
      const branch = js.data.find(b => b.branch_code === BRANCH_CODE);
      if (branch) {
        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô DOM
        const branchInfoElement = document.getElementById('branchInfo');
        if (branchInfoElement) {
          branchInfoElement.textContent = `${branch.name} ‚Äî ${branch.address}`;
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó title ‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏£‡∏¥‡∏á
        document.title = `‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô - ${branch.name}`;
        const pageTitle = document.getElementById('pageTitle');
        if (pageTitle) {
          pageTitle.textContent = `‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô ${branch.name}`;
        }

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡πÉ‡∏ô global variable
        window.currentBranchInfo = {
          code: branch.branch_code,
          name: branch.name,
          address: branch.address,
          taxId: branch.taxId || '-',
          tel: branch.tel || '-',
        };

        console.log('‚úÖ Branch info loaded:', branch.name);
        return;
      }
    }
    throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤');
  } catch (err) {
    console.warn('loadBranchInfo error:', err);
    const BRANCH_CODE = window.InstallmentCore?.BRANCH_CODE || 'PATTANI';

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback
    window.currentBranchInfo = { code: BRANCH_CODE, name: '‡∏™‡∏≤‡∏Ç‡∏≤ ' + BRANCH_CODE };

    const branchInfoElement = document.getElementById('branchInfo');
    if (branchInfoElement) {
      branchInfoElement.textContent = '‡∏™‡∏≤‡∏Ç‡∏≤: (‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•)';
    }
  }
}

// ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≥ - ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

// =========================================
// CUSTOMER SEARCH AND MANAGEMENT
// =========================================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å API installment/customers
async function loadCustomersFromAPI() {
  try {
    console.log('üîç Loading customers from installment API...');

    const token = localStorage.getItem('authToken');
    if (!token) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö authentication token');
    }

    const response = await fetch('/api/installment/customers', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP Error: ${response.status}`);
    }

    const result = await response.json();

    if (result.success && result.data) {
      console.log(`‚úÖ Loaded ${result.data.length} customers from API`);
      return result.data;
    } else {
      throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
    }

  } catch (error) {
    console.error('‚ùå Error loading customers from API:', error);
    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ' + error.message, 'error');
    }
    return [];
  }
}

async function searchExistingCustomer() {
  const searchQuery = document.getElementById('customerSearch').value.trim();

  if (!searchQuery || searchQuery.length < 3) {
    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 3 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', 'warning');
    }
    return;
  }

  try {
    const searchBtn = document.getElementById('btnSearchCustomer');
    if (searchBtn) {
      searchBtn.disabled = true;
      searchBtn.innerHTML = '<span class="loading loading-spinner loading-sm"></span> ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤...';
    }

    // ‡πÉ‡∏ä‡πâ API installment/customers ‡πÅ‡∏ó‡∏ô
    const customers = await loadCustomersFromAPI();

    // ‡∏Å‡∏£‡∏≠‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ï‡∏≤‡∏°‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
    const filteredResults = customers.filter(customer => {
      const searchLower = searchQuery.toLowerCase();
      return (
        customer.customerName?.toLowerCase().includes(searchLower) ||
        customer.phone?.includes(searchQuery) ||
        customer.taxId?.includes(searchQuery) ||
        customer.email?.toLowerCase().includes(searchLower) ||
        `${customer.firstName || ''} ${customer.lastName || ''}`.toLowerCase().includes(searchLower)
      );
    });

    displayCustomerSearchResult(filteredResults);

  } catch (error) {
    console.error('Error searching customers:', error);
    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', 'error');
    }
  } finally {
    const searchBtn = document.getElementById('btnSearchCustomer');
    if (searchBtn) {
      searchBtn.disabled = false;
      searchBtn.innerHTML = '<i class="bi bi-search"></i>';
    }
  }
}

function displayCustomerSearchResult(results) {
  const resultsContainer = document.getElementById('customerSearchResults');
  const resultsList = document.getElementById('customerResultsList');

  if (!resultsContainer || !resultsList) return;

  if (!results || results.length === 0) {
    resultsContainer.classList.add('hidden');
    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤', 'info');
    }
    return;
  }

  resultsList.innerHTML = results.map(customer => {
    // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å installment API ‡πÅ‡∏•‡∏∞ customer API
    const customerId = customer._id || customer.id;
    const customerName = customer.customerName || customer.name || `${customer.firstName || ''} ${customer.lastName || ''}`.trim();
    const phone = customer.phone || '';
    const taxId = customer.taxId || customer.idCard || '';
    const email = customer.email || '';

    return `
    <div class="p-3 hover:bg-gray-50 cursor-pointer border-b border-gray-200 customer-result"
         onclick="selectCustomer('${customerId}', '${taxId}')">
      <div class="flex justify-between items-start">
        <div class="flex-1">
          <h4 class="font-semibold text-gray-900">${customerName}</h4>
          <p class="text-sm text-gray-600">üì± ${phone}</p>
          <p class="text-sm text-gray-600">üÜî ${taxId}</p>
          ${email ? `<p class="text-sm text-gray-600">‚úâÔ∏è ${email}</p>` : ''}
        </div>
        <span class="text-xs bg-blue-100 text-blue-800 px-2 py-1 rounded">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</span>
      </div>
    </div>
    `;
  }).join('');

  resultsContainer.classList.remove('hidden');

  if (window.InstallmentUI && window.InstallmentUI.showToast) {
    window.InstallmentUI.showToast(`‡∏û‡∏ö‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ${results.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`, 'success');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: selectCustomer ‡∏ó‡∏µ‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API - ‡πÉ‡∏ä‡πâ function ‡∏ó‡∏µ‡πà line 1269 ‡πÅ‡∏ó‡∏ô

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏•‡πâ‡∏≤‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
function clearSelectedCustomer() {
  window.selectedCustomerId = null;

  const selectedCustomerDisplay = document.getElementById('selectedCustomerDisplay');
  if (selectedCustomerDisplay) {
    selectedCustomerDisplay.classList.add('hidden');
  }

  if (window.InstallmentUI && window.InstallmentUI.showToast) {
    window.InstallmentUI.showToast('‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤', 'info');
  }
}

// ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≥ - ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á

// =========================================
// FILE UPLOAD UTILITIES
// =========================================

async function uploadFile(file, uploadEndpoint, fieldName = 'file', filename = 'file', extras = {}) {
  try {
    const formData = new FormData();
    formData.append(fieldName, file, filename);

    // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°
    Object.keys(extras).forEach(key => {
      formData.append(key, extras[key]);
    });

    // üîß Attach citizenId in header for backend folder creation
    const headers = {
      'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
    };
    if (extras.citizenId) {
      headers['X-Citizen-Id'] = extras.citizenId;
    }

    const response = await fetch(uploadEndpoint, {
      method: 'POST',
      headers,
      body: formData
    });

    if (!response.ok) {
      throw new Error(`Upload failed: ${response.status}`);
    }

    const result = await response.json();
    return result;

  } catch (error) {
    console.error('File upload error:', error);
    throw error;
  }
}

async function uploadSignature(pad, urlFieldId) {
  try {
    if (pad.isEmpty()) {
      throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ã‡πá‡∏ô‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô');
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    const validation = window.InstallmentUI?.validateCustomerData ?
                     window.InstallmentUI.validateCustomerData() :
                     { isValid: true, citizenId: null };
    console.log('üîç Customer data validation:', validation);

    let citizenId = validation.citizenId || window.InstallmentUI?.getCitizenId?.();

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö citizenId ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤ default
    if (!citizenId) {
      console.warn('‚ö†Ô∏è No citizenId found, using default value');
      citizenId = '0000000000000'; // ‡∏Ñ‡πà‡∏≤ default ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏û‡∏ö citizenId

      // ‡πÅ‡∏™‡∏î‡∏á toast ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      if (window.InstallmentUI && window.InstallmentUI.showToast) {
        window.InstallmentUI.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô', 'warning');
      }
    }

    const dataURL = pad.toDataURL();
    const response = await fetch(dataURL);
    const blob = await response.blob();

    const timestamp = new Date().getTime();
    const filename = `signature_${timestamp}.png`;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    const uploadExtras = {
      type: 'signature',
      timestamp: timestamp,
      citizenId: citizenId,
      customerId: window.currentCustomerId || '',
      signatureType: urlFieldId === 'customerSignatureUrl' ? 'customer' : 'salesperson',
      branchCode: window.BRANCH_CODE || getBranchCode() || ''
    };

    console.log('üì§ Uploading signature with data:', uploadExtras);

    const uploadResult = await uploadFile(blob, '/api/upload-documents/signature', 'file', filename, uploadExtras);

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URL field
    const urlField = document.getElementById(urlFieldId);
    if (urlField) {
      urlField.value = uploadResult.url;
      console.log('‚úÖ Updated URL field:', urlFieldId, uploadResult.url);
    }

    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
    }

    return uploadResult.url;

  } catch (error) {
    console.error('Signature upload error:', error);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° error ‡∏ó‡∏µ‡πà‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô
    let errorMessage = '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
    if (error.message.includes('citizenId is required')) {
      errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô';
    } else if (error.message.includes('400')) {
      errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤';
    } else {
      errorMessage += ': ' + error.message;
    }

    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast(errorMessage, 'error');
    }
    throw error;
  }
}

// =========================================
// EXPORT API FUNCTIONS
// =========================================

window.InstallmentAPI = {
  // Core functions
  getBranchCode,
  loadBranchInstallments,
  loadBranchInfo,
  loadEmployeeProfile,

  // Customer management
  searchExistingCustomer,
  displayCustomerSearchResult,
  selectCustomer,
  fillCustomerForm,

  // Customer data utilities - ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å InstallmentUI ‡πÅ‡∏ó‡∏ô

  // File and signature upload
  uploadFile,
  uploadSignature,

  // Email functions
  updateEmailStatus,
  previewEmail,
  sendInstallmentEmail,
  handleEmailDocumentChange,

  // Utility functions
  removeLocalityPrefix,
  removePrefixes,
  readCard,

  // Document functions
  fetchNextQuotationNumber,
  downloadQuotationPdf,
  downloadInvoicePdf,
  downloadReceiptPdf,
  downloadDownPaymentReceiptPdf,
  loadQuotationPdf,
  updateStep4Summary,

  // Stock functions
  checkStockAfterSale,

  // Enhanced search functions
  searchCustomersEnhanced,
  quickSearchCustomer,
  advancedSearchCustomers,
  getCustomerDetails,

  // Address functions
  loadAddressData,
  getDistrictsByProvince,
  getSubdistrictsByDistrict,
  getPostalCode,

  // Loan management integration
  syncCustomerToLoanSystem,
  updateCustomerInLoanSystem,
  getCustomerDebtAnalysis,

  // Validation functions (use InstallmentCore instead)

  // Auto-save functions
  autoSaveFormData,
  loadSavedFormData,
  clearSavedFormData,
  updateAutoSaveStatus,

  // Configuration
  API_CONFIG,

  // Performance optimization functions
  cachedFetch,
  batchApiCall,
  getCachedResponse,
  setCachedResponse,
  clearApiCache
};

console.log('‚úÖ Installment API Module loaded');

// =================== Email Functions ===================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏≠‡∏µ‡πÄ‡∏°‡∏•
function updateEmailStatus(type, message) {
  const statusDiv = document.getElementById('emailSendStatus');
  if (!statusDiv) return;

  const typeClasses = {
    sending: 'bg-blue-100 text-blue-700',
    success: 'bg-green-100 text-green-700',
    error: 'bg-red-100 text-red-700',
    info: 'bg-gray-100 text-gray-700'
  };

  statusDiv.className = `p-3 rounded-lg text-center ${typeClasses[type] || typeClasses.info}`;
  statusDiv.innerHTML = message;
  statusDiv.classList.remove('hidden');

  // ‡∏ã‡πà‡∏≠‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô error)
  if (type !== 'error') {
    setTimeout(() => {
      statusDiv.classList.add('hidden');
    }, 5000);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•
async function previewEmail() {
  try {
    const customerEmail = document.getElementById('customerEmail').value.trim();

    if (!customerEmail) {
      window.InstallmentUI.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô', 'warning');
      return;
    }

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
    const customerName = `${document.getElementById('customerPrefix').value} ${document.getElementById('customerFirstName').value} ${document.getElementById('customerLastName').value}`.trim();
    const customMessage = document.getElementById('emailCustomMessage').value.trim();

    const selectedDocs = [];
      if (document.getElementById('emailQuotation').checked) selectedDocs.push('‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤');
  if (document.getElementById('emailInvoice').checked) selectedDocs.push('‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ');
  if (document.getElementById('emailReceipt').checked) selectedDocs.push('‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ');

    const previewContent = `
      <div class="space-y-3">
        <p><strong>‡∏ñ‡∏∂‡∏á:</strong> ${customerEmail}</p>
        <p><strong>‡∏ä‡∏∑‡πà‡∏≠‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</strong> ${customerName}</p>
        <p><strong>‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á:</strong> ${selectedDocs.join(', ')}</p>
        ${customMessage ? `<p><strong>‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©:</strong> ${customMessage}</p>` : ''}
        <hr>
        <p class="text-sm text-gray-600">
          <strong>‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</strong><br>
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì${customerName}<br><br>
          ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÑ‡∏ß‡πâ‡∏ß‡∏≤‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏Å‡∏±‡∏ö‡πÄ‡∏£‡∏≤<br>
          ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏ô‡∏ö: ${selectedDocs.join(', ')}<br>
          ${customMessage ? `<br>${customMessage}<br>` : ''}
          <br>‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏Ñ‡∏£‡∏±‡∏ö/‡∏Ñ‡πà‡∏∞
        </p>
      </div>
    `;

    // ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô modal
    const modal = document.createElement('div');
    modal.className = 'fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50';
    modal.innerHTML = `
      <div class="bg-white rounded-lg p-6 max-w-md w-full mx-4 max-h-96 overflow-y-auto">
        <h3 class="text-lg font-bold mb-4">üìß ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•</h3>
        ${previewContent}
        <div class="mt-4 text-right">
          <button onclick="this.closest('.fixed').remove()" class="btn btn-primary">‡∏õ‡∏¥‡∏î</button>
        </div>
      </div>
    `;
    document.body.appendChild(modal);
  } catch (error) {
    console.error('Preview email error:', error);
    window.InstallmentUI.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á', 'error');
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏à‡∏£‡∏¥‡∏á - ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏≠‡∏Å ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏ó‡πâ‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏ó‡∏ô

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏ô checkbox
function handleEmailDocumentChange() {
  const hasAnyChecked = document.getElementById('emailQuotation').checked ||
                        document.getElementById('emailInvoice')?.checked ||
                        document.getElementById('emailReceipt')?.checked;

  const customerEmail = document.getElementById('customerEmail').value.trim();

  // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
  if (!hasAnyChecked) {
    updateEmailStatus('info', '‚ö†Ô∏è ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏î‡πÄ‡∏•‡∏¢ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥');
  } else if (!customerEmail) {
    updateEmailStatus('info', 'üìß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£');
  } else {
    updateEmailStatus('info', '‚úÖ ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô Step 4');
  }
}

// =================== Card Reader Functions ===================

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏î‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤ "‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà", "‡∏´‡∏°‡∏π‡πà", "‡∏ï‡∏≥‡∏ö‡∏•", "‡∏≠‡∏≥‡πÄ‡∏†‡∏≠", "‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î" ‡∏≠‡∏≠‡∏Å (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
function removeLocalityPrefix(str) {
  if (!str) return '';
  let result = str.trim();
  result = result.replace(/^‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà\s*/i, '').replace(/^‡∏´‡∏°‡∏π‡πà\s*/i, '');
  result = result.replace(/^‡∏ï‡∏≥‡∏ö‡∏•\s*/i, '');
  result = result.replace(/^‡∏≠‡∏≥‡πÄ‡∏†‡∏≠\s*/i, '');
  result = result.replace(/^‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î\s*/i, '');
  return result.trim();
}

// trim ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
function removePrefixes(str) {
  if (!str) return '';
  return str.trim();
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
function calculateAgeFromIdCard(citizenId) {
  if (!citizenId || citizenId.length !== 13) {
    return null;
  }

  try {
    // ‡∏î‡∏∂‡∏á‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà 2-3)
    const yearDigits = citizenId.substring(1, 3);
    let birthYear = parseInt(yearDigits);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ 25xx (‡πÄ‡∏ä‡πà‡∏ô 25 = 2525)
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 50 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ 24xx (‡πÄ‡∏ä‡πà‡∏ô 65 = 2465)
    if (birthYear < 50) {
      birthYear = 2500 + birthYear - 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    } else {
      birthYear = 2400 + birthYear - 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà 4-5 ‡πÅ‡∏•‡∏∞ 6-7)
    const birthMonth = parseInt(citizenId.substring(3, 5));
    const birthDay = parseInt(citizenId.substring(5, 7));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if (birthMonth < 1 || birthMonth > 12 || birthDay < 1 || birthDay > 31) {
      return null;
    }

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏
    const today = new Date();
    const birthDate = new Date(birthYear, birthMonth - 1, birthDay);

    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();

    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
      age--;
    }

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡∏≠‡∏≤‡∏¢‡∏∏
    if (age < 0 || age > 150) {
      return null;
    }

    return age;
  } catch (error) {
    console.error('Error calculating age:', error);
    return null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
function calculateBirthDateFromIdCard(citizenId) {
  if (!citizenId || citizenId.length !== 13) {
    return null;
  }

  try {
    // ‡∏î‡∏∂‡∏á‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà 2-3)
    const yearDigits = citizenId.substring(1, 3);
    let birthYear = parseInt(yearDigits);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏õ‡∏µ ‡∏û.‡∏®. ‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤ 50 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ 25xx (‡πÄ‡∏ä‡πà‡∏ô 25 = 2525)
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏•‡∏Ç 2 ‡∏´‡∏•‡∏±‡∏Å‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö 50 ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ 24xx (‡πÄ‡∏ä‡πà‡∏ô 65 = 2465)
    if (birthYear < 50) {
      birthYear = 2500 + birthYear - 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    } else {
      birthYear = 2400 + birthYear - 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô ‡∏Ñ.‡∏®.
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î (‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà 4-5 ‡πÅ‡∏•‡∏∞ 6-7)
    const birthMonth = parseInt(citizenId.substring(3, 5));
    const birthDay = parseInt(citizenId.substring(5, 7));

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
    if (birthMonth < 1 || birthMonth > 12 || birthDay < 1 || birthDay > 31) {
      return null;
    }

    // Format ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô YYYY-MM-DD ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö HTML date input
    const formattedMonth = birthMonth.toString().padStart(2, '0');
    const formattedDay = birthDay.toString().padStart(2, '0');

    return `${birthYear}-${formattedMonth}-${formattedDay}`;
  } catch (error) {
    console.error('Error calculating birth date:', error);
    return null;
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD
function parseBirthDateFromCard(birthDateData) {
  if (!birthDateData) return null;

  console.log(`üîç Parsing birth date:`, birthDateData, typeof birthDateData);

  try {
    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÅ‡∏•‡πâ‡∏ß‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY-MM-DD ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
    if (typeof birthDateData === 'string' && birthDateData.match(/^\d{4}-\d{2}-\d{2}$/)) {
      console.log(`‚úÖ Already in YYYY-MM-DD format: ${birthDateData}`);
      return birthDateData;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô Date object
    if (birthDateData instanceof Date) {
      const formatted = birthDateData.toISOString().split('T')[0];
      console.log(`‚úÖ Converted Date object to: ${formatted}`);
      return formatted;
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡πà‡∏≤‡∏á‡πÜ
    if (typeof birthDateData === 'string') {
      let cleanedDate = birthDateData.trim();

      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö DD/MM/YYYY ‡∏´‡∏£‡∏∑‡∏≠ DD-MM-YYYY
      if (cleanedDate.match(/^\d{1,2}[\/\-]\d{1,2}[\/\-]\d{4}$/)) {
        const parts = cleanedDate.split(/[\/\-]/);
        const day = parts[0].padStart(2, '0');
        const month = parts[1].padStart(2, '0');
        const year = parts[2];
        const formatted = `${year}-${month}-${day}`;
        console.log(`‚úÖ Converted DD/MM/YYYY to: ${formatted}`);
        return formatted;
      }

      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö YYYY/MM/DD ‡∏´‡∏£‡∏∑‡∏≠ YYYY-MM-DD
      if (cleanedDate.match(/^\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}$/)) {
        const parts = cleanedDate.split(/[\/\-]/);
        const year = parts[0];
        const month = parts[1].padStart(2, '0');
        const day = parts[2].padStart(2, '0');
        const formatted = `${year}-${month}-${day}`;
        console.log(`‚úÖ Converted YYYY/MM/DD to: ${formatted}`);
        return formatted;
      }

      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 20231225 (YYYYMMDD)
      if (cleanedDate.match(/^\d{8}$/)) {
        const year = cleanedDate.substring(0, 4);
        const month = cleanedDate.substring(4, 6);
        const day = cleanedDate.substring(6, 8);
        const formatted = `${year}-${month}-${day}`;
        console.log(`‚úÖ Converted YYYYMMDD to: ${formatted}`);
        return formatted;
      }

      // ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÄ‡∏ä‡πà‡∏ô 25231225 (DDMMYYYY)
      if (cleanedDate.match(/^\d{8}$/) && cleanedDate.substring(4, 8) > '1900') {
        const day = cleanedDate.substring(0, 2);
        const month = cleanedDate.substring(2, 4);
        const year = cleanedDate.substring(4, 8);
        const formatted = `${year}-${month}-${day}`;
        console.log(`‚úÖ Converted DDMMYYYY to: ${formatted}`);
        return formatted;
      }

      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ Date constructor ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏õ‡∏•‡∏á
      const dateObj = new Date(cleanedDate);
      if (!isNaN(dateObj.getTime())) {
        const formatted = dateObj.toISOString().split('T')[0];
        console.log(`‚úÖ Converted generic string to: ${formatted}`);
        return formatted;
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç (timestamp)
    if (typeof birthDateData === 'number') {
      const dateObj = new Date(birthDateData);
      if (!isNaN(dateObj.getTime())) {
        const formatted = dateObj.toISOString().split('T')[0];
        console.log(`‚úÖ Converted timestamp to: ${formatted}`);
        return formatted;
      }
    }

    console.warn(`‚ö†Ô∏è Could not parse birth date format: ${birthDateData}`);
    return null;

  } catch (error) {
    console.error(`‚ùå Error parsing birth date: ${birthDateData}`, error);
    return null;
  }
}

// ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô + removeLocalityPrefix() ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏
async function readCard() {
  console.log('readCard() ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß');
  let loaderId = null;

  try {
    // ‡πÅ‡∏™‡∏î‡∏á loading ‡∏î‡πâ‡∏ß‡∏¢ LoadingSystem v2.0.0
    if (window.LoadingSystem && typeof window.LoadingSystem.show === 'function') {
      loaderId = window.LoadingSystem.show({
        message: '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô...',
        showProgress: true,
        autoProgress: true
      });
    } else {
      // Fallback ‡∏ñ‡πâ‡∏≤ LoadingSystem ‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
      if (typeof showToast === 'function') {
        showToast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£...', 'info');
      }
    }

    const token = localStorage.getItem('authToken') || '';
    const branchCode = getBranchCode();

    const resp = await fetch('/api/read-card', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': 'Bearer ' + token,
        'X-Branch-Code': branchCode // ‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤
      }
    });

    const js = await resp.json();
    console.log('üîç Card reader API response:', js);

    if (!resp.ok || !js.success) {
      let errorMessage = js.error || 'unknown error';

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ HTTP 500 error ‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©
      if (resp.status === 500) {
        errorMessage = '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á';
        console.warn('üîå Card reader service unavailable (HTTP 500)');

        // Focus ‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏á
        setTimeout(() => {
          const firstNameInput = document.getElementById('customerFirstName');
          if (firstNameInput) {
            firstNameInput.focus();
            firstNameInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
          }
        }, 1500);

        showToast(errorMessage, 'warning');
        showToast('üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏ï‡∏ô‡πÄ‡∏≠‡∏á ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏ä‡πà‡∏≠‡∏á‡∏ä‡∏∑‡πà‡∏≠', 'info');
      } else {
        showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡πÑ‡∏î‡πâ: ' + errorMessage, 'error');
      }

      return;
    }

    const d = js.data;
    console.log('üìã Card data received:', d);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á array ‡πÄ‡∏Å‡πá‡∏ö elements ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÄ‡∏û‡∏∑‡πà‡∏≠ trigger events ‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á
    const updatedElements = [];

    // ‚úÖ ‡πÉ‡∏ä‡πâ null-safe helper function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö readCard (‡πÑ‡∏°‡πà trigger events ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ)
    const setElementValue = (id, value) => {
      const element = document.getElementById(id);
      if (element) {
        element.value = value || '';
        updatedElements.push(element);
        console.log(`‚úÖ Set ${id} = "${value}"`);
      } else {
        console.warn(`‚ö†Ô∏è Element '${id}' not found while setting card data`);
      }
    };

    // ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    setElementValue('customerPrefix', d.titleTh || d.TitleTh);
    setElementValue('customerFirstName', d.firstNameTh || d.FirstNameTh);
    setElementValue('customerLastName', d.lastNameTh || d.LastNameTh);
    setElementValue('customerIdCard', d.citizenId || d.Citizenid);

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
    const citizenId = d.citizenId || d.Citizenid;
    let calculatedAge = d.age || null; // ‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å API ‡∏Å‡πà‡∏≠‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ null

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô (‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠ field ‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢)
    const birthDateFromCard = d.birthDate || d.dateOfBirth || d.birth_date || d.dob || d.Birth_Date || d.DateOfBirth ||
                               d.birthdayTh || d.birthdayEn || d.birthday || d.DateBirth || d.birth;

    console.log(`üîç Debug birth date fields from card:`, {
      birthDate: d.birthDate,
      dateOfBirth: d.dateOfBirth,
      birth_date: d.birth_date,
      dob: d.dob,
      Birth_Date: d.Birth_Date,
      DateOfBirth: d.DateOfBirth,
      birthdayTh: d.birthdayTh,
      birthdayEn: d.birthdayEn,
      birthday: d.birthday,
      DateBirth: d.DateBirth,
      birth: d.birth,
      selected: birthDateFromCard
    });

    if (birthDateFromCard) {
      console.log(`üìÖ Birth date from card reader: ${birthDateFromCard} (type: ${typeof birthDateFromCard})`);

      let formattedBirthDate = null;

      try {
        formattedBirthDate = parseBirthDateFromCard(birthDateFromCard);

        if (formattedBirthDate) {
          setElementValue('customerBirthDate', formattedBirthDate);
          console.log(`‚úÖ Set birth date from card: ${formattedBirthDate}`);

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£
          const birthDate = new Date(formattedBirthDate);
          const today = new Date();
          let age = today.getFullYear() - birthDate.getFullYear();
          const monthDiff = today.getMonth() - birthDate.getMonth();

          if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
            age--;
          }

          setElementValue('customerAge', age);
          console.log(`üéÇ Calculated age from birth date: ${age} years`);
        }
      } catch (error) {
        console.warn(`‚ö†Ô∏è Could not parse birth date from card: ${birthDateFromCard}`, error);
      }
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏ö‡∏±‡∏ï‡∏£ ‡πÅ‡∏ï‡πà‡∏°‡∏µ‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å API
    if (!birthDateFromCard && calculatedAge) {
      setElementValue('customerAge', calculatedAge);
      console.log(`üéÇ Using age from API: ${calculatedAge} years`);
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å API ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏õ‡πá‡∏ô fallback
    if (!birthDateFromCard && !calculatedAge && citizenId) {
      const ageFromId = calculateAgeFromIdCard(citizenId);
      if (ageFromId !== null) {
        calculatedAge = ageFromId; // ‡πÉ‡∏ä‡πâ‡∏≠‡∏≤‡∏¢‡∏∏‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å ID
        setElementValue('customerAge', calculatedAge);
        console.log(`üéÇ Calculated age from ID (fallback): ${calculatedAge} years`);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏µ‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
        const birthDate = calculateBirthDateFromIdCard(citizenId);
        if (birthDate) {
          setElementValue('customerBirthDate', birthDate);
          console.log(`üìÖ Calculated birth date (fallback): ${birthDate}`);
        }
      }
    }

    // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    const addr = (d.address || d.Address || '').split('#').filter((a) => a.trim());
    if (addr.length > 0) {
      setElementValue('houseNo', removePrefixes(addr[0] || ''));
      setElementValue('moo', removeLocalityPrefix(addr[1] || ''));
      setElementValue('subDistrict', removeLocalityPrefix(addr[2] || ''));
      setElementValue('district', removeLocalityPrefix(addr[3] || ''));
      setElementValue('province', removeLocalityPrefix(addr[4] || ''));
      setElementValue('zipcode', removePrefixes(addr[5] || ''));
    }

    // Trigger events ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö elements ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß)
    console.log(`üîÑ Triggering events for ${updatedElements.length} updated elements`);
    updatedElements.forEach(element => {
      element.dispatchEvent(new Event('input', { bubbles: true }));
      element.dispatchEvent(new Event('change', { bubbles: true }));
    });

    showToast('‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏±‡∏ï‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    const customerName = `${d.titleTh || d.TitleTh || ''} ${d.firstNameTh || d.FirstNameTh || ''} ${d.lastNameTh || d.LastNameTh || ''}`.trim();

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
    if (customerName) {
      const summaryMessage = `‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤: ${customerName}${calculatedAge ? ` (‡∏≠‡∏≤‡∏¢‡∏∏ ${calculatedAge} ‡∏õ‡∏µ)` : ''}`;
      showToast(summaryMessage, 'info', { duration: 4000 });
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    if (typeof updateCustomerFormValidation === 'function') {
      updateCustomerFormValidation();
    }

    // Trigger form update events
    const customerForm = document.getElementById('customerForm');
    if (customerForm) {
      customerForm.dispatchEvent(new Event('change'));
    }

    console.log('‚úÖ Card data filled successfully');

  } catch (err) {
    console.error('‚ùå readCard error:', err);
    showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`, 'error');
  } finally {
    // ‡∏ã‡πà‡∏≠‡∏ô loading ‡∏î‡πâ‡∏ß‡∏¢ LoadingSystem v2.0.0
    if (loaderId && window.LoadingSystem && typeof window.LoadingSystem.hide === 'function') {
      window.LoadingSystem.hide(loaderId);
    }
  }
}

// ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≥ displayCustomerSearchResult2 - ‡πÉ‡∏ä‡πâ displayCustomerSearchResult ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô

// ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
async function selectCustomer(customerId, taxId) {
  try {
    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤...', 'info');
    }

    const token = localStorage.getItem('authToken');
    // Use installment API to get customer data
    const response = await fetch(`/api/installment/customers/${customerId}`, {
      headers: {
        'Authorization': 'Bearer ' + token,
        'Content-Type': 'application/json'
      }
    });

    const result = await response.json();
    console.log('üìä API Response:', result);

    if (result.success && result.data) {
      const customer = result.data;
      console.log('üë§ Customer Data:', customer);

      // ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
      fillCustomerForm(customer);

      // ‡∏ã‡πà‡∏≠‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤
      document.getElementById('customerSearchResults').classList.add('hidden');
      document.getElementById('customerSearch').value = '';

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
      if (taxId && typeof loadContactInfo === 'function') {
        loadContactInfo(taxId);
      }

      if (window.InstallmentUI && window.InstallmentUI.showToast) {
        window.InstallmentUI.showToast('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
      }
    } else {
      throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
    }

  } catch (error) {
    console.error('Select customer error:', error);
    if (window.InstallmentUI && window.InstallmentUI.showToast) {
      window.InstallmentUI.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message, 'error');
    } else {
      alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message);
    }
  }
}

// ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏•‡∏á‡πÉ‡∏ô‡∏ü‡∏≠‡∏£‡πå‡∏°
function fillCustomerForm(customer) {
  console.log('üìã ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:', customer);

  if (customer.customerType === 'individual' && customer.individual) {
    const individual = customer.individual;

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
    document.getElementById('customerPrefix').value = individual.prefix || '';
    document.getElementById('customerFirstName').value = individual.firstName || '';
    document.getElementById('customerLastName').value = individual.lastName || '';
    document.getElementById('customerIdCard').value = individual.taxId || individual.idCard || '';
    document.getElementById('customerPhone').value = individual.phone || '';
    document.getElementById('customerEmail').value = individual.email || '';

    // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏
    if (individual.birthDate || individual.birth_date || individual.dateOfBirth) {
      const birthDate = individual.birthDate || individual.birth_date || individual.dateOfBirth;
      const formattedBirthDate = parseBirthDateFromCard(birthDate);
      if (formattedBirthDate) {
        document.getElementById('customerBirthDate').value = formattedBirthDate;
        console.log(`‚úÖ Set birth date from customer data: ${formattedBirthDate}`);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏≤‡∏¢‡∏∏‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î
        const today = new Date();
        const birth = new Date(formattedBirthDate);
        let age = today.getFullYear() - birth.getFullYear();
        const monthDiff = today.getMonth() - birth.getMonth();

        if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birth.getDate())) {
          age--;
        }

        document.getElementById('customerAge').value = age;
        console.log(`‚úÖ Calculated age from customer birth date: ${age} years`);
      }
    } else if (individual.age) {
      // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏
      document.getElementById('customerAge').value = individual.age;
      console.log(`‚úÖ Set age from customer data: ${individual.age} years`);
    }

    // ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
    if (individual.address) {
      const addr = individual.address;
      console.log('üè† ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà:', addr);

      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ field name ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà
      const houseNo = addr.houseNumber || addr.houseNo || addr.house_number || addr.house || '';
      document.getElementById('houseNo').value = houseNo;
      console.log('üè† ‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà:', houseNo);

      document.getElementById('moo').value = addr.village || addr.moo || '';
      document.getElementById('subDistrict').value = addr.subDistrict || addr.tambon || '';
      document.getElementById('district').value = addr.district || addr.amphoe || '';
      document.getElementById('province').value = addr.province || addr.changwat || '';

      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢ field name ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå
      const zipcode = addr.zipCode || addr.zipcode || addr.postalCode || addr.postal_code || addr.postcode || '';
      document.getElementById('zipcode').value = zipcode;
      console.log('üìÆ ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå:', zipcode);
    } else {
      console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
    }
  } else if (customer.customerType === 'corporate' && customer.corporate) {
    const corporate = customer.corporate;

    // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏¥‡∏ï‡∏¥‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏• - ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
    document.getElementById('customerPrefix').value = '';
    document.getElementById('customerFirstName').value = corporate.contactPerson || corporate.companyName || '';
    document.getElementById('customerLastName').value = '';
    document.getElementById('customerIdCard').value = corporate.companyTaxId || '';
    document.getElementById('customerPhone').value = corporate.corporatePhone || '';
    document.getElementById('customerEmail').value = corporate.email || '';
  }
}

// ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≥ uploadFile2 ‡πÅ‡∏•‡∏∞ uploadSignature2 - ‡πÉ‡∏ä‡πâ uploadFile ‡πÅ‡∏•‡∏∞ uploadSignature ‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÅ‡∏ó‡∏ô

// Additional functions are already included in the main export above

// =============== Additional API Functions ===============

// ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô
async function loadEmployeeProfile() {
  try {
    const token = localStorage.getItem('authToken');
    const response = await fetch('/api/users/me', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (!response.ok) throw new Error(`HTTP ${response.status}`);

    const userData = await response.json();
    if (userData.success && userData.data) {
      window.currentUser = userData.data;
      if (userData.data.firstName && userData.data.lastName) {
        document.getElementById('empName').textContent =
          `${userData.data.firstName} ${userData.data.lastName}`;
      }
    }
  } catch (error) {
    console.error('Failed to load employee profile:', error);
  }
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
async function fetchNextQuotationNumber() {
  try {
    const token = localStorage.getItem('authToken');
    const response = await fetch('/api/next-quotation-number', {
      headers: { 'Authorization': `Bearer ${token}` }
    });

    if (!response.ok) throw new Error(`HTTP ${response.status}`);

    const data = await response.json();
    if (data.success) {
      return data.nextNumber;
    }
    throw new Error(data.message || 'Failed to get quotation number');
  } catch (error) {
    console.error('Error fetching quotation number:', error);
    // Return fallback number based on timestamp
    return `QT${Date.now().toString().slice(-6)}`;
  }
}

// ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
async function checkStockAfterSale() {
  try {
    const token = localStorage.getItem('authToken');
    const cartItems = window.InstallmentProduct?.cartItems || window.cartItems || [];
    const soldItems = cartItems.map(item => ({
      productId: item._id,
      imei: item.imei,
      soldQuantity: 1
    }));

    const response = await fetch('/api/stock/check-after-sale', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        branchCode: BRANCH_CODE,
        items: soldItems
      })
    });

    if (!response.ok) throw new Error(`HTTP ${response.status}`);

    const result = await response.json();
    if (result.success) {
      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏ô branchInstallments
      const branchInstallments = window.branchInstallments || [];
      result.updatedStock.forEach(stockItem => {
        const index = branchInstallments.findIndex(item =>
          item._id === stockItem.productId
        );
        if (index !== -1) {
          branchInstallments[index].qty = stockItem.newQuantity;
        }
      });

      console.log('Stock updated after sale:', result.updatedStock);
    }
  } catch (error) {
    console.error('Error checking stock after sale:', error);
  }
}

// =============== Enhanced PDF Download Functions with Debugging ===============

// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤/‡πÉ‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô
async function downloadQuotationPdf() {
  try {
    console.log('üîç DEBUG: Starting downloadQuotationPdf');
    console.log('üîç DEBUG: window.lastSuccessResponse =', window.lastSuccessResponse);

    // ‚úÖ Enhanced data extraction with multiple fallbacks
    const successResponse = window.lastSuccessResponse;
    let contractNo = successResponse?.data?.contractNo ||
                    successResponse?.data?.contract_no ||
                    successResponse?.contractNo ||
                    successResponse?.contract_no;

    // ‚úÖ Fallback: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ contractNo ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
    if (!contractNo && window.currentInstallmentData) {
      contractNo = window.currentInstallmentData.contractNo ||
                  window.currentInstallmentData.contract_no;
      console.log('üîç DEBUG: Using contractNo from currentInstallmentData:', contractNo);
    }

    // ‚úÖ Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á contractNo ‡∏à‡∏≤‡∏Å timestamp ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!contractNo) {
      const timestamp = Date.now().toString().slice(-6);
      contractNo = `INST${new Date().getFullYear().toString().slice(-2)}${timestamp}`;
      console.warn('‚ö†Ô∏è DEBUG: Generated fallback contractNo:', contractNo);

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï window.lastSuccessResponse ‡∏î‡πâ‡∏ß‡∏¢ contractNo ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏∂‡πâ‡∏ô
      if (!window.lastSuccessResponse) {
        window.lastSuccessResponse = { data: {} };
      }
      if (!window.lastSuccessResponse.data) {
        window.lastSuccessResponse.data = {};
      }
      window.lastSuccessResponse.data.contractNo = contractNo;
    }

    console.log('üîç DEBUG: Final contractNo =', contractNo);

    if (!contractNo) {
      // ‚úÖ Enhanced error message with debug info
      console.error('‚ùå DEBUG: No contract number found after all fallbacks');
      console.error('‚ùå DEBUG: Available data sources:', {
        lastSuccessResponse: !!window.lastSuccessResponse,
        lastSuccessResponseData: !!window.lastSuccessResponse?.data,
        currentInstallmentData: !!window.currentInstallmentData,
        availableKeys: window.lastSuccessResponse?.data ? Object.keys(window.lastSuccessResponse.data) : 'none'
      });

      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug: ' +
                     `lastSuccessResponse: ${!!window.lastSuccessResponse}, ` +
                     `data: ${!!window.lastSuccessResponse?.data}`);
    }

    console.log('üìÑ Downloading installment PDF for contract:', contractNo);

    const token = localStorage.getItem('authToken');
    console.log('üîç DEBUG: Token exists:', !!token);

    // ‡πÉ‡∏ä‡πâ contract route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
    const apiUrl = `/api/installment/contract/${contractNo}/pdf`;
    console.log('üîç DEBUG: API URL =', apiUrl);

    const response = await fetch(apiUrl, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/pdf'
      }
    });

    console.log('üîç DEBUG: Response status:', response.status);
    console.log('üîç DEBUG: Response headers:', response.headers);

    if (!response.ok) {
      const text = await response.text();
      console.error('‚ùå DEBUG: Response error text:', text);
      throw new Error(`HTTP ${response.status}: ${text}`);
    }

    const blob = await response.blob();
    console.log('üîç DEBUG: Blob size:', blob.size);

    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `installment-contract-${contractNo}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log('‚úÖ DEBUG: PDF download completed successfully');
    window.InstallmentUI.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
  } catch (error) {
    console.error('‚ùå DEBUG: Download installment PDF failed:', error);
    window.InstallmentUI.showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'error');
  }
}

// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
async function downloadInvoicePdf() {
  try {
    console.log('üîç DEBUG: Starting downloadInvoicePdf');
    console.log('üîç DEBUG: window.lastSuccessResponse =', window.lastSuccessResponse);

    // ‚úÖ Enhanced data extraction with multiple fallbacks
    const successResponse = window.lastSuccessResponse;
    let invoiceId = successResponse?.data?.invoiceId ||
                   successResponse?.data?.invoice_id ||
                   successResponse?.invoiceId;

    // ‚úÖ Fallback: ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ invoiceId ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏≠‡∏∑‡πà‡∏ô
    if (!invoiceId && window.currentInstallmentData) {
      invoiceId = window.currentInstallmentData.invoiceId ||
                 window.currentInstallmentData.invoice_id;
      console.log('üîç DEBUG: Using invoiceId from currentInstallmentData:', invoiceId);
    }

    // ‚úÖ Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á invoiceId ‡∏à‡∏≤‡∏Å contractNo ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    if (!invoiceId) {
      const contractNo = successResponse?.data?.contractNo ||
                        successResponse?.data?.contract_no ||
                        window.currentInstallmentData?.contractNo;

      if (contractNo) {
        invoiceId = `INV-${contractNo}`;
        console.warn('‚ö†Ô∏è DEBUG: Generated fallback invoiceId from contractNo:', invoiceId);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï window.lastSuccessResponse
        if (window.lastSuccessResponse?.data) {
          window.lastSuccessResponse.data.invoiceId = invoiceId;
        }
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á invoiceId ‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ contractNo
        const timestamp = Date.now().toString().slice(-6);
        invoiceId = `INV-${new Date().getFullYear()}${timestamp}`;
        console.warn('‚ö†Ô∏è DEBUG: Generated fallback invoiceId from timestamp:', invoiceId);
      }
    }

    console.log('üîç DEBUG: Final invoiceId =', invoiceId);

    if (!invoiceId) {
      console.error('‚ùå DEBUG: No invoice ID found after all fallbacks');
      console.error('‚ùå DEBUG: Available data sources:', {
        lastSuccessResponse: !!window.lastSuccessResponse,
        lastSuccessResponseData: !!window.lastSuccessResponse?.data,
        currentInstallmentData: !!window.currentInstallmentData,
        availableKeys: window.lastSuccessResponse?.data ? Object.keys(window.lastSuccessResponse.data) : 'none'
      });

      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug: ' +
                     `lastSuccessResponse: ${!!window.lastSuccessResponse}, ` +
                     `data: ${!!window.lastSuccessResponse?.data}`);
    }

    console.log('üìÑ Downloading invoice PDF for:', invoiceId);

    const token = localStorage.getItem('authToken');
    console.log('üîç DEBUG: Token exists:', !!token);

    const apiUrl = `/api/invoice/${invoiceId}/pdf`;
    console.log('ÔøΩÔøΩ DEBUG: API URL =', apiUrl);

    const response = await fetch(apiUrl, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/pdf'
      }
    });

    console.log('üîç DEBUG: Response status:', response.status);

    if (!response.ok) {
      const text = await response.text();
      console.error('‚ùå DEBUG: Response error text:', text);
      throw new Error(`HTTP ${response.status}: ${text}`);
    }

    const blob = await response.blob();
    console.log('üîç DEBUG: Blob size:', blob.size);

    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `invoice-${invoiceId}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log('‚úÖ DEBUG: Invoice PDF download completed successfully');
    window.InstallmentUI.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
  } catch (error) {
    console.error('‚ùå DEBUG: Download invoice PDF failed:', error);
    window.InstallmentUI.showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'error');
  }
}

// ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à & ‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
async function downloadReceiptPdf() {
  try {
    console.log('üîç DEBUG: Starting downloadReceiptPdf');
    console.log('üîç DEBUG: window.lastSuccessResponse =', window.lastSuccessResponse);

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å response ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    const successResponse = window.lastSuccessResponse;
    let contractNo = successResponse?.data?.contractNo ||
                    successResponse?.data?.contract_no ||
                    successResponse?.contractNo ||
                    successResponse?.contract_no;

    // ‚úÖ Fallback logic ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö downloadQuotationPdf
    if (!contractNo && window.currentInstallmentData) {
      contractNo = window.currentInstallmentData.contractNo ||
                  window.currentInstallmentData.contract_no;
      console.log('üîç DEBUG: Using contractNo from currentInstallmentData:', contractNo);
    }

    if (!contractNo) {
      const timestamp = Date.now().toString().slice(-6);
      contractNo = `INST${new Date().getFullYear().toString().slice(-2)}${timestamp}`;
      console.warn('‚ö†Ô∏è DEBUG: Generated fallback contractNo:', contractNo);
    }

    console.log('üîç DEBUG: Final contractNo =', contractNo);

    if (!contractNo) {
      console.error('‚ùå DEBUG: No contract number found');
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô');
    }

    console.log('üìÑ Downloading receipt PDF for contract:', contractNo);

    const token = localStorage.getItem('authToken');
    console.log('üîç DEBUG: Token exists:', !!token);

    // ‡πÉ‡∏ä‡πâ API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à & ‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ (‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå) - A4 PDF
    const apiUrl = `/api/receipt-vouchers/contract/${contractNo}/pdf`;
    console.log('üîç DEBUG: API URL =', apiUrl);

    const response = await fetch(apiUrl, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/pdf'
      }
    });

    console.log('üîç DEBUG: Response status:', response.status);

    if (!response.ok) {
      const text = await response.text();
      console.error('‚ùå DEBUG: Response error text:', text);
      throw new Error(`HTTP ${response.status}: ${text}`);
    }

    const blob = await response.blob();
    console.log('üîç DEBUG: Blob size:', blob.size);

    if (blob.size === 0) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤');
    }

    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `receipt-voucher-${contractNo}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log('‚úÖ DEBUG: Receipt PDF download completed successfully');
    window.InstallmentUI.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à & ‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
  } catch (error) {
    console.error('‚ùå DEBUG: Download receipt PDF failed:', error);
    window.InstallmentUI.showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: ${error.message}`, 'error');
  }
}

// ‚úÖ Enhanced down payment receipt PDF download (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå)
async function downloadDownPaymentReceiptPdf() {
  try {
    console.log('üîç DEBUG: Starting downloadDownPaymentReceiptPdf (down payment only)');
    console.log('üîç DEBUG: window.lastSuccessResponse =', window.lastSuccessResponse);

    // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å response ‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ß‡πâ
    const successResponse = window.lastSuccessResponse;
    let receiptVoucherId = successResponse?.data?.receiptVoucherId ||
                          successResponse?.data?.receipt_voucher_id ||
                          successResponse?.receiptVoucherId;

    // ‚úÖ Fallback: ‡∏•‡∏≠‡∏á‡∏´‡∏≤‡∏à‡∏≤‡∏Å currentInstallmentData
    if (!receiptVoucherId && window.currentInstallmentData) {
      receiptVoucherId = window.currentInstallmentData.receiptVoucherId ||
                        window.currentInstallmentData.receipt_voucher_id;
      console.log('üîç DEBUG: Using receiptVoucherId from currentInstallmentData:', receiptVoucherId);
    }

    // ‚úÖ Fallback: ‡∏™‡∏£‡πâ‡∏≤‡∏á receiptVoucherId ‡∏à‡∏≤‡∏Å contractNo
    if (!receiptVoucherId) {
      const contractNo = successResponse?.data?.contractNo ||
                        successResponse?.data?.contract_no ||
                        window.currentInstallmentData?.contractNo;

      if (contractNo) {
        receiptVoucherId = `RV-${contractNo}`;
        console.warn('‚ö†Ô∏è DEBUG: Generated fallback receiptVoucherId from contractNo:', receiptVoucherId);

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï window.lastSuccessResponse
        if (window.lastSuccessResponse?.data) {
          window.lastSuccessResponse.data.receiptVoucherId = receiptVoucherId;
        }
      } else {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á receiptVoucherId ‡πÉ‡∏´‡∏°‡πà
        const timestamp = Date.now().toString().slice(-6);
        receiptVoucherId = `RV-${new Date().getFullYear()}${timestamp}`;
        console.warn('‚ö†Ô∏è DEBUG: Generated fallback receiptVoucherId from timestamp:', receiptVoucherId);
      }
    }

    console.log('üîç DEBUG: Final receiptVoucherId =', receiptVoucherId);

    if (!receiptVoucherId) {
      console.error('‚ùå DEBUG: No receipt voucher ID found after all fallbacks');
      console.error('‚ùå DEBUG: Available data sources:', {
        lastSuccessResponse: !!window.lastSuccessResponse,
        lastSuccessResponseData: !!window.lastSuccessResponse?.data,
        currentInstallmentData: !!window.currentInstallmentData,
        availableKeys: window.lastSuccessResponse?.data ? Object.keys(window.lastSuccessResponse.data) : 'none'
      });

      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô\n\n‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Debug: ' +
                     `lastSuccessResponse: ${!!window.lastSuccessResponse}, ` +
                     `data: ${!!window.lastSuccessResponse?.data}`);
    }

    console.log('üìÑ Downloading down payment receipt PDF for voucher:', receiptVoucherId);

    const token = localStorage.getItem('authToken');
    console.log('üîç DEBUG: Token exists:', !!token);

    // ‡πÉ‡∏ä‡πâ API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏â‡∏û‡∏≤‡∏∞ (A4 PDF)
    const apiUrl = `/api/receipt-vouchers/${receiptVoucherId}/pdf-a4`;
    console.log('üîç DEBUG: API URL =', apiUrl);

    const response = await fetch(apiUrl, {
      headers: {
        'Authorization': `Bearer ${token}`,
        'Accept': 'application/pdf'
      }
    });

    console.log('üîç DEBUG: Response status:', response.status);

    if (!response.ok) {
      const text = await response.text();
      console.error('‚ùå DEBUG: Response error text:', text);
      throw new Error(`HTTP ${response.status}: ${text}`);
    }

    const blob = await response.blob();
    console.log('üîç DEBUG: Blob size:', blob.size);

    if (blob.size === 0) {
      throw new Error('‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤');
    }

    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `receipt-voucher-down-payment-${receiptVoucherId}.pdf`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);

    console.log('‚úÖ DEBUG: Down payment receipt PDF download completed successfully');
    window.InstallmentUI.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', 'success');
  } catch (error) {
    console.error('‚ùå DEBUG: Download down payment receipt PDF failed:', error);
    window.InstallmentUI.showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå: ${error.message}`, 'error');
  }
}

// =============== Debug Functions ===============

/**
 * Debug function to check window.lastSuccessResponse data
 */
function debugLastSuccessResponse() {
  console.log('üîç DEBUG: Checking window.lastSuccessResponse...');
  console.log('==========================================');

  if (!window.lastSuccessResponse) {
    console.error('‚ùå window.lastSuccessResponse is not defined');
    return false;
  }

  console.log('‚úÖ window.lastSuccessResponse exists');
  console.log('üìã Structure:', {
    success: window.lastSuccessResponse.success,
    hasData: !!window.lastSuccessResponse.data,
    dataKeys: window.lastSuccessResponse.data ? Object.keys(window.lastSuccessResponse.data) : 'none'
  });

  if (window.lastSuccessResponse.data) {
    const data = window.lastSuccessResponse.data;
    console.log('üìä Data content:');
    console.log('  - contractNo:', data.contractNo || data.contract_no || 'NOT FOUND');
    console.log('  - invoiceId:', data.invoiceId || data.invoice_id || 'NOT FOUND');
    console.log('  - receiptVoucherId:', data.receiptVoucherId || data.receipt_voucher_id || 'NOT FOUND');
    console.log('  - quotationId:', data.quotationId || data.quotation_id || 'NOT FOUND');
    console.log('  - orderId:', data.orderId || data.order_id || data._id || 'NOT FOUND');
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö currentInstallmentData ‡∏î‡πâ‡∏ß‡∏¢
  if (window.currentInstallmentData) {
    console.log('‚úÖ window.currentInstallmentData exists');
    console.log('üìä CurrentInstallmentData:');
    console.log('  - contractNo:', window.currentInstallmentData.contractNo || 'NOT FOUND');
    console.log('  - receiptVoucherId:', window.currentInstallmentData.receiptVoucherId || 'NOT FOUND');
  } else {
    console.warn('‚ö†Ô∏è window.currentInstallmentData not found');
  }

  console.log('==========================================');

  return true;
}

/**
 * Force setup window.lastSuccessResponse with fallback data
 */
function forceSetupLastSuccessResponse() {
  console.log('üîß Force setting up window.lastSuccessResponse...');

  const timestamp = Date.now().toString().slice(-6);
  const contractNo = `INST${new Date().getFullYear().toString().slice(-2)}${timestamp}`;
  const invoiceId = `INV-${contractNo}`;
  const receiptVoucherId = `RV-${contractNo}`;

  window.lastSuccessResponse = {
    success: true,
    data: {
      contractNo: contractNo,
      contract_no: contractNo,
      invoiceId: invoiceId,
      invoice_id: invoiceId,
      receiptVoucherId: receiptVoucherId,
      receipt_voucher_id: receiptVoucherId,
      quotationId: `QUO-${contractNo}`,
      orderId: `ORD-${contractNo}`,
      _id: `OBJ-${timestamp}`,
      totalAmount: 50000,
      downPayment: 15000,
      monthlyPayment: 3000,
      installmentTerms: 12,
      customerName: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
      createdAt: new Date().toISOString(),
      fallbackGenerated: true
    }
  };

  // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ currentInstallmentData ‡∏î‡πâ‡∏ß‡∏¢
  window.currentInstallmentData = window.lastSuccessResponse.data;

  console.log('‚úÖ Force setup completed with fallback data:', window.lastSuccessResponse.data);

  if (window.InstallmentUI?.showToast) {
    window.InstallmentUI.showToast('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PDF ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß', 'success');
  }

  return window.lastSuccessResponse.data;
}

// ‡πÇ‡∏´‡∏•‡∏î PDF ‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
async function loadQuotationPdf(orderId) {
  try {
    const res = await fetch(`/api/quotation/${orderId}/pdf`, {
      headers: {
        'Authorization': 'Bearer ' + localStorage.getItem('authToken'),
        'Accept': 'application/pdf'
      }
    });
    console.log('Fetch PDF status:', res.status);
    if (!res.ok) {
      const text = await res.text();
      console.error('PDF error body:', text);
      throw new Error(`HTTP ${res.status}: ${text}`);
    }
    const blob = await res.blob();
    const pdfViewer = document.getElementById('quotationPdfViewer');
    if (pdfViewer) {
      pdfViewer.src = URL.createObjectURL(blob);
    }
  } catch (err) {
    console.error('loadQuotationPdf failed:', err);
    alert(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ PDF: ${err.message}`);
  }
}

// ===================== Enhanced Customer Search Functions =====================

// ==================== ENHANCED CUSTOMER SEARCH APIs ====================

/**
 * Enhanced customer search with multiple criteria
 * @param {Object} searchCriteria - Search criteria object
 * @returns {Promise<Array>} Search results
 */
async function searchCustomersEnhanced(searchCriteria = {}) {
  try {
    const branchCode = getBranchCode();
    const token = localStorage.getItem('authToken');

    if (!token) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
    }

    console.log('üîç Enhanced customer search with criteria:', searchCriteria);

    const queryParams = new URLSearchParams({
      branch: branchCode,
      ...searchCriteria
    });

    const response = await fetch(`/api/customers/search?${queryParams}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      console.log(`‚úÖ Found ${result.data.length} customers`);
      return result.data;
    } else {
      throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
    }

  } catch (error) {
    console.error('‚ùå Enhanced customer search failed:', error);
    throw error;
  }
}

/**
 * Quick search customer by ID card or phone
 * @param {string} query - Search query (ID card or phone)
 * @returns {Promise<Array>} Search results
 */
async function quickSearchCustomer(query) {
  if (!query || query.length < 3) {
    return [];
  }

  // Determine search type
  const isIdCard = /^\d{13}$/.test(query) || /^\d+$/.test(query);
  const isPhone = /^0\d{9}$/.test(query) || /^\d{10}$/.test(query);

  const searchCriteria = {};

  if (isIdCard) {
    searchCriteria.idCard = query;
  } else if (isPhone) {
    searchCriteria.phone = query;
  } else {
    // General text search (name)
    searchCriteria.name = query;
  }

  return await searchCustomersEnhanced(searchCriteria);
}

/**
 * Advanced customer search with multiple filters
 * @param {Object} filters - Advanced search filters
 * @returns {Promise<Array>} Search results
 */
async function advancedSearchCustomers(filters) {
  return await searchCustomersEnhanced(filters);
}

/**
 * Get customer details by ID
 * @param {string} customerId - Customer ID
 * @returns {Promise<Object>} Customer details
 */
async function getCustomerDetails(customerId) {
  try {
    const token = localStorage.getItem('authToken');

    if (!token) {
      throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö token ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö');
    }

    const response = await fetch(`/api/customers/${customerId}`, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      return result.data;
    } else {
      throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ');
    }

  } catch (error) {
    console.error('‚ùå Get customer details failed:', error);
    throw error;
  }
}

// ==================== ADDRESS AUTOCOMPLETE APIs ====================

/**
 * Load Thailand address data (provinces, districts, subdistricts)
 * @returns {Promise<Object>} Address data
 */
async function loadAddressData() {
  try {
    // Check if data is already cached
    const cachedData = localStorage.getItem('addressData');
    const cacheTimestamp = localStorage.getItem('addressDataTimestamp');
    const cacheAge = Date.now() - parseInt(cacheTimestamp || '0');

    // Use cached data if less than 24 hours old
    if (cachedData && cacheAge < 24 * 60 * 60 * 1000) {
      console.log('üìç Using cached address data');
      return JSON.parse(cachedData);
    }

    console.log('üìç Loading Thailand address data...');

    const response = await fetch('/api/address/thailand', {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      // Cache the data
      localStorage.setItem('addressData', JSON.stringify(result.data));
      localStorage.setItem('addressDataTimestamp', Date.now().toString());

      console.log('‚úÖ Address data loaded and cached');
      return result.data;
    } else {
      throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ');
    }

  } catch (error) {
    console.error('‚ùå Load address data failed:', error);

    // Fallback to basic provinces if API fails
    return {
      provinces: [
        '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå', '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£',
        '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó', '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥',
        '‡∏ä‡∏∏‡∏°‡∏û‡∏£', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡∏ï‡∏£‡∏±‡∏á', '‡∏ï‡∏£‡∏≤‡∏î', '‡∏ï‡∏≤‡∏Å', '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å',
        '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä', '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå',
        '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', '‡∏ô‡πà‡∏≤‡∏ô', '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨', '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ',
        '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå', '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤',
        '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á', '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£', '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ', '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå',
        '‡πÅ‡∏û‡∏£‡πà', '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°', '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô', '‡∏¢‡πÇ‡∏™‡∏ò‡∏£',
        '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î', '‡∏£‡∏∞‡∏ô‡∏≠‡∏á', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á',
        '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡πÄ‡∏•‡∏¢', '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©', '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏™‡∏ï‡∏π‡∏•', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£',
        '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß', '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ',
        '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢', '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå', '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢',
        '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á', '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå',
        '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ'
      ],
      districts: {},
      subdistricts: {}
    };
  }
}

/**
 * Get districts by province
 * @param {string} province - Province name
 * @returns {Promise<Array>} List of districts
 */
async function getDistrictsByProvince(province) {
  try {
    const addressData = await loadAddressData();
    return addressData.districts[province] || [];
  } catch (error) {
    console.error('‚ùå Get districts failed:', error);
    return [];
  }
}

/**
 * Get subdistricts by province and district
 * @param {string} province - Province name
 * @param {string} district - District name
 * @returns {Promise<Array>} List of subdistricts
 */
async function getSubdistrictsByDistrict(province, district) {
  try {
    const addressData = await loadAddressData();
    const key = `${province}-${district}`;
    return addressData.subdistricts[key] || [];
  } catch (error) {
    console.error('‚ùå Get subdistricts failed:', error);
    return [];
  }
}

/**
 * Get postal code by address
 * @param {string} province - Province name
 * @param {string} district - District name
 * @param {string} subdistrict - Subdistrict name
 * @returns {Promise<string>} Postal code
 */
async function getPostalCode(province, district, subdistrict) {
  try {
    const response = await fetch('/api/address/postal-code', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ province, district, subdistrict })
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      return result.data.postalCode || '';
    } else {
      return '';
    }

  } catch (error) {
    console.error('‚ùå Get postal code failed:', error);
    return '';
  }
}

// ==================== FORM VALIDATION & AUTO-SAVE APIs ====================

/**
 * Validate ID card number (Thai national ID)
 * @param {string} idCard - ID card number
 * @returns {Promise<Object>} Validation result
 */
// ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô validation ‡∏ã‡πâ‡∏≥ - ‡πÉ‡∏ä‡πâ InstallmentCore.validateXX() ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á

/**
 * Auto-save form data to localStorage
 * @param {Object} formData - Form data to save
 */
function autoSaveFormData(formData) {
  try {
    const saveData = {
      data: formData,
      timestamp: Date.now(),
      step: 2
    };

    localStorage.setItem('installment_form_draft', JSON.stringify(saveData));
    console.log('üíæ Form data auto-saved');

    // Update auto-save status
    updateAutoSaveStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß');

  } catch (error) {
    console.error('‚ùå Auto-save failed:', error);
    updateAutoSaveStatus('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß', true);
  }
}

/**
 * Load saved form data from localStorage
 * @returns {Object|null} Saved form data
 */
function loadSavedFormData() {
  try {
    const savedData = localStorage.getItem('installment_form_draft');
    if (!savedData) return null;

    const parsed = JSON.parse(savedData);

    // Check if data is not too old (24 hours)
    const ageHours = (Date.now() - parsed.timestamp) / (1000 * 60 * 60);
    if (ageHours > 24) {
      localStorage.removeItem('installment_form_draft');
      return null;
    }

    return parsed.data;

  } catch (error) {
    console.error('‚ùå Load saved form data failed:', error);
    return null;
  }
}

/**
 * Clear saved form data
 */
function clearSavedFormData() {
  localStorage.removeItem('installment_form_draft');
  console.log('üóëÔ∏è Saved form data cleared');
}

/**
 * Update auto-save status indicator
 * @param {string} message - Status message
 * @param {boolean} isError - Whether this is an error state
 */
function updateAutoSaveStatus(message, isError = false) {
  const statusEl = document.getElementById('autoSaveText');
  const spinnerEl = document.getElementById('autoSaveSpinner');

  if (statusEl) {
    statusEl.textContent = message;
    statusEl.className = isError ? 'text-red-500' : 'text-green-600';
  }

  if (spinnerEl) {
    spinnerEl.classList.add('hidden');
  }

  // Reset to default after 3 seconds
  setTimeout(() => {
    if (statusEl) {
      statusEl.textContent = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥';
      statusEl.className = 'text-gray-500';
    }
  }, 3000);
}

// ==================== DOCUMENT UPLOAD ENHANCEMENTS ====================

/**
 * Enhanced file upload with progress and validation
 * @param {File} file - File to upload
 * @param {string} type - Document type (idCard, selfie, salarySlip)
 * @param {Function} progressCallback - Progress callback function
 * @returns {Promise<Object>} Upload result
 */
async function uploadDocumentEnhanced(file, type, progressCallback = null) {
  try {
    // Validate file
    const validation = validateDocumentFile(file, type);
    if (!validation.valid) {
      throw new Error(validation.message);
    }

    // ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏à‡∏≤‡∏Å form
    const citizenId = document.getElementById('customerIdCard')?.value?.trim() ||
                     document.getElementById('citizenId')?.value?.trim() ||
                     document.getElementById('customerTaxId')?.value?.trim() ||
                     document.getElementById('customerCitizenId')?.value?.trim();

    if (!citizenId) {
      throw new Error('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå');
    }

    const formData = new FormData();
    formData.append('file', file);
    formData.append('type', type);
    formData.append('customerId', window.currentCustomerId || '');
    formData.append('citizenId', citizenId);
    formData.append('branch', getBranchCode());

    const xhr = new XMLHttpRequest();

    return new Promise((resolve, reject) => {
      xhr.upload.addEventListener('progress', (e) => {
        if (e.lengthComputable && progressCallback) {
          const progress = (e.loaded / e.total) * 100;
          progressCallback(progress);
        }
      });

      xhr.addEventListener('load', () => {
        if (xhr.status === 200) {
          try {
            const result = JSON.parse(xhr.responseText);
            if (result.success) {
              resolve(result);
            } else {
              reject(new Error(result.message || '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß'));
            }
          } catch (error) {
            reject(new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏î‡πâ'));
          }
        } else {
          reject(new Error(`HTTP ${xhr.status}: ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`));
        }
      });

      xhr.addEventListener('error', () => {
        reject(new Error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå'));
      });

      xhr.open('POST', '/api/documents/document');

      const token = localStorage.getItem('authToken');
      if (token) {
        xhr.setRequestHeader('Authorization', `Bearer ${token}`);
      }

      xhr.send(formData);
    });

  } catch (error) {
    console.error('‚ùå Enhanced document upload failed:', error);
    throw error;
  }
}

/**
 * Validate document file
 * @param {File} file - File to validate
 * @param {string} type - Document type
 * @returns {Object} Validation result
 */
function validateDocumentFile(file, type) {
  // Check file size (5MB limit)
  const maxSize = 5 * 1024 * 1024;
  if (file.size > maxSize) {
    return {
      valid: false,
      message: '‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5MB'
    };
  }

  // Check file type
  const allowedTypes = ['image/jpeg', 'image/jpg', 'image/png', 'image/webp'];
  if (!allowedTypes.includes(file.type)) {
    return {
      valid: false,
      message: '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞ JPG, PNG, WebP)'
    };
  }

  // Type-specific validations
  const typeRequirements = {
    idCard: { minWidth: 800, minHeight: 500 },
    selfie: { minWidth: 640, minHeight: 480 },
    salarySlip: { minWidth: 600, minHeight: 800 }
  };

  return {
    valid: true,
    message: '‡πÑ‡∏ü‡∏•‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á',
    requirements: typeRequirements[type]
  };
}

// ==================== GEOLOCATION API ====================

/**
 * Get current location
 * @returns {Promise<Object>} Location coordinates
 */
async function getCurrentLocation() {
  return new Promise((resolve, reject) => {
    if (!navigator.geolocation) {
      reject(new Error('‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á'));
      return;
    }

    const options = {
      enableHighAccuracy: true,
      timeout: 10000,
      maximumAge: 300000 // 5 minutes
    };

    navigator.geolocation.getCurrentPosition(
      (position) => {
        resolve({
          latitude: position.coords.latitude,
          longitude: position.coords.longitude,
          accuracy: position.coords.accuracy
        });
      },
      (error) => {
        let message = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ';

        switch (error.code) {
          case error.PERMISSION_DENIED:
            message = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ö‡∏£‡∏≤‡∏ß‡πå‡πÄ‡∏ã‡∏≠‡∏£‡πå';
            break;
          case error.POSITION_UNAVAILABLE:
            message = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏î‡πâ';
            break;
          case error.TIMEOUT:
            message = '‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏∏‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
            break;
        }

        reject(new Error(message));
      },
      options
    );
  });
}

/**
 * Reverse geocoding - get address from coordinates
 * @param {number} latitude - Latitude
 * @param {number} longitude - Longitude
 * @returns {Promise<Object>} Address information
 */
async function reverseGeocode(latitude, longitude) {
  try {
    const response = await fetch('/api/address/reverse-geocode', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ latitude, longitude })
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      return result.data;
    } else {
      throw new Error(result.message || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ');
    }

  } catch (error) {
    console.error('‚ùå Reverse geocoding failed:', error);
    throw error;
  }
}

// ‚úÖ Enhanced sendInstallmentEmail with better error handling and receipt voucher support
async function sendInstallmentEmail() {
  console.log('üîç DEBUG: Starting sendInstallmentEmail');

  const customerEmail = document.getElementById('customerEmail').value.trim();
  console.log('üîç DEBUG: Customer Email =', customerEmail);

  if (!customerEmail) {
    console.error('‚ùå DEBUG: No customer email provided');
    window.InstallmentUI.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô', 'warning');
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const hasSelectedDocuments = document.getElementById('emailQuotation')?.checked ||
                          document.getElementById('emailInvoice')?.checked ||
                          document.getElementById('emailReceipt')?.checked;

  console.log('üîç DEBUG: Has selected documents =', hasSelectedDocuments);

  if (!hasSelectedDocuments) {
    console.error('‚ùå DEBUG: No documents selected');
    window.InstallmentUI.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô', 'warning');
    return;
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  const successResponse = window.lastSuccessResponse;
  console.log('üîç DEBUG: window.lastSuccessResponse =', successResponse);

  if (!successResponse?.data) {
    console.error('‚ùå DEBUG: No success response data found');
    window.InstallmentUI.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•', 'warning');
    return;
  }

  if (!confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${customerEmail} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
    console.log('üîç DEBUG: User cancelled email sending');
    return;
  }

  try {
    console.log('üîç DEBUG: Updating email status to sending');
    updateEmailStatus('sending', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á Gmail...');

    // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏• ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å response
    const responseData = successResponse.data;
    const emailData = {
      email: customerEmail,
      type: 'installment',
      customerName: `${document.getElementById('customerPrefix')?.value || ''}${document.getElementById('customerFirstName')?.value || ''} ${document.getElementById('customerLastName')?.value || ''}`.trim(),
      documents: {
        quotation: document.getElementById('emailQuotation')?.checked || false,
        invoice: document.getElementById('emailInvoice')?.checked || false,
        receipt: document.getElementById('emailReceipt')?.checked || false
      },
      installmentData: {
        contractNo: responseData.contractNo || responseData.contract_no,
        contractId: responseData.contractId || responseData._id,
        invoiceId: responseData.invoiceId,
        quotationId: responseData.quotationId,
        orderId: responseData.orderId || responseData._id,
        receiptVoucherId: responseData.receiptVoucherId,
        customerInfo: {
          displayName: responseData.customerInfo?.displayName || `${document.getElementById('customerPrefix')?.value || ''}${document.getElementById('customerFirstName')?.value || ''} ${document.getElementById('customerLastName')?.value || ''}`.trim()
        }
      },
      contractId: responseData.contractId || responseData._id,
      quotationId: responseData.quotationId,
      invoiceId: responseData.invoiceId,
      receiptVoucherId: responseData.receiptVoucherId
    };

    console.log('üìß DEBUG: Sending email with data:', emailData);

    const token = localStorage.getItem('authToken');
    console.log('üîç DEBUG: Token exists:', !!token);

    const response = await fetch('/api/email/send-installment', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${token}`
      },
      body: JSON.stringify(emailData)
    });

    console.log('üîç DEBUG: Email API response status:', response.status);

    const result = await response.json();
    console.log('üîç DEBUG: Email API response data:', result);

    if (response.ok && result.success) {
      console.log('‚úÖ DEBUG: Email sent successfully');
      updateEmailStatus('success', '‚úÖ ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á Gmail ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');
      window.InstallmentUI.showToast('‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!', 'success');
      console.log('üìß Email sent successfully:', result.data);

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô UI
      const emailStatusMini = document.getElementById('emailStatusMini');
      if (emailStatusMini) {
        emailStatusMini.textContent = '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
        emailStatusMini.className = 'text-green-600';
      }

    } else {
      console.error('‚ùå DEBUG: Email API returned error:', result.message);
      throw new Error(result.message || '‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }

  } catch (error) {
    console.error('‚ùå DEBUG: Send email error:', error);
    updateEmailStatus('error', '‚ùå ‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á Gmail ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + error.message);
    window.InstallmentUI.showToast('‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + error.message, 'error');

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô UI
    const emailStatusMini = document.getElementById('emailStatusMini');
    if (emailStatusMini) {
      emailStatusMini.textContent = '‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à';
      emailStatusMini.className = 'text-red-600';
    }
  }
}

// Function to sync customer data to loan management system
async function syncCustomerToLoanSystem(customerData) {
  try {
    console.log('üîÑ Syncing customer data to loan management system...');

    // Extract customer data from step2 and prepare for loan system
    const loanCustomerData = {
      _id: customerData._id,
      prefix: customerData.prefix,
      firstName: customerData.firstName,
      lastName: customerData.lastName,
      customerName: `${customerData.firstName} ${customerData.lastName}`,
      age: customerData.age,
      birthDate: customerData.birthDate,
      email: customerData.email,
      phone: customerData.phone,
      taxId: customerData.taxId,

      // Address information
      address: {
        houseNo: customerData.houseNo,
        moo: customerData.moo,
        soi: customerData.soi,
        road: customerData.road,
        subDistrict: customerData.subDistrict,
        district: customerData.district,
        province: customerData.province,
        zipcode: customerData.zipcode,
        fullAddress: `${customerData.houseNo || ''} ${customerData.moo ? `‡∏´‡∏°‡∏π‡πà ${customerData.moo}` : ''} ${customerData.soi ? `‡∏ã‡∏≠‡∏¢ ${customerData.soi}` : ''} ${customerData.road ? `‡∏ñ‡∏ô‡∏ô ${customerData.road}` : ''} ${customerData.subDistrict ? `‡∏ï.${customerData.subDistrict}` : ''} ${customerData.district ? `‡∏≠.${customerData.district}` : ''} ${customerData.province ? `‡∏à.${customerData.province}` : ''} ${customerData.zipcode || ''}`.trim()
      },

      // Social media and contact
      facebookUrl: customerData.facebookUrl,
      lineId: customerData.lineId,

      // GPS coordinates
      latitude: customerData.latitude,
      longitude: customerData.longitude,
      locationAddress: customerData.locationAddress,

      // Branch information
      branchName: customerData.branchName,

      // System fields
      createdAt: new Date(),
      updatedAt: new Date(),
      status: 'active'
    };

    // Send to loan management system
    const response = await fetch(`${API_CONFIG.BASE_URL}/api/installment/customers/sync`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
      },
      body: JSON.stringify(loanCustomerData)
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      console.log('‚úÖ Customer data synced successfully to loan management system');
      return result.data;
    } else {
      throw new Error(result.error || 'Failed to sync customer data');
    }

  } catch (error) {
    console.error('‚ùå Error syncing customer data to loan management system:', error);
    throw error;
  }
}

// Function to update customer data in loan management system
async function updateCustomerInLoanSystem(customerId, updateData) {
  try {
    console.log('üîÑ Updating customer data in loan management system...');

    const response = await fetch(`${API_CONFIG.BASE_URL}/api/installment/customers/${customerId}`, {
      method: 'PUT',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
      },
      body: JSON.stringify(updateData)
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      console.log('‚úÖ Customer data updated successfully in loan management system');
      return result.data;
    } else {
      throw new Error(result.error || 'Failed to update customer data');
    }

  } catch (error) {
    console.error('‚ùå Error updating customer data in loan management system:', error);
    throw error;
  }
}

// Function to get customer debt analysis
async function getCustomerDebtAnalysis(customerId) {
  try {
    console.log('üîÑ Getting customer debt analysis...');

    const response = await fetch(`${API_CONFIG.BASE_URL}/api/installment/customers/${customerId}/debt-analysis`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${localStorage.getItem('authToken')}`
      }
    });

    if (!response.ok) {
      throw new Error(`HTTP ${response.status}: ${response.statusText}`);
    }

    const result = await response.json();

    if (result.success) {
      console.log('‚úÖ Customer debt analysis retrieved successfully');
      return result.data;
    } else {
      throw new Error(result.error || 'Failed to get customer debt analysis');
    }

  } catch (error) {
    console.error('‚ùå Error getting customer debt analysis:', error);
    throw error;
  }
}

// ... existing code ...

// ‚úÖ Enhanced updateStep4Summary with better data handling
function updateStep4Summary(orderData) {
  console.log('üìã Updating Step 4 summary with data:', orderData);

  const step4Summary = document.getElementById('step4Summary');
  const step4PdfDownload = document.getElementById('step4PdfDownload');
  const pdfDownloadButtons = document.getElementById('pdfDownloadButtons');

  if (!step4Summary) {
    console.warn('‚ö†Ô∏è step4Summary element not found');
    return;
  }

  // ‚úÖ Enhanced data extraction with fallbacks
  const contractNo = orderData?.contractNo || orderData?.contract_no || 'N/A';
  const totalAmount = parseFloat(orderData?.totalAmount || orderData?.total_amount || orderData?.payoff_amount || 0);
  const downPayment = parseFloat(orderData?.downPayment || orderData?.down_payment || 0);
  const monthlyPayment = parseFloat(orderData?.monthlyPayment || orderData?.installment_amount || 0);
  const installmentTerms = parseInt(orderData?.installmentTerms || orderData?.installment_count || 0);

  // ‚úÖ Enhanced summary display with better formatting
  step4Summary.innerHTML = `
    <h5 class="font-medium mb-3 text-green-800 dark:text-green-300">
      <i class="bi bi-check-circle-fill mr-2"></i>
      ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    </h5>
    
    <div class="space-y-3 text-sm">
      <div class="grid grid-cols-2 gap-4">
        <div>
          <span class="text-gray-600 dark:text-gray-400">‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏™‡∏±‡∏ç‡∏ç‡∏≤:</span>
          <div class="font-mono font-medium">${contractNo}</div>
        </div>
        <div>
          <span class="text-gray-600 dark:text-gray-400">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏ß‡∏°:</span>
          <div class="font-medium text-green-600">‡∏ø${totalAmount.toLocaleString()}</div>
        </div>
      </div>
      
      <div class="grid grid-cols-2 gap-4">
        <div>
          <span class="text-gray-600 dark:text-gray-400">‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå:</span>
          <div class="font-medium text-blue-600">‡∏ø${downPayment.toLocaleString()}</div>
        </div>
        <div>
          <span class="text-gray-600 dark:text-gray-400">‡∏ú‡πà‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</span>
          <div class="font-medium">‡∏ø${monthlyPayment.toLocaleString()}</div>
        </div>
      </div>
      
      <div class="grid grid-cols-2 gap-4">
        <div>
          <span class="text-gray-600 dark:text-gray-400">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î:</span>
          <div class="font-medium">${installmentTerms} ‡∏á‡∏ß‡∏î</div>
        </div>
        <div>
          <span class="text-gray-600 dark:text-gray-400">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà:</span>
          <div class="font-medium">${new Date().toLocaleDateString('th-TH')}</div>
        </div>
      </div>
    </div>
    
    <div class="mt-4 p-3 bg-green-50 dark:bg-green-900/20 rounded-lg border border-green-200 dark:border-green-700">
      <div class="flex items-center gap-2 text-green-700 dark:text-green-400">
        <i class="bi bi-info-circle-fill"></i>
        <span class="text-sm font-medium">‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF</span>
      </div>
    </div>
  `;

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏Ñ‡∏£‡∏ö‡∏ó‡∏±‡πâ‡∏á 3 ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
  if (pdfDownloadButtons) {
    pdfDownloadButtons.innerHTML = `
      <button id="btnDownloadQuotation" class="btn btn-primary flex items-center gap-2" onclick="window.InstallmentAPI.downloadQuotationPdf()">
        <i class="bi bi-file-earmark-text"></i>
        <span>‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤</span>
      </button>
      
      <button id="btnDownloadInvoice" class="btn btn-secondary flex items-center gap-2" onclick="window.InstallmentAPI.downloadInvoicePdf()">
        <i class="bi bi-receipt"></i>
        <span>‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ</span>
      </button>
      
      <button id="btnDownloadReceipt" class="btn btn-success flex items-center gap-2" onclick="window.InstallmentAPI.downloadDownPaymentReceiptPdf()">
        <i class="bi bi-file-earmark-check"></i>
        <span>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå</span>
        <small class="block text-xs opacity-75">(‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)</small>
      </button>
    `;
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ PDF
  const pdfStatusBadge = document.getElementById('pdfStatusBadge');
  if (pdfStatusBadge) {
    pdfStatusBadge.textContent = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î';
    pdfStatusBadge.className = 'text-xs px-3 py-1 rounded-full bg-green-100 text-green-800';
  }

  // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô PDF Download
  if (step4PdfDownload) {
    step4PdfDownload.classList.remove('hidden');
  }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
async function fixPdfDownloadIssue() {
  console.log('üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF...');

  try {
    // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const currentData = window.lastSuccessResponse || window.currentInstallmentData;

    if (!currentData) {
      console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô window object');

      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage
      const savedData = localStorage.getItem('lastSuccessResponse') || localStorage.getItem('currentInstallmentData');

      if (savedData) {
        try {
          const parsedData = JSON.parse(savedData);
          window.lastSuccessResponse = parsedData;
          window.currentInstallmentData = parsedData.data || parsedData;
          console.log('‚úÖ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        } catch (e) {
          console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ parse ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å localStorage:', e);
        }
      }
    }

    // 2. ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
    const customerData = getCustomerFormData();

    if (customerData && customerData.idCard) {
      console.log('üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏à‡∏≤‡∏Å‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:', customerData.idCard);

      try {
        const response = await fetch('/api/installment/history', {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken')}`
          }
        });

        if (response.ok) {
          const result = await response.json();

          if (result.success && result.data && result.data.length > 0) {
            // ‡∏´‡∏≤‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô
            const matchingContract = result.data.find(order =>
              order.customer_info?.idCard === customerData.idCard ||
              order.customer_info?.taxId === customerData.idCard
            );

            if (matchingContract) {
              console.log('‚úÖ ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô:', matchingContract.contractNo);

              // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô window object
              const fixedData = {
                ...matchingContract,
                contractNo: matchingContract.contractNo,
                invoiceId: matchingContract.invoiceId || `INV-${matchingContract.contractNo}`,
                receiptVoucherId: matchingContract.receiptVoucherId || `RV-${matchingContract.contractNo}`,
                orderId: matchingContract._id
              };

              window.lastSuccessResponse = {
                success: true,
                data: fixedData
              };

              window.currentInstallmentData = fixedData;

              // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
              localStorage.setItem('lastSuccessResponse', JSON.stringify(window.lastSuccessResponse));
              localStorage.setItem('currentInstallmentData', JSON.stringify(fixedData));

              console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
              console.log('  - Contract:', fixedData.contractNo);
              console.log('  - Invoice:', fixedData.invoiceId);
              console.log('  - Receipt:', fixedData.receiptVoucherId);

              return {
                success: true,
                contractNo: fixedData.contractNo,
                message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
              };
            }
          }
        }
      } catch (error) {
        console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤:', error);
      }
    }

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
    console.log('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á');

    const now = new Date();
    const yearBE = now.getFullYear() + 543;
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const timestamp = Date.now().toString().slice(-4);

    const fallbackData = {
      contractNo: `INST${yearBE}${month}${timestamp}`,
      invoiceId: `INV${yearBE}${month}${timestamp}`,
      receiptVoucherId: `RV${yearBE}${month}${timestamp}`,
      orderId: `ORD${timestamp}`,
      id: `ID${timestamp}`,
      _id: `ID${timestamp}`,
      status: 'pending',
      createdAt: now.toISOString(),
      totalAmount: calculateTotalAmount(),
      downPayment: 0,
      monthlyPayment: 0,
      installmentPeriod: 0,
      customer_info: customerData || {
        firstName: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
        lastName: '‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
        phone: '000-000-0000',
        idCard: '0000000000000'
      }
    };

    window.lastSuccessResponse = {
      success: true,
      data: fallbackData
    };

    window.currentInstallmentData = fallbackData;

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage
    localStorage.setItem('lastSuccessResponse', JSON.stringify(window.lastSuccessResponse));
    localStorage.setItem('currentInstallmentData', JSON.stringify(fallbackData));

    console.log('‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    console.log('  - Contract:', fallbackData.contractNo);
    console.log('  - Invoice:', fallbackData.invoiceId);
    console.log('  - Receipt:', fallbackData.receiptVoucherId);

    return {
      success: true,
      contractNo: fallbackData.contractNo,
      message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà)'
    };

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤:', error);
    return {
      success: false,
      message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
    };
  }
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
async function testAllPdfDownloads() {
  console.log('üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...');

  const tests = [
    {
      name: 'Quotation PDF',
      func: downloadQuotationPdf,
      description: '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤'
    },
    {
      name: 'Invoice PDF',
      func: downloadInvoicePdf,
      description: '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ'
    },
    {
      name: 'Receipt PDF',
      func: downloadReceiptPdf,
      description: '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô'
    },
    {
      name: 'Down Payment Receipt PDF',
      func: downloadDownPaymentReceiptPdf,
      description: '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå'
    }
  ];

  const results = [];

  for (const test of tests) {
    try {
      console.log(`üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ${test.name}...`);

      await test.func();

      console.log(`‚úÖ ${test.name} ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`);
      results.push({
        name: test.name,
        description: test.description,
        status: 'success',
        message: '‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥'
      });

    } catch (error) {
      console.error(`‚ùå ${test.name} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:`, error.message);
      results.push({
        name: test.name,
        description: test.description,
        status: 'error',
        message: error.message
      });
    }

    // ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡πà‡∏≠‡πÑ‡∏õ
    await new Promise(resolve => setTimeout(resolve, 1000));
  }

  console.log('üìä ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö:');
  results.forEach(result => {
    const icon = result.status === 'success' ? '‚úÖ' : '‚ùå';
    console.log(`  ${icon} ${result.description}: ${result.message}`);
  });

  return results;
}

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ß‡∏á‡∏à‡∏£
async function fixAndTestPdfDownload() {
  console.log('üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF...');

  try {
    // 1. ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡πà‡∏≠‡∏ô
    const fixResult = await fixPdfDownloadIssue();

    if (fixResult.success) {
      console.log('‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', fixResult.message);

      // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
      const testResults = await testAllPdfDownloads();

      // 3. ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
      const successCount = testResults.filter(r => r.status === 'success').length;
      const totalCount = testResults.length;

      console.log(`üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•: ${successCount}/${totalCount} ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`);

      return {
        success: true,
        fixResult,
        testResults,
        summary: `‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ${successCount}/${totalCount} ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ`
      };

    } else {
      console.error('‚ùå ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', fixResult.message);
      return {
        success: false,
        message: fixResult.message
      };
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö:', error);
    return {
      success: false,
      message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`
    };
  }
}

// ‡∏•‡∏ö‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ã‡πâ‡∏≥ getCustomerDataFromForm, getCitizenId, validateCustomerData - ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏≤‡∏Å installment-ui.js ‡πÅ‡∏ó‡∏ô