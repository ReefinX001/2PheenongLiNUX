/**
 * Authentication Helper for Installment System
 * ‡∏ä‡πà‡∏ß‡∏¢‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Authentication Token ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
 */

class AuthHelper {
  constructor() {
    this.isRefreshing = false;
    this.refreshPromise = null;
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
   * @returns {Promise<string>} Valid token
   */
  async validateAndRefreshToken() {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Authentication Token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
      }

      // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á refresh ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à
      if (this.isRefreshing && this.refreshPromise) {
        console.log('üîÑ Waiting for ongoing token refresh...');
        return await this.refreshPromise;
      }

      // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö token ‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏á‡πà‡∏≤‡∏¢‡πÜ
      const testResponse = await fetch('/api/users/profile', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      // ‡∏ñ‡πâ‡∏≤ token ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ return
      if (testResponse.ok) {
        return token;
      }

      // ‡∏ñ‡πâ‡∏≤ token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏•‡∏≠‡∏á‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä
      if (testResponse.status === 401) {
        console.warn('üîÑ Token expired, attempting to refresh...');
        return await this.refreshToken();
      }

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô 500 Server Error ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ token ‡πÄ‡∏î‡∏¥‡∏° (server ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß)
      if (testResponse.status === 500) {
        console.warn('‚ö†Ô∏è Server error during token validation, using existing token');
        return token;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÉ‡∏´‡πâ return token ‡πÄ‡∏î‡∏¥‡∏°
      console.warn('‚ö†Ô∏è Token validation returned:', testResponse.status);
      return token;

    } catch (error) {
      console.error('‚ùå Token validation error:', error);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô network error ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ token ‡πÄ‡∏î‡∏¥‡∏°
      if (error.name === 'TypeError' || error.message.includes('fetch')) {
        console.warn('‚ö†Ô∏è Network error, using existing token');
        return localStorage.getItem('authToken') || '';
      }

      throw error;
    }
  }

  /**
   * ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token
   * @returns {Promise<string>} New token
   */
  async refreshToken() {
    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£ refresh ‡∏´‡∏•‡∏≤‡∏¢‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    if (this.isRefreshing && this.refreshPromise) {
      return await this.refreshPromise;
    }

    this.isRefreshing = true;
    this.refreshPromise = this._performRefresh();

    try {
      const newToken = await this.refreshPromise;
      return newToken;
    } finally {
      this.isRefreshing = false;
      this.refreshPromise = null;
    }
  }

  /**
   * ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡∏à‡∏£‡∏¥‡∏á
   * @private
   */
  async _performRefresh() {
    try {
      const refreshToken = localStorage.getItem('refreshToken');
      const userId = localStorage.getItem('userId');

      if (!refreshToken && !userId) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token');
      }

      // ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ refresh token ‡∏Å‡πà‡∏≠‡∏ô
      if (refreshToken) {
        const refreshResponse = await fetch('/api/auth/refresh', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ refreshToken })
        });

        if (refreshResponse.ok) {
          const refreshData = await refreshResponse.json();
          localStorage.setItem('authToken', refreshData.token);
          if (refreshData.refreshToken) {
            localStorage.setItem('refreshToken', refreshData.refreshToken);
          }
          console.log('‚úÖ Token refreshed successfully using refresh token');
          return refreshData.token;
        }
      }

      // ‡∏ñ‡πâ‡∏≤ refresh token ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ silent refresh
      if (userId) {
        const silentResponse = await fetch('/api/auth/silent-refresh', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ userId })
        });

        if (silentResponse.ok) {
          const silentData = await silentResponse.json();
          localStorage.setItem('authToken', silentData.token);
          console.log('‚úÖ Token refreshed successfully using silent refresh');
          return silentData.token;
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token ‡πÑ‡∏î‡πâ');

    } catch (error) {
      console.error('‚ùå Token refresh failed:', error);

      // ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà redirect ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
      console.warn('‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤');

      // ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô token ‡πÄ‡∏î‡∏¥‡∏° ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ
      return localStorage.getItem('authToken') || '';
    }
  }

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ token ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
   * @returns {boolean}
   */
  hasToken() {
    return !!localStorage.getItem('authToken');
  }

  /**
   * ‡∏•‡πâ‡∏≤‡∏á token ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
   */
  clearTokens() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('refreshToken');
    console.log('üßπ All tokens cleared');
  }

  /**
   * ‡∏™‡∏£‡πâ‡∏≤‡∏á headers ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API request
   * @param {string} token - Authentication token
   * @returns {Object} Headers object
   */
  createAuthHeaders(token) {
    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${token}`
    };
  }

  /**
   * ‡∏ó‡∏≥ API request ‡∏û‡∏£‡πâ‡∏≠‡∏° token validation
   * @param {string} url - API endpoint
   * @param {Object} options - Fetch options
   * @returns {Promise<Response>}
   */
  async authenticatedFetch(url, options = {}) {
    const token = await this.validateAndRefreshToken();

    const authOptions = {
      ...options,
      headers: {
        ...this.createAuthHeaders(token),
        ...options.headers
      }
    };

    return fetch(url, authOptions);
  }

  /**
   * Extract user ID from JWT token
   * @returns {string|null} User ID from token or null if not found
   */
  getUserIdFromToken() {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        console.warn('‚ö†Ô∏è No auth token found in localStorage');
        return null;
      }

      // Decode JWT token (simple base64 decode of payload)
      const parts = token.split('.');
      if (parts.length !== 3) {
        console.warn('‚ö†Ô∏è Invalid JWT token format');
        return null;
      }

      const payload = JSON.parse(atob(parts[1]));
      const userId = payload.userId || payload.id || payload.sub;

      if (!userId) {
        console.warn('‚ö†Ô∏è No userId found in JWT token payload');
        return null;
      }

      console.log('‚úÖ Successfully extracted userId from JWT token:', userId);
      return userId;
    } catch (error) {
      console.error('‚ùå Error decoding JWT token:', error);
      return null;
    }
  }

  /**
   * Get current user information from JWT token
   * @returns {Object|null} User data from token or null if not found
   */
  getCurrentUser() {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        return null;
      }

      const parts = token.split('.');
      if (parts.length !== 3) {
        return null;
      }

      return JSON.parse(atob(parts[1]));
    } catch (error) {
      console.error('‚ùå Error getting current user from token:', error);
      return null;
    }
  }
}

// ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö
window.authHelper = new AuthHelper();

console.log('üîê AuthHelper initialized');
