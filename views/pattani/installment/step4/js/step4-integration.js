/**
 * Step 4 Integration - Summary & Document Generation
 * ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Global Data Manager ‡πÅ‡∏•‡∏∞ installmentController
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£, ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å (‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß), ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
 * @version 1.1.0 - Stock Update Enabled
 */

class Step4Integration {
  constructor() {
    this.isInitialized = false;
    this.contractData = null;
    this.isProcessing = false;
    this.contractCreated = false;
    this.documentUrls = {};

    this.initialize();
  }

  /**
   * üîß FIX: ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login
   */
  async getLoggedInEmployeeName() {
    try {
      const token = localStorage.getItem('authToken');
      if (!token) {
        console.warn('‚ö†Ô∏è No auth token found - cannot get employee name');
        return null;
      }

      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å userProfile ‡∏Å‡πà‡∏≠‡∏ô
      const userProfile = localStorage.getItem('userProfile');
      if (userProfile) {
        try {
          const parsed = JSON.parse(userProfile);
          if (parsed.name) {
            console.log('‚úÖ Employee name from userProfile:', parsed.name);
            return parsed.name;
          }
        } catch (e) {
          console.warn('‚ö†Ô∏è Failed to parse userProfile:', e);
        }
      }

      // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å localStorage ‡∏≠‡∏∑‡πà‡∏ô‡πÜ
      const fallbackNames = [
        localStorage.getItem('userName'),
        localStorage.getItem('employeeName'),
        sessionStorage.getItem('employeeName')
      ];

      for (const name of fallbackNames) {
        if (name && typeof name === 'string' && name.trim() &&
            !name.includes('[object') && name !== 'undefined') {
          console.log('‚úÖ Employee name from localStorage:', name);
          return name.trim();
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API
      console.log('üîç No cached employee name found, fetching from API...');
      const response = await fetch('/api/auth/profile', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json'
        }
      });

      if (response.ok) {
        const userData = await response.json();
        const employeeName = userData.user?.name || userData.name || userData.username;
        if (employeeName) {
          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á localStorage ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
          localStorage.setItem('employeeName', employeeName);
          console.log('‚úÖ Employee name from API:', employeeName);
          return employeeName;
        }
      } else {
        console.warn('‚ö†Ô∏è Failed to fetch user profile from API:', response.status);
      }

      // üîß FIX: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ fallback - ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô null ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login
      console.warn('‚ö†Ô∏è No employee name found from login/token');
      return null;

    } catch (error) {
      console.error('‚ùå Error getting employee name:', error);
      return null;
    }
  }

  // ========== TAX CALCULATION METHODS ==========

  /**
   * ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• step1 ‡πÅ‡∏•‡∏∞ step3
   */
  calculateVatAmount(step1Data, step3Data) {
    try {
      console.log('üí∞ Calculating VAT amount...');
      console.log('üîç Input data check:', {
        step1Data,
        step1DataType: typeof step1Data,
        hasCartItems: !!step1Data?.cartItems,
        cartItemsType: typeof step1Data?.cartItems,
        isCartItemsArray: Array.isArray(step1Data?.cartItems),
        cartItemsLength: step1Data?.cartItems?.length,
        step3Data,
        step3DataType: typeof step3Data
      });

      if (!step1Data || !step3Data) {
        console.log('‚ö†Ô∏è Missing step1Data or step3Data for VAT calculation');
        return 0;
      }

      if (!step1Data.cartItems) {
        console.log('‚ö†Ô∏è Missing cartItems in step1Data for VAT calculation');
        return 0;
      }

      if (!Array.isArray(step1Data.cartItems)) {
        console.log('‚ö†Ô∏è cartItems is not an array:', step1Data.cartItems);
        return 0;
      }

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)
      let subtotal = 0;
      subtotal = step1Data.cartItems
        .filter(item => !item.name?.includes('‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°') && !item.description?.includes('‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°'))
        .reduce((sum, item) => {
          const price = parseFloat(item.price || item.sale_price || 0);
          const quantity = parseInt(item.quantity || 1);
          return sum + (price * quantity);
        }, 0);

      const docFee = parseFloat(step3Data.doc_fee || 0);
      const afterDiscount = subtotal + docFee;

      let vatAmount = 0;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ï‡∏≤‡∏° taxType
      if (step3Data.taxType === 'inclusive') {
        // ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤: VAT = Amount - (Amount / 1.07)
        vatAmount = Math.round((afterDiscount - (afterDiscount / 1.07)) * 100) / 100;
      } else if (step3Data.taxType === 'exclusive' || step3Data.taxType === 'vat') {
        // ‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏¢‡∏Å‡∏ô‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤: VAT = Amount * 0.07
        vatAmount = Math.round(afterDiscount * 0.07 * 100) / 100;
      } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ
        vatAmount = 0;
      }

      console.log('üí∞ VAT calculation result:', {
        subtotal,
        docFee,
        afterDiscount,
        taxType: step3Data.taxType,
        vatAmount
      });

      return vatAmount;

    } catch (error) {
      console.error('‚ùå Error calculating VAT amount:', error);
      return 0;
    }
  }

  initialize() {
    console.log('üìã Initializing Step 4 Integration...');
    console.log('üîÑ Stock Update Feature: ‚úÖ ENABLED - ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß');

    // Wait for Global Data Manager
    if (typeof window.globalInstallmentManager === 'undefined') {
      console.log('‚è≥ Waiting for Global Data Manager...');
      setTimeout(() => this.initialize(), 100);
      return;
    }

    // Check if all previous steps are completed
    if (!window.globalInstallmentManager.canNavigateToStep(4)) {
      this.redirectToIncompleteStep();
      return;
    }

    this.loadSummaryData();
    this.setupEventListeners();

    this.isInitialized = true;
    console.log('‚úÖ Step 4 Integration initialized');
    console.log('üì¶ Stock update is ready to process items when contract is created');
  }

  // ========== DATA LOADING ==========

  loadSummaryData() {
    const step1Data = window.globalInstallmentManager.getStepData(1);
    const step2Data = window.globalInstallmentManager.getStepData(2);
    const step3Data = window.globalInstallmentManager.getStepData(3);

    if (!step1Data || !step2Data || !step3Data) {
      this.showToast('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤', 'error');
      return;
    }

    this.renderContractSummary(step1Data, step2Data, step3Data);
    this.renderCustomerSummary(step2Data);
    this.renderItemsSummary(step1Data);
    this.renderPaymentPlanSummary(step3Data);
    this.updatePaymentAmount(step3Data);
    this.checkTaxInvoiceAvailability(step1Data);

    console.log('üì• Loaded summary data for Step 4');
  }

  renderContractSummary(step1Data, step2Data, step3Data) {
    const container = document.getElementById('contractSummary');
    if (!container) return;

    // üîß ‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î = ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå + (‡∏Ñ‡πà‡∏≤‡∏á‡∏ß‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏î‡∏∑‡∏≠‡∏ô √ó ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î)
    const downPayment = Number(step3Data.down_payment || 0);
    const installmentPeriod = Number(step3Data.installment_count || 0);
    const installmentAmount = Number(step3Data.installment_amount || 0);
    const totalAmount = downPayment + (installmentAmount * installmentPeriod);
    const docFee = Number(step3Data.doc_fee || 0);

    container.innerHTML = `
      <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 text-center">
          <div class="text-2xl font-bold text-blue-600 dark:text-blue-400">‡∏ø${this.formatPrice(totalAmount)}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">‡∏¢‡∏≠‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î</div>
        </div>
        
        <div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-4 text-center">
          <div class="text-2xl font-bold text-green-600 dark:text-green-400">‡∏ø${this.formatPrice(downPayment + docFee)}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">‡∏ä‡∏≥‡∏£‡∏∞‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ</div>
        </div>
        
        <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 text-center">
          <div class="text-2xl font-bold text-purple-600 dark:text-purple-400">${installmentPeriod}</div>
          <div class="text-sm text-gray-600 dark:text-gray-400">‡∏á‡∏ß‡∏î</div>
        </div>
      </div>
      
      <div class="mt-4 space-y-2">
            <div class="flex justify-between">
          <span class="text-gray-600 dark:text-gray-400">‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤:</span>
          <span class="font-semibold">${step2Data.customer.firstName || step2Data.customer.first_name || ''} ${step2Data.customer.lastName || step2Data.customer.last_name || ''}</span>
            </div>
            <div class="flex justify-between">
              <span class="text-gray-600 dark:text-gray-400">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå:</span>
          <span class="font-semibold">${step2Data.customer.phone || step2Data.customer.phone_number || ''}</span>
            </div>
            <div class="flex justify-between">
          <span class="text-gray-600 dark:text-gray-400">‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞:</span>
          <span class="font-semibold">${step3Data.selectedPlan?.name || '‡πÅ‡∏ú‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏≠‡∏á'}</span>
            </div>
            <div class="flex justify-between">
          <span class="text-gray-600 dark:text-gray-400">‡∏ú‡πà‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏á‡∏ß‡∏î:</span>
          <span class="font-semibold">‡∏ø${this.formatPrice(installmentAmount)}</span>
        </div>
                           </div>
     `;
  }

  renderCustomerSummary(step2Data) {
    const container = document.getElementById('customerSummary');
    if (!container) return;

    const customer = step2Data.customer;

    container.innerHTML = `
      <div>
        <h4 class="font-semibold mb-2">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</h4>
        <div class="space-y-1 text-sm">
          <div><span class="text-gray-600 dark:text-gray-400">‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•:</span> ${customer.prefix || ''} ${customer.firstName || customer.first_name || ''} ${customer.lastName || customer.last_name || ''}</div>
          <div><span class="text-gray-600 dark:text-gray-400">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</span> ${this.formatIdCard(customer.idCard || customer.tax_id || customer.id_card || '')}</div>
          <div><span class="text-gray-600 dark:text-gray-400">‡∏≠‡∏≤‡∏¢‡∏∏:</span> ${customer.age} ‡∏õ‡∏µ</div>
          <div><span class="text-gray-600 dark:text-gray-400">‡∏≠‡∏µ‡πÄ‡∏°‡∏•:</span> ${customer.email}</div>
        </div>
      </div>
      
      <div>
        <h4 class="font-semibold mb-2">‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà</h4>
        <div class="text-sm text-gray-600 dark:text-gray-400">
          ${this.formatAddress(customer.address)}
        </div>
        
        ${(() => {
          // Debug witness data from multiple sources
          const witnessFromStep2 = step2Data.witness || {};
          const witnessFromLocalStorage = JSON.parse(localStorage.getItem('witness_data') || '{}');
          const witnessFromGlobal = window.globalInstallmentManager?.getStepData(2)?.witness || {};

          console.log('üîç Debug witness data sources:', {
            witnessFromStep2,
            witnessFromLocalStorage,
            witnessFromGlobal,
            step2DataKeys: Object.keys(step2Data),
            hasWitnessInStep2: !!step2Data.witness
          });

          // Merge all witness data sources
          const witnessData = {
            ...witnessFromGlobal,
            ...witnessFromLocalStorage,
            ...witnessFromStep2
          };

          console.log('üîç Merged witness data:', witnessData);

          // Check if we have any witness data
          const hasWitnessData = witnessData.firstName || witnessData.lastName || witnessData.name;

          if (hasWitnessData) {
            return `
              <div class="mt-4">
                <h4 class="font-semibold mb-2">‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô/‡∏û‡∏¢‡∏≤‡∏ô</h4>
                <div class="space-y-1 text-sm">
                  <div><span class="text-gray-600 dark:text-gray-400">‡∏ä‡∏∑‡πà‡∏≠:</span> ${witnessData.firstName || witnessData.name || ''} ${witnessData.lastName || ''}</div>
                  <div><span class="text-gray-600 dark:text-gray-400">‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</span> ${witnessData.idCard || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                  <div><span class="text-gray-600 dark:text-gray-400">‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:</span> ${witnessData.phone || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                  <div><span class="text-gray-600 dark:text-gray-400">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå:</span> ${witnessData.relationship || witnessData.relation || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}</div>
                  ${witnessData.photoUrl ? `<div><span class="text-gray-600 dark:text-gray-400">‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û:</span> <span class="text-green-600">‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß</span></div>` : ''}
                  ${witnessData.idCardImageUrl ? `<div><span class="text-gray-600 dark:text-gray-400">‡∏£‡∏π‡∏õ‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô:</span> <span class="text-green-600">‡∏°‡∏µ‡πÅ‡∏•‡πâ‡∏ß</span></div>` : ''}
                </div>
              </div>
            `;
          } else {
            return `
              <div class="mt-4">
                <h4 class="font-semibold mb-2 text-yellow-600">‡∏ú‡∏π‡πâ‡∏Ñ‡πâ‡∏≥‡∏õ‡∏£‡∏∞‡∏Å‡∏±‡∏ô/‡∏û‡∏¢‡∏≤‡∏ô</h4>
                <div class="text-sm text-yellow-600">
                  ‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏¢‡∏≤‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Step 2
                </div>
              </div>
            `;
          }
        })()}
      </div>
    `;
  }

  renderItemsSummary(step1Data) {
    const container = document.getElementById('itemsSummary');
    if (!container) return;

    container.innerHTML = '';

    step1Data.cartItems.forEach(item => {
      const itemDiv = document.createElement('div');
      itemDiv.className = 'flex items-center gap-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg';

      itemDiv.innerHTML = `
        <img src="${this.getImageUrl(item.image)}" alt="${item.name}" 
             class="w-12 h-12 object-cover rounded-lg"
             onerror="this.src='/uploads/Logo2.png'">
        <div class="flex-1">
          <h4 class="font-semibold text-sm">${item.name}</h4>
          <p class="text-xs text-gray-600 dark:text-gray-400">${item.brand || 'N/A'}</p>
          ${item.imei ? `<p class="text-xs text-blue-600 dark:text-blue-400 font-mono">IMEI: ${item.imei}</p>` : ''}
        </div>
        <div class="text-right">
          <div class="font-semibold">‡∏ø${this.formatPrice(item.totalPrice || item.price)}</div>
          <div class="text-xs text-gray-500">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${item.quantity || 1}</div>
        </div>
      `;

      container.appendChild(itemDiv);
    });

    // Total
    const totalDiv = document.createElement('div');
    totalDiv.className = 'flex justify-between items-center pt-3 border-t border-gray-200 dark:border-gray-600 font-bold';
    totalDiv.innerHTML = `
      <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
      <span class="text-blue-600 dark:text-blue-400">‡∏ø${this.formatPrice(step1Data.totalAmount)}</span>
    `;
    container.appendChild(totalDiv);
  }

  renderPaymentPlanSummary(step3Data) {
    const container = document.getElementById('paymentPlanSummary');
    if (!container) return;

    // üîç DEBUG: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≤‡∏Å step3
    console.log('üîç Step3 Payment Method Debug:', {
      paymentMethod: step3Data.paymentMethod,
      creditTerm: step3Data.creditTerm,
      fullStep3Data: step3Data
    });

    const plan = step3Data.selectedPlan;
    if (!plan) return;

    const today = new Date();
    const firstInstallment = new Date(today);
    firstInstallment.setMonth(firstInstallment.getMonth() + 1);

    const lastInstallment = new Date(today);
    lastInstallment.setMonth(lastInstallment.getMonth() + step3Data.installment_count);

    container.innerHTML = `
      <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div class="space-y-2">
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å:</span>
            <span class="font-semibold">${plan.name}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå:</span>
            <span class="font-semibold text-green-600">‡∏ø${this.formatPrice(step3Data.down_payment)}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°:</span>
            <span class="font-semibold">‡∏ø${this.formatPrice(step3Data.doc_fee)}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏á‡∏ß‡∏î:</span>
            <span class="font-semibold">${step3Data.installment_count} ‡∏á‡∏ß‡∏î</span>
          </div>
        </div>
        
        <div class="space-y-2">
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡∏ú‡πà‡∏≠‡∏ô‡∏ï‡πà‡∏≠‡∏á‡∏ß‡∏î:</span>
            <span class="font-semibold text-blue-600">‡∏ø${this.formatPrice(step3Data.installment_amount)}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡∏á‡∏ß‡∏î‡πÅ‡∏£‡∏Å:</span>
            <span class="font-semibold">${this.formatDate(firstInstallment)}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡∏á‡∏ß‡∏î‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:</span>
            <span class="font-semibold">${this.formatDate(lastInstallment)}</span>
          </div>
          <div class="flex justify-between">
            <span class="text-gray-600 dark:text-gray-400">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞:</span>
            <span class="font-semibold">${this.getPaymentMethodText(step3Data.paymentMethod || step3Data.creditTerm || 'cash')}</span>
          </div>
        </div>
      </div>
    `;
  }

  updatePaymentAmount(step3Data) {
    // ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å step1 ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ
    const step1Data = window.globalInstallmentManager.getStepData(1);

    // üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    console.log('üîç updatePaymentAmount debug:', {
      step1Data,
      step1DataType: typeof step1Data,
      cartItems: step1Data?.cartItems,
      cartItemsType: typeof step1Data?.cartItems,
      isArray: Array.isArray(step1Data?.cartItems),
      step3Data,
      step3DataType: typeof step3Data
    });

    const downPayment = step3Data.down_payment || 0;
    const docFee = step3Data.doc_fee || 0;

    // üîß ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡πâ‡∏ß (inclusive)
    const vatAmount = this.calculateVatAmount(step1Data, step3Data);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ = ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° (VAT ‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß)
    const totalAmount = downPayment + docFee;

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó display
    const totalElement = document.getElementById('todayPaymentAmount');
    if (totalElement) {
      totalElement.textContent = `‡∏ø${this.formatPrice(totalAmount)}`;
    }

    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    const downPaymentElement = document.getElementById('downPaymentDisplay');
    if (downPaymentElement) {
      downPaymentElement.textContent = `‡∏ø${this.formatPrice(downPayment)}`;
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    const docFeeElement = document.getElementById('docFeeDisplay');
    if (docFeeElement) {
      if (docFee > 0) {
        docFeeElement.style.display = 'block';
        docFeeElement.querySelector('span').textContent = `‡∏ø${this.formatPrice(docFee)}`;
      } else {
        docFeeElement.style.display = 'none';
      }
    }

    // üîß ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
    const taxDisplay = document.getElementById('taxDisplay');
    if (taxDisplay) {
      if (vatAmount > 0) {
        taxDisplay.style.display = 'block';
        const taxSpan = taxDisplay.querySelector('span');
        if (taxSpan) {
          taxSpan.textContent = `‡∏ø${this.formatPrice(vatAmount)}`;
        }
      } else {
        taxDisplay.style.display = 'none';
      }
    }

    console.log('üí∞ Payment amount updated:', {
      downPayment,
      docFee,
      vatAmount,
      totalAmount,
      taxType: step3Data?.taxType
    });

    // üîß ‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
    const taxElement = document.getElementById('taxDisplay');
    if (taxElement) {
      if (vatAmount > 0) {
        taxElement.style.display = 'block';
        taxElement.querySelector('span').textContent = `‡∏ø${this.formatPrice(vatAmount)}`;
      } else {
        taxElement.style.display = 'none';
      }
    }

    console.log('üí∞ Payment amount updated:', {
      downPayment,
      docFee,
      vatAmount,
      totalAmount,
      taxType: step3Data?.taxType
    });
  }

  // ========== DOCUMENT GENERATION METHODS ==========

  async generateQuotationDocument(documentData) {
    console.log('üìÑ Generating quotation PDF with MANDATORY database persistence');
    try {
      // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Quotation
      console.log('üîç MANDATORY Customer data validation for Quotation:', {
        hasCustomerData: !!documentData?.customerData,
        customerName: documentData?.customerData ?
          `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim() :
          'NO_CUSTOMER_DATA',
        customerTaxId: documentData?.customerData?.tax_id || 'NO_TAX_ID',
        customerPhone: documentData?.customerData?.phone_number || 'NO_PHONE',
        customerAddress: documentData?.customerData?.address || 'NO_ADDRESS',
        hasItemsData: !!(documentData?.itemsData && documentData.itemsData.length > 0),
        itemsCount: documentData?.itemsData?.length || 0,
        hasPaymentData: !!documentData?.paymentData,
        downPayment: documentData?.paymentData?.downPayment || 0
      });

      // üö® ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
      if (!documentData?.customerData ||
          (!documentData.customerData.first_name && !documentData.customerData.last_name)) {
        throw new Error('‚ùå MANDATORY ERROR: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ');
      }

      if (!documentData?.itemsData || documentData.itemsData.length === 0) {
        throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ');
      }

      if (!documentData?.paymentData) {
        throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤‡πÑ‡∏î‡πâ');
      }

      console.log('‚úÖ MANDATORY validation passed for Quotation - proceeding with database save');
      console.log('üíæ MANDATORY: Saving quotation data to database FIRST...');

      // Debug: Check customer data for Quotation
      console.log('üîç Customer data debug for Quotation:', {
        prefix: documentData.customerData.prefix,
        first_name: documentData.customerData.first_name,
        last_name: documentData.customerData.last_name,
        address: documentData.customerData.address,
        addressType: typeof documentData.customerData.address,
        fullCustomerData: documentData.customerData
      });
      // üóÉÔ∏è STEP 1: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Quotation model ‡∏Å‡πà‡∏≠‡∏ô
      console.log('üíæ Saving quotation data to database...');

      const quotationData = {
        date: new Date(),
        branchCode: documentData.branchData?.code || window.BRANCH_CODE || '00000',
        docFee: documentData.paymentData?.docFee || 0,
        pickupMethod: 'store',
        shippingFee: 0,
        customer: {
          name: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
          address: documentData.customerData.address || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          taxId: documentData.customerData.tax_id || '',
          phone: documentData.customerData.phone_number || ''
        },
        witness: {
          name: '‡∏û‡∏¢‡∏≤‡∏ô ‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
          id_card: '1234567890123',
          phone: '0800000000',
          relation: '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô'
        },
        currency: 'THB',
        creditTerm: this.getPaymentMethodText(documentData.paymentData?.paymentMethod) || '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
        vatInclusive: true,
        discountValue: 0,
        planType: documentData.paymentData?.selectedPlan || '‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞',
        downPayment: documentData.paymentData?.downPayment || 0,
        installmentPeriod: documentData.paymentData?.installmentPeriod || 0,
        installmentAmount: documentData.paymentData?.installmentAmount || 0,
        items: (documentData.itemsData || []).map(item => ({
          product: item.id || item._id || item.productId || item.product_id,
          imei: item.imei || '',
          quantity: parseInt(item.quantity || 1),
          unitPrice: parseFloat(item.price || 0),
          totalPrice: parseFloat(item.totalPrice || item.price || 0) * parseInt(item.quantity || 1),
          downAmount: documentData.paymentData?.downPayment || 0,
          termCount: documentData.paymentData?.installmentPeriod || 0,
          installmentAmount: documentData.paymentData?.installmentAmount || 0
        })),
        summary: {
          subtotal: documentData.paymentData?.subTotal || documentData.paymentData?.totalAmount || 0,
          shipping: 0,
          discount: 0,
          beforeTax: documentData.paymentData?.beforeTaxAmount || documentData.paymentData?.totalAmount || 0,
          tax: documentData.paymentData?.vatAmount || 0,
          netTotal: documentData.paymentData?.totalAmount || 0
        },
        // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        signatures: {
          customer: window.globalInstallmentManager?.getCustomerSignature() || '',
          salesperson: window.globalInstallmentManager?.getSalespersonSignature() || '',
          authorized: window.globalInstallmentManager?.getAuthorizedSignature() || ''
        },
        customerSignature: window.globalInstallmentManager?.getCustomerSignature() || '',
        customerSignatureUrl: window.globalInstallmentManager?.getCustomerSignature() || '',
        employeeSignature: window.globalInstallmentManager?.getSalespersonSignature() || '',
        salespersonSignatureUrl: window.globalInstallmentManager?.getSalespersonSignature() || '',
        authorizedSignature: window.globalInstallmentManager?.getAuthorizedSignature() || '',
        authorizedSignatureUrl: window.globalInstallmentManager?.getAuthorizedSignature() || ''
      };

      console.log('üìã Quotation data to be sent:', JSON.stringify(quotationData, null, 2));

      // üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Database
      console.log('üñãÔ∏è Quotation Signatures being sent to database:', {
        customerSignature: quotationData.customerSignature ? quotationData.customerSignature.substring(0, 50) + '...' : 'EMPTY',
        employeeSignature: quotationData.employeeSignature ? quotationData.employeeSignature.substring(0, 50) + '...' : 'EMPTY',
        authorizedSignature: quotationData.authorizedSignature ? quotationData.authorizedSignature.substring(0, 50) + '...' : 'EMPTY'
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout protection
      const quotationController = new AbortController();
      const quotationTimeoutId = setTimeout(() => quotationController.abort(), 15000); // 15 seconds timeout

      const saveResponse = await fetch('/api/quotation', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify(quotationData),
        signal: quotationController.signal
      });

      clearTimeout(quotationTimeoutId);

      if (!saveResponse.ok) {
        const errorData = await saveResponse.text();
        console.error('‚ùå Quotation save error details:', errorData);
        throw new Error(`Failed to save quotation: ${saveResponse.status} ${saveResponse.statusText} - ${errorData}`);
      }

      const savedQuotation = await saveResponse.json();
      console.log('‚úÖ Quotation saved to database:', savedQuotation);

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó quotation number ‡πÉ‡∏ô contractData ‡πÅ‡∏•‡∏∞ session
      const quotationNumber = savedQuotation.data?.quotationNumber ||
                             savedQuotation.data?.number ||
                             savedQuotation.quotationNumber ||
                             savedQuotation.number ||
                             savedQuotation.data?.data?.quotationNumber ||
                             `QT-${String(new Date().getFullYear() + 543).slice(-2)}${String(new Date().getMonth() + 1).padStart(2, '0')}${String(new Date().getDate()).padStart(2, '0')}-${String(Date.now()).slice(-3)}`;

      const quotationId = savedQuotation.data?._id ||
                         savedQuotation._id ||
                         savedQuotation.data?.data?._id ||
                         savedQuotation.id;

      console.log('üîç Quotation extraction debug:', {
        quotationNumber,
        quotationId,
        savedQuotationKeys: Object.keys(savedQuotation),
        savedQuotationDataKeys: savedQuotation.data ? Object.keys(savedQuotation.data) : 'no data field',
        // üîç Debug: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á quotationNumber
        fromDataQuotationNumber: savedQuotation.data?.quotationNumber,
        fromDataNumber: savedQuotation.data?.number,
        fromQuotationNumber: savedQuotation.quotationNumber,
        fromNumber: savedQuotation.number,
        fromDataDataQuotationNumber: savedQuotation.data?.data?.quotationNumber,
        usedFallback: !savedQuotation.data?.quotationNumber && !savedQuotation.data?.number && !savedQuotation.quotationNumber && !savedQuotation.number && !savedQuotation.data?.data?.quotationNumber
      });

        if (this.contractData) {
        this.contractData.quotationNumber = quotationNumber;
        this.contractData.quotationRef = quotationNumber;
          this.contractData.data = this.contractData.data || {};
        this.contractData.data.quotation_no = quotationNumber;
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó globalInstallmentManager
        if (window.globalInstallmentManager && window.globalInstallmentManager.updateQuotationNumber) {
        window.globalInstallmentManager.updateQuotationNumber(quotationNumber);
        }

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó session storage
      sessionStorage.setItem('currentQuotationNumber', quotationNumber);
      sessionStorage.setItem('actualQuotationNumber', quotationNumber);
      sessionStorage.setItem('savedQuotationId', quotationId);

      console.log('‚úÖ Quotation number updated to:', quotationNumber);

            // üóÉÔ∏è STEP 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ fallback URL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
      console.log('üìÑ Using direct PDF URL for quotation...');

      const pdfUrl = `/api/pdf/quotation/${quotationNumber}`;
      console.log('‚úÖ Quotation PDF URL generated:', pdfUrl);

      return pdfUrl;

    } catch (error) {
      console.error('‚ùå Error in quotation generation:', error);

      // üö® MANDATORY: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô MANDATORY ERROR
      if (error.message.includes('MANDATORY ERROR')) {
        console.error('üö® MANDATORY ERROR detected - stopping all operations');
        throw error; // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      }

      if (error.name === 'AbortError') {
        console.error('‚ùå Quotation API timeout');
        throw new Error('‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MANDATORY (‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ fallback)
      console.error('‚ùå Non-mandatory error in quotation generation, using fallback:', error);

      // Fallback
      const quotationNumber = this.contractData?.quotationNumber ||
                             sessionStorage.getItem('currentQuotationNumber') ||
                             `QT-${String(new Date().getFullYear() + 543).slice(-2)}${String(new Date().getMonth() + 1).padStart(2, '0')}${String(new Date().getDate()).padStart(2, '0')}-${String(Date.now()).slice(-3)}`;

      console.log('üìÑ Using fallback quotation URL:', quotationNumber);
      return `/api/pdf/quotation/${quotationNumber}`;
    }
  }

  async generateInvoiceDocument(documentData) {
    // Debug: Check customer data for Invoice
    console.log('üîç Customer data debug for Invoice:', {
      prefix: documentData.customerData.prefix,
      first_name: documentData.customerData.first_name,
      last_name: documentData.customerData.last_name,
      address: documentData.customerData.address,
      addressType: typeof documentData.customerData.address,
      fullCustomerData: documentData.customerData
    });
    console.log('üìÑ Generating invoice PDF with database persistence');

    try {
      // üóÉÔ∏è STEP 1: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Invoice model ‡∏Å‡πà‡∏≠‡∏ô
      console.log('üíæ Saving invoice data to database...');

      // üîß FIX: ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      const quotationNumber = this.contractData?.quotationNumber ||
                              sessionStorage.getItem('currentQuotationNumber') ||
                              sessionStorage.getItem('actualQuotationNumber');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      let invoiceNumber;
      if (quotationNumber) {
        // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô QT-680828-004 -> 680828 ‡πÅ‡∏•‡∏∞ 004
        const quotationMatch = quotationNumber.match(/QT-(\d{6})-(\d{3})$/);
        if (quotationMatch) {
          const dateCode = quotationMatch[1]; // ‡πÄ‡∏ä‡πà‡∏ô "680828"
          const suffix = quotationMatch[2]; // ‡πÄ‡∏ä‡πà‡∏ô "004"
          invoiceNumber = `INV-${dateCode}-${suffix}`;
          console.log('üîß FIXED: Invoice number matched with quotation:', {
            quotationNumber,
            invoiceNumber,
            dateCode,
            suffix
          });
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö quotation number ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
      if (!invoiceNumber) {
        invoiceNumber = `INV-${String(new Date().getFullYear() + 543).slice(-2)}${String(new Date().getMonth() + 1).padStart(2, '0')}${String(new Date().getDate()).padStart(2, '0')}-${String(Date.now()).slice(-3)}`;
        console.log('‚ö†Ô∏è Using fallback invoice number:', invoiceNumber);
      }

      const savedQuotationId = sessionStorage.getItem('savedQuotationId');

      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô undefined ‡∏´‡∏£‡∏∑‡∏≠ "undefined" string
      let validQuotationRef = savedQuotationId;
      if (!validQuotationRef || validQuotationRef === 'undefined' || validQuotationRef === 'null') {
        validQuotationRef = quotationNumber;
      }
      if (!validQuotationRef || validQuotationRef === 'undefined' || validQuotationRef === 'null') {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏´‡∏≤ Quotation Reference ‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }

      // üîß FIX: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VAT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
      const step3Data = window.globalInstallmentManager?.getStepData(3);
      const step1Data = window.globalInstallmentManager?.getStepData(1);
      const calculatedVat = this.calculateVatAmount(step1Data, step3Data);

      const invoiceData = {
        invoiceNumber: invoiceNumber, // üîß FIX: ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
        quotationRef: validQuotationRef,
        date: new Date(),
        branchCode: documentData.branchData?.code || window.BRANCH_CODE || '00000',
        customer: {
          name: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
          address: documentData.customerData.address || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          taxId: documentData.customerData.tax_id || '',
          phone: documentData.customerData.phone_number || ''
        },
        items: (documentData.itemsData || []).map(item => ({
          product: item.id || item._id || item.productId || item.product_id,
            name: item.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
            imei: item.imei || '',
          quantity: parseInt(item.quantity || 1),
          unitPrice: parseFloat(item.price || 0),
          totalPrice: parseFloat(item.totalPrice || item.price || 0) * parseInt(item.quantity || 1),
            downAmount: documentData.paymentData?.downPayment || 0,
            termCount: documentData.paymentData?.installmentPeriod || 0,
          installmentAmount: documentData.paymentData?.installmentAmount || 0
        })),
        pickupMethod: 'store',
        shippingFee: 0,
        docFee: documentData.paymentData?.docFee || 0,
        discountValue: 0,
        planSummaryText: '',
        // üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• VAT ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
        taxType: step3Data?.taxType || 'inclusive',
        vatAmount: calculatedVat,
        vatRate: 7,
        hasVat: calculatedVat > 0,
        // üîß FIX: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì subtotal ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏à‡∏£‡∏¥‡∏á
        subtotal: (documentData.itemsData || []).reduce((sum, item) => {
          return sum + (parseFloat(item.totalPrice || item.price || 0) * parseInt(item.quantity || 1));
        }, 0),
        // üîß FIX: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalWithTax ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        totalWithTax: (() => {
          const itemsTotal = (documentData.itemsData || []).reduce((sum, item) => {
            return sum + (parseFloat(item.totalPrice || item.price || 0) * parseInt(item.quantity || 1));
          }, 0);
          const docFee = documentData.paymentData?.docFee || 0;
          const total = itemsTotal + docFee + calculatedVat;
          console.log('üîß Invoice totalWithTax calculation:', {
            itemsTotal,
            docFee,
            calculatedVat,
            total
          });
          return total;
        })(),
        // üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ - ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        staffName: await this.getLoggedInEmployeeName(),
        employeeName: await this.getLoggedInEmployeeName(),
        salesman: await this.getLoggedInEmployeeName(),
        // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        signatures: {
          customer: window.globalInstallmentManager?.getCustomerSignature() || '',
          salesperson: window.globalInstallmentManager?.getSalespersonSignature() || '',
          authorized: window.globalInstallmentManager?.getAuthorizedSignature() || ''
        },
        customerSignature: window.globalInstallmentManager?.getCustomerSignature() || '',
        customerSignatureUrl: window.globalInstallmentManager?.getCustomerSignature() || '',
        employeeSignature: window.globalInstallmentManager?.getSalespersonSignature() || '',
        salespersonSignatureUrl: window.globalInstallmentManager?.getSalespersonSignature() || '',
        authorizedSignature: window.globalInstallmentManager?.getAuthorizedSignature() || '',
        authorizedSignatureUrl: window.globalInstallmentManager?.getAuthorizedSignature() || ''
      };

      console.log('üìã Invoice data to be sent:', JSON.stringify(invoiceData, null, 2));

      // üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Database
      console.log('üñãÔ∏è Invoice Signatures being sent to database:', {
        customerSignature: invoiceData.customerSignature ? invoiceData.customerSignature.substring(0, 50) + '...' : 'EMPTY',
        employeeSignature: invoiceData.employeeSignature ? invoiceData.employeeSignature.substring(0, 50) + '...' : 'EMPTY',
        authorizedSignature: invoiceData.authorizedSignature ? invoiceData.authorizedSignature.substring(0, 50) + '...' : 'EMPTY'
      });
      console.log('üîç Invoice generation debug:', {
        quotationNumber,
        savedQuotationId,
        validQuotationRef,
        usingQuotationRef: invoiceData.quotationRef,
        refType: typeof invoiceData.quotationRef
      });

      // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout protection
      const invoiceController = new AbortController();
      const invoiceTimeoutId = setTimeout(() => invoiceController.abort(), 15000); // 15 seconds timeout

      const saveResponse = await fetch('/api/invoice', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify(invoiceData),
        signal: invoiceController.signal
      });

      clearTimeout(invoiceTimeoutId);

      if (!saveResponse.ok) {
        const errorData = await saveResponse.text();
        console.error('‚ùå Invoice save error details:', errorData);
        throw new Error(`Failed to save invoice: ${saveResponse.status} ${saveResponse.statusText} - ${errorData}`);
      }

      const savedInvoice = await saveResponse.json();
      console.log('‚úÖ Invoice saved to database:', savedInvoice);

      const savedInvoiceNumber = savedInvoice.invoiceNumber || savedInvoice.number;
      if (this.contractData) {
        this.contractData.invoiceNumber = savedInvoiceNumber;
        this.contractData.invoiceRef = savedInvoiceNumber;
        this.contractData.data = this.contractData.data || {};
        this.contractData.data.invoice_no = savedInvoiceNumber;
      }

      sessionStorage.setItem('currentInvoiceNumber', savedInvoiceNumber);
      sessionStorage.setItem('savedInvoiceId', savedInvoice._id);

      console.log('‚úÖ Invoice number updated to:', savedInvoiceNumber);

            // üóÉÔ∏è STEP 2: ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ fallback URL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏ñ‡∏µ‡∏¢‡∏£)
      console.log('üìÑ Using direct PDF URL for invoice...');

      const pdfUrl = `/api/pdf/invoice/${savedInvoiceNumber}`;
      console.log('‚úÖ Invoice PDF URL generated:', pdfUrl);

      return pdfUrl;

    } catch (error) {
      console.error('‚ùå Error in invoice generation:', error);

      if (error.name === 'AbortError') {
        console.error('‚ùå Invoice API timeout');
      }

      // Fallback
      invoiceNumber = this.contractData?.invoiceNumber ||
                     sessionStorage.getItem('currentInvoiceNumber') ||
                     `INV-${new Date().getFullYear()}${String(new Date().getMonth() + 1).padStart(2, '0')}${String(new Date().getDate()).padStart(2, '0')}-${String(Date.now()).slice(-3)}`;

      console.log('üìÑ Using fallback invoice URL:', invoiceNumber);
      return `/api/pdf/invoice/${invoiceNumber}`;
    }
  }

  async generateReceiptDocument(documentData) {
    console.log('üìÑ Generating receipt PDF with MANDATORY database persistence');
    console.log('üîß Receipt Generation - Start Time:', new Date().toISOString());
    console.log('üìã Receipt Input Data Overview:', {
      hasDocumentData: !!documentData,
      documentDataKeys: documentData ? Object.keys(documentData) : null,
      customerDataExists: !!(documentData?.customerData),
      itemsDataExists: !!(documentData?.itemsData),
      paymentDataExists: !!(documentData?.paymentData)
    });

    try {
      // Check if items have VAT to determine document number format
      console.log('üîç Step 1: Checking VAT status for receipt type determination...');
      const hasVatItems = this.checkHasVatItems();
      console.log('üìä VAT Detection Result for Receipt:', {
        hasVatItems,
        receiptType: hasVatItems ? 'Tax Receipt (TX-)' : 'Regular Receipt (RE-)',
        timestamp: new Date().toLocaleTimeString()
      });

      // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
      console.log('ÔøΩ MANDATORY Customer data validation for Receipt:', {
        hasCustomerData: !!documentData?.customerData,
        customerName: documentData?.customerData ?
          `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim() :
          'NO_CUSTOMER_DATA',
        customerTaxId: documentData?.customerData?.tax_id || 'NO_TAX_ID',
        customerPhone: documentData?.customerData?.phone_number || 'NO_PHONE',
        customerAddress: documentData?.customerData?.address || 'NO_ADDRESS',
        hasItemsData: !!(documentData?.itemsData && documentData.itemsData.length > 0),
        itemsCount: documentData?.itemsData?.length || 0,
        hasPaymentData: !!documentData?.paymentData,
        downPayment: documentData?.paymentData?.downPayment || 0
      });

      // üö® ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
      if (!documentData?.customerData ||
          (!documentData.customerData.first_name && !documentData.customerData.last_name)) {
        throw new Error('‚ùå MANDATORY ERROR: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ');
      }

      if (!documentData?.itemsData || documentData.itemsData.length === 0) {
        throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ');
      }

      if (!documentData?.paymentData || !documentData.paymentData.downPayment) {
        throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ');
      }

      console.log('‚úÖ MANDATORY validation passed - proceeding with database save');
      console.log('ÔøΩüíæ MANDATORY: Saving receipt data to database FIRST...');

      // Debug: Check all input data
      console.log('üîç Customer data debug for Receipt:', {
        prefix: documentData.customerData.prefix,
        first_name: documentData.customerData.first_name,
        last_name: documentData.customerData.last_name,
        address: documentData.customerData.address,
        addressType: typeof documentData.customerData.address
      });

      // Debug: Check available signatures
      const customerSignature = window.globalInstallmentManager?.getCustomerSignature() || '';
      const salespersonSignature = window.globalInstallmentManager?.getSalespersonSignature() || '';
      const authorizedSignature = window.globalInstallmentManager?.getAuthorizedSignature() || '';
      console.log('üñãÔ∏è Signature debug for Receipt:', {
        customer: customerSignature ? `${customerSignature.substring(0, 50)}...` : 'EMPTY',
        salesperson: salespersonSignature ? `${salespersonSignature.substring(0, 50)}...` : 'EMPTY',
        authorized: authorizedSignature ? `${authorizedSignature.substring(0, 50)}...` : 'EMPTY',
        // üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö signature URLs ‡∏î‡πâ‡∏ß‡∏¢
        customerSignatureUrl: window.globalInstallmentManager?.getStepData(2)?.customerSignatureUrl || 'N/A',
        salespersonSignatureUrl: window.globalInstallmentManager?.getStepData(2)?.salespersonSignatureUrl || 'N/A',
        authorizedSignatureUrl: window.globalInstallmentManager?.getStepData(2)?.authorizedSignatureUrl || 'N/A'
      });

      // Generate receipt number based on VAT status using new document number generator
      console.log('üîç Step 5: Generating receipt number with sequential numbering...');

      // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å globalInstallmentManager
      const branchCode = window.BRANCH_CODE || '680731';

      // ‡πÉ‡∏ä‡πâ‡∏£‡∏∞‡∏ö‡∏ö generateDocumentNumber ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
      let receiptNumber;
      let documentNumberToMatch = null;

      try {
        // üéØ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
        const quotationNumber = this.contractData?.quotationNumber ||
                               sessionStorage.getItem('currentQuotationNumber') ||
                               sessionStorage.getItem('actualQuotationNumber');

        if (quotationNumber) {
          // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô QT-680731-001 -> 001
          const quotationMatch = quotationNumber.match(/-(\d{3})$/);
          if (quotationMatch) {
            documentNumberToMatch = quotationMatch[1]; // ‡πÄ‡∏ä‡πà‡∏ô "001"
            console.log('üìã Found quotation suffix to match:', {
              quotationNumber,
              suffixToMatch: documentNumberToMatch
            });
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà PREFIX-YYMMDD-XXXXX (‡∏û.‡∏®.)
        if (documentNumberToMatch) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á datePrefix ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏û.‡∏®.)
          const now = new Date();
          const yearBE = now.getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®.
          const yearShort = yearBE.toString().slice(-2); // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 2 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (68)
          const month = String(now.getMonth() + 1).padStart(2, '0'); // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 2 ‡∏´‡∏•‡∏±‡∏Å (08)
          const day = String(now.getDate()).padStart(2, '0'); // ‡∏ß‡∏±‡∏ô 2 ‡∏´‡∏•‡∏±‡∏Å (16)
          const datePrefix = `${yearShort}${month}${day}`; // 680816

          // ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ - Receipt ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ RE ‡πÄ‡∏™‡∏°‡∏≠
          receiptNumber = `RE-${datePrefix}-${documentNumberToMatch}`;

          console.log('‚úÖ Receipt number matched with quotation (current date format):', {
            receiptNumber,
            matchedSuffix: documentNumberToMatch,
            quotationNumber,
            dateFormat: `${datePrefix} (${day}/${month}/${yearBE} ‡∏û.‡∏®.)`
          });
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÉ‡∏ä‡πâ API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          const response = await fetch('/api/generate-document-number', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
            },
            body: JSON.stringify({
              hasVatItems,
              branchCode
            })
          });

          if (response.ok) {
            const result = await response.json();
            receiptNumber = result.documentNumber;
            console.log('‚úÖ New sequential receipt number generated via API:', {
              receiptNumber,
              isSequential: true,
              metadata: result.metadata
            });
          } else {
            throw new Error('API call failed');
          }
        }
      } catch (error) {
        console.error('‚ùå Error generating receipt number, using fallback:', error);
        // Fallback: ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
        const currentDate = new Date();
        const year = currentDate.getFullYear() + 543; // ‡∏õ‡∏µ ‡∏û.‡∏®.
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        const timestamp = String(Date.now()).slice(-3);

        receiptNumber = hasVatItems
          ? `TX-${branchCode}-${timestamp}`
          : `RE-${branchCode}-${timestamp}`;
      }

      console.log('üìÑ Receipt Number Generated:', {
        hasVatItems,
        receiptNumber,
        numberType: hasVatItems ? 'Tax Receipt (TX-)' : 'Regular Receipt (RE-)',
        branchCode,
        isSequential: receiptNumber.includes('-001') || receiptNumber.includes('-002') || receiptNumber.includes('-003'),
        timestamp: new Date().toISOString()
      });

      console.log('üîç Step 6: Building receipt data object...');
      const receiptData = {
        receiptNumber: receiptNumber,
        documentType: 'RECEIPT',
        receiptType: 'down_payment_receipt',
        saleType: 'installment', // ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô
        contractNo: this.contractData?.contractNo || this.contractData?.quotationNumber || sessionStorage.getItem('currentQuotationNumber'),
        contractId: this.contractData?.quotationId,
        downPaymentAmount: documentData.paymentData?.downPayment || 0,
        customerName: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
        customer: {
          name: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
          fullName: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
          prefix: documentData.customerData.prefix || '',
          first_name: documentData.customerData.first_name || '',
          last_name: documentData.customerData.last_name || '',
          taxId: documentData.customerData.tax_id || '',
          tax_id: documentData.customerData.tax_id || '',
          phone: documentData.customerData.phone_number || '',
          phone_number: documentData.customerData.phone_number || '',
          email: documentData.customerData.email || '',
          address: this.formatAddress(documentData.customerData.address) || documentData.customerData.address || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          age: documentData.customerData.age || ''
        },
        items: (documentData.itemsData || []).map(item => ({
          product: item.id || item._id || item.productId || item.product_id,
          name: item.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
          brand: item.brand || '',
          imei: item.imei || '',
          quantity: parseInt(item.quantity || 1),
          unitPrice: parseFloat(item.price || item.sale_price || 0),
          totalPrice: parseFloat(item.totalPrice || item.price || item.sale_price || 0) * parseInt(item.quantity || 1),
          downAmount: documentData.paymentData?.downPayment || 0,
          termCount: documentData.paymentData?.installmentPeriod || 0,
          installmentAmount: documentData.paymentData?.installmentAmount || 0,
          image: item.image || '',
          description: item.description || item.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'
        })),
        summary: {
          ...(documentData.summaryData || {}),
          // ‡∏™‡πà‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ API/Model ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ï‡∏≤‡∏°‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
          subtotal: Number(documentData.paymentData?.downPayment || 0),
          docFee: Number(documentData.paymentData?.docFee || 0),
          vatAmount: Number(documentData.taxData?.vatAmount || 0),
          totalWithTax: Number((documentData.paymentData?.downPayment || 0) + (documentData.paymentData?.docFee || 0))
        },
        company: documentData.companyData || {
          name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
          taxId: '0945566000616',
          phone: '09-2427-0769'
        },
        branch: {
          name: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà',
          code: '00000',
          address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000'
        },
        signatures: {
          customer: window.globalInstallmentManager?.getCustomerSignature() || '',
          salesperson: window.globalInstallmentManager?.getSalespersonSignature() || '',
          authorized: window.globalInstallmentManager?.getAuthorizedSignature() || ''
        },
        // üîß FIX: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment method ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        paymentMethod: this.getPaymentMethodForDocument(documentData.paymentData?.paymentMethod),
        paymentDate: new Date(),
        issueDate: new Date().toISOString(),
        notes: `‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ [${receiptNumber}] - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${this.contractData?.contractNo || this.contractData?.quotationNumber || 'N/A'}`,
        branchCode: documentData.branchData?.code || window.BRANCH_CODE || '00000',
        // üîß FIX: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
        employeeName: await this.getLoggedInEmployeeName(),
        salesperson: {
          name: await this.getLoggedInEmployeeName(),
          signature: window.globalInstallmentManager?.getSalespersonSignature() || ''
        }
      };
      // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ idempotencyKey
      try {
        const idemBase = [
          'installment',
          (receiptData.branchCode || this.branchCode || '00000'),
          (receiptData.contractNo || 'N/A'),
          receiptData.receiptNumber,
          (receiptData.customer?.taxId || receiptData.customer?.phone || receiptData.customer?.name || '').replace(/\s+/g, ''),
          Number((documentData.paymentData?.downPayment || 0) + (documentData.paymentData?.docFee || 0)).toFixed(2),
          Number(documentData.paymentData?.docFee || 0).toFixed(2),
          Number(documentData.paymentData?.downPayment || 0).toFixed(2)
        ].join('|');
        receiptData.idempotencyKey = idemBase;
      } catch (_) {}

      console.log('ÔøΩ Step 7: Receipt data prepared successfully');
      console.log('ÔøΩüìã Receipt Data Summary:', {
        receiptNumber,
        documentType: receiptData.documentType,
        receiptType: receiptData.receiptType,
        contractNo: receiptData.contractNo,
        downPaymentAmount: receiptData.downPaymentAmount,
        customerName: receiptData.customerName,
        itemsCount: receiptData.items?.length || 0,
        paymentMethod: receiptData.paymentMethod,
        branchCode: receiptData.branchCode,
        hasSignatures: {
          customer: !!receiptData.signatures?.customer,
          salesperson: !!receiptData.signatures?.salesperson,
          authorized: !!receiptData.signatures?.authorized
        }
      });

      console.log('üìã Full Receipt data prepared:', JSON.stringify(receiptData, null, 2));

      // üîß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Receipt ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
      console.log('ÔøΩ Step 8: Database save preparation...');
      console.log('ÔøΩüíæ MANDATORY: Saving receipt data to database FIRST...');

      // üö® DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡πÑ‡∏õ
      console.log('üì§ Receipt data to be sent to API:', {
        endpoint: '/api/receipt',
        method: 'POST',
        dataSize: JSON.stringify(receiptData).length,
        hasAuthToken: !!localStorage.getItem('authToken'),
        authTokenLength: localStorage.getItem('authToken')?.length || 0
      });
      console.log('üì§ Receipt data payload:', JSON.stringify(receiptData, null, 2));

      try {
        console.log('üîç Step 9: Initiating database save...');
        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        const saveController = new AbortController();
        const saveTimeoutId = setTimeout(() => {
          console.warn('‚ö†Ô∏è Tax Invoice save request timeout - aborting after 30 seconds');
          saveController.abort();
        }, 30000); // 30 seconds timeout - increased from 15

        console.log('üì° Starting POST request to /api/receipt...');
        console.log('‚è∞ Request timeout set to 15 seconds');

        const requestStartTime = Date.now();
        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á request
        const token = localStorage.getItem('authToken');
        if (!token) {
          throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Authentication Token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
        }

        const saveResponse = await fetch('/api/receipt', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(receiptData),
          signal: saveController.signal
        });

        clearTimeout(saveTimeoutId);
        const requestDuration = Date.now() - requestStartTime;

        console.log('üì• Receipt API Response received:', {
          status: saveResponse.status,
          statusText: saveResponse.statusText,
          duration: `${requestDuration}ms`,
          ok: saveResponse.ok,
          headers: Object.fromEntries(saveResponse.headers.entries())
        });

        // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠
        console.log('üîç Step 10: Processing API response...');
        if (saveResponse.ok) {
          const savedReceipt = await saveResponse.json();
          console.log('‚úÖ MANDATORY: Receipt saved to database successfully');
          console.log('üìã Saved Receipt Response:', {
            success: savedReceipt.success,
            receiptId: savedReceipt.data?._id || savedReceipt._id || savedReceipt.id,
            receiptNumber: savedReceipt.data?.receiptNumber || savedReceipt.receiptNumber,
            message: savedReceipt.message,
            responseKeys: Object.keys(savedReceipt)
          });
          console.log('üìã Full Saved Receipt Data:', JSON.stringify(savedReceipt, null, 2));

          // ‚úÖ VERIFY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ ID ‡∏à‡∏£‡∏¥‡∏á‡πÜ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
          const savedReceiptId = savedReceipt.data?.id || savedReceipt.data?._id || savedReceipt._id || savedReceipt.id;
          let fallbackId = null;

          if (!savedReceiptId) {
            console.warn('‚ö†Ô∏è Receipt ID not found in expected format, but response was successful');
            console.log('üîç Available receipt data:', Object.keys(savedReceipt.data || {}));
            // ‡πÉ‡∏ä‡πâ receiptNumber ‡πÄ‡∏õ‡πá‡∏ô fallback ID
            fallbackId = savedReceipt.data?.receiptNumber || savedReceipt.receiptNumber || receiptNumber;
            if (fallbackId) {
              console.log('‚úÖ Using receipt number as fallback ID:', fallbackId);
            } else {
              throw new Error('‚ùå MANDATORY ERROR: No receipt ID or number returned from database');
            }
          }

          const finalReceiptId = savedReceiptId || fallbackId;
          console.log('üÜî MANDATORY: Receipt ID confirmed:', finalReceiptId);

          if (this.contractData) {
            this.contractData.receiptNumber = receiptNumber;
            this.contractData.receiptRef = receiptNumber;
            this.contractData.data = this.contractData.data || {};
            this.contractData.data.receipt_no = receiptNumber;
            this.contractData.data.receipt_id = finalReceiptId;
          }

          sessionStorage.setItem('currentReceiptNumber', receiptNumber);
          sessionStorage.setItem('savedReceiptId', finalReceiptId);

          console.log('‚úÖ MANDATORY: Receipt database integration successful:', {
            number: receiptNumber,
            databaseId: finalReceiptId
          });

          // üîß Enhanced: ‡πÄ‡∏û‡∏¥‡πà‡∏° Enhanced Email Service integration ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Receipt ‡πÅ‡∏•‡∏∞ Tax Invoice
          try {
            console.log('üìß Integrating with Enhanced Email Service...');
            await this.integrateWithEnhancedEmailService(receiptData, receiptNumber);
          } catch (emailError) {
            console.warn('‚ö†Ô∏è Enhanced Email Service integration failed:', emailError);
          }
        } else {
          // üö® MANDATORY ERROR: API call failed - ‡∏´‡πâ‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          const errorData = await saveResponse.text();
          console.error('‚ùå MANDATORY ERROR: Receipt save failed:', {
            status: saveResponse.status,
            statusText: saveResponse.statusText,
            response: errorData
          });

          throw new Error(`‚ùå MANDATORY ERROR: Receipt database save failed: ${saveResponse.status} ${saveResponse.statusText} - ${errorData}`);
        }
      } catch (error) {
        console.error('‚ùå MANDATORY ERROR: Receipt database save error:', error);

        // üö® MANDATORY: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (error.name === 'AbortError') {
          console.error('‚ùå MANDATORY ERROR: Receipt API timeout - Database save failed');
          throw new Error('‚ùå MANDATORY ERROR: ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
        }

        // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        throw error;
      }

      console.log('üìÑ MANDATORY: Database saved successfully, proceeding to PDF generation...');

      // üîß ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á updated API endpoint (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á Tax Invoice ‡πÅ‡∏•‡∏∞ Receipt)
      const allStepData = window.globalInstallmentManager.getAllStepData();

      // Prepare complete data for PDF generation
      const pdfRequestData = {
        // Document information
        documentNumber: receiptNumber,
        documentType: 'RECEIPT',
        invoiceType: 'RECEIPT',
        receiptNumber: receiptNumber,

        // Customer information
        customer: receiptData.customer,

        // Items
        items: receiptData.items,

        // Payment information
        downPaymentAmount: receiptData.downPaymentAmount,
        paymentMethod: receiptData.paymentMethod,

        // Summary
        summary: receiptData.summary,

        // Company and branch
        company: receiptData.company,
        branch: receiptData.branch,
        branchCode: receiptData.branchCode,

        // Staff
        employeeName: receiptData.employeeName,
        salesperson: receiptData.salesperson,

        // Signatures
        customerSignatureUrl: receiptData.signatures?.customer || '',
        salespersonSignatureUrl: receiptData.signatures?.salesperson || '',
        authorizedSignatureUrl: receiptData.signatures?.authorized || '',

        // Dates
        saleDate: receiptData.issueDate,
        issueDate: receiptData.issueDate,

        // Additional info
        contractNo: receiptData.contractNo,
        notes: receiptData.notes,

        // Step data for fallback
        stepData: allStepData
      };

      const pdfResponse = await fetch('/api/pdf/installment/receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify(pdfRequestData)
      });

      if (!pdfResponse.ok) {
        throw new Error(`Receipt PDF API error: ${pdfResponse.status}`);
      }

      // üîß Handle PDF blob response instead of JSON
      const pdfBlob = await pdfResponse.blob();
      console.log('‚úÖ Receipt PDF generated:', {
        size: pdfBlob.size,
        type: pdfBlob.type
      });

      // Create blob URL for the PDF
      const pdfUrl = window.URL.createObjectURL(pdfBlob);
      console.log('‚úÖ Receipt PDF URL created:', pdfUrl);
      return pdfUrl;

    } catch (error) {
      console.error('‚ùå Error in receipt generation:', error);
      if (error.name === 'AbortError') {
        console.error('‚ùå Receipt API timeout');
      }

      // Generate fallback receipt number with sequential numbering attempt
      const hasVatItems = this.checkHasVatItems();
      const branchCode = window.BRANCH_CODE || '680731';

      let receiptNumber;
      try {
        // ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏°‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£ fallback
        const response = await fetch('/api/generate-document-number', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
          },
          body: JSON.stringify({
            hasVatItems,
            branchCode
          })
        });

        if (response.ok) {
          const result = await response.json();
          receiptNumber = result.documentNumber;
        } else {
          throw new Error('API fallback failed');
        }
      } catch (apiError) {
        console.error('‚ùå API fallback failed, using timestamp fallback:', apiError);
        // Final fallback: ‡πÉ‡∏ä‡πâ timestamp
        const timestamp = String(Date.now()).slice(-3);
        receiptNumber = hasVatItems
          ? `TX-${branchCode}-${timestamp}`
          : `RE-${branchCode}-${timestamp}`;
      }

      console.log('üìÑ Fallback receipt number generated:', receiptNumber);

      console.log('üìÑ Using fallback receipt generation...');
      // Fallback ‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡∏ï‡πâ‡∏≠‡∏á‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API
      try {
        const fallbackData = {
          receiptNumber: receiptNumber,
          documentType: 'RECEIPT',
          receiptType: 'down_payment_receipt',
          customer: {
            name: '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤',
            address: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
          },
        company: {
            name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
            address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
            taxId: '0945566000616',
            phone: '09-2427-0769'
        },
        branch: {
          name: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà',
            code: '00000'
          },
          downPaymentAmount: 0,
          issueDate: new Date().toISOString(),
          notes: `‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ [${receiptNumber}] - Fallback`
        };

        const pdfResponse = await fetch('/api/pdf/installment/receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
          body: JSON.stringify({ stepData: window.globalInstallmentManager.getAllStepData() })
        });

        if (pdfResponse.ok) {
          const pdfBlob = await pdfResponse.blob();
          const pdfUrl = window.URL.createObjectURL(pdfBlob);
          return pdfUrl;
        }
      } catch (fallbackError) {
        console.error('‚ùå Fallback receipt generation also failed:', fallbackError);
      }

      // Final fallback - return placeholder
      return `/uploads/temp/receipt_placeholder_${receiptNumber}.pdf`;
    }
  }

  async generateTaxInvoiceDocument(documentData) {
    console.log('üìÑ Generating tax invoice PDF with MANDATORY database persistence');
    console.log('üîß Tax Invoice Generation - Start Time:', new Date().toISOString());
    console.log('üìã Tax Invoice Input Data Overview:', {
      hasDocumentData: !!documentData,
      documentDataKeys: documentData ? Object.keys(documentData) : null,
      customerDataExists: !!(documentData?.customerData),
      itemsDataExists: !!(documentData?.itemsData),
      paymentDataExists: !!(documentData?.paymentData)
    });

    try {
      // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ‡∏Å‡πà‡∏≠‡∏ô
      console.log('üîç Step 1: MANDATORY VAT verification for Tax Invoice...');
      const hasVatItems = this.checkHasVatItems();
      console.log('ÔøΩ MANDATORY VAT items check for Tax Invoice:', {
        hasVatItems,
        shouldGenerateTaxInvoice: hasVatItems,
        checkMethod: 'checkHasVatItems()',
        timestamp: new Date().toLocaleTimeString()
      });

      if (!hasVatItems) {
        console.log('‚ö†Ô∏è INFO: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ VAT ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
        // ‡πÑ‡∏°‡πà throw error - ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ VAT
      }
      console.log('‚úÖ Step 1 Complete: VAT verification passed');

      // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Tax Invoice
      console.log('üîç Step 2: MANDATORY Customer data validation for Tax Invoice...');
      console.log('üìã MANDATORY Customer data validation for Tax Invoice:', {
        hasCustomerData: !!documentData?.customerData,
        customerName: documentData?.customerData ?
          `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim() :
          'NO_CUSTOMER_DATA',
        customerTaxId: documentData?.customerData?.tax_id || 'NO_TAX_ID',
        customerPhone: documentData?.customerData?.phone_number || 'NO_PHONE',
        customerAddress: documentData?.customerData?.address || 'NO_ADDRESS',
        hasItemsData: !!(documentData?.itemsData && documentData.itemsData.length > 0),
        itemsCount: documentData?.itemsData?.length || 0,
        hasPaymentData: !!documentData?.paymentData,
        downPayment: documentData?.paymentData?.downPayment || 0
      });

      // üö® ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö
      if (!documentData?.customerData ||
          (!documentData.customerData.first_name && !documentData.customerData.last_name)) {
        throw new Error('‚ùå MANDATORY ERROR: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ');
      }

      if (!documentData?.itemsData || documentData.itemsData.length === 0) {
        throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ');
      }

      if (!documentData?.paymentData || !documentData.paymentData.downPayment) {
        throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÑ‡∏î‡πâ');
      }

      console.log('‚úÖ MANDATORY validation passed for Tax Invoice - proceeding with database save');
      console.log('üíæ MANDATORY: Saving tax invoice data to database FIRST...');

      // Debug: Check available signatures
      console.log('üîç Step 4: Checking available signatures...');
      const customerSignature = window.globalInstallmentManager?.getCustomerSignature() || '';
      const salespersonSignature = window.globalInstallmentManager?.getSalespersonSignature() || '';
      const authorizedSignature = window.globalInstallmentManager?.getAuthorizedSignature() || '';
      console.log('üñãÔ∏è Signature debug for Tax Invoice:', {
        customer: customerSignature ? `${customerSignature.substring(0, 50)}...` : 'EMPTY',
        salesperson: salespersonSignature ? `${salespersonSignature.substring(0, 50)}...` : 'EMPTY',
        authorized: authorizedSignature ? `${authorizedSignature.substring(0, 50)}...` : 'EMPTY'
      });

      // Generate tax invoice number with sequential numbering
      console.log('üîç Step 5: Generating tax invoice number with sequential numbering...');

      // ‡∏î‡∏∂‡∏á‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å globalInstallmentManager
      const branchCode = window.BRANCH_CODE || '680731';

      let taxInvoiceNumber;
      let documentNumberToMatch = null;

      try {
        // üéØ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
        const quotationNumber = this.contractData?.quotationNumber ||
                               sessionStorage.getItem('currentQuotationNumber') ||
                               sessionStorage.getItem('actualQuotationNumber');

        if (quotationNumber) {
          // ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÄ‡∏ä‡πà‡∏ô QT-680731-001 -> 001
          const quotationMatch = quotationNumber.match(/-(\d{3})$/);
          if (quotationMatch) {
            documentNumberToMatch = quotationMatch[1]; // ‡πÄ‡∏ä‡πà‡∏ô "001"
            console.log('üìã Found quotation suffix to match for Tax Invoice:', {
              quotationNumber,
              suffixToMatch: documentNumberToMatch
            });
          }
        }

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ - ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà TX-YYMMDD-XXXXX (‡∏û.‡∏®.)
        if (documentNumberToMatch) {
          // ‡∏™‡∏£‡πâ‡∏≤‡∏á datePrefix ‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏û.‡∏®.)
          const now = new Date();
          const yearBE = now.getFullYear() + 543; // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏µ ‡∏û.‡∏®.
          const yearShort = yearBE.toString().slice(-2); // ‡πÄ‡∏≠‡∏≤‡πÅ‡∏Ñ‡πà 2 ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ (68)
          const month = String(now.getMonth() + 1).padStart(2, '0'); // ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô 2 ‡∏´‡∏•‡∏±‡∏Å (08)
          const day = String(now.getDate()).padStart(2, '0'); // ‡∏ß‡∏±‡∏ô 2 ‡∏´‡∏•‡∏±‡∏Å (16)
          const datePrefix = `${yearShort}${month}${day}`; // 680816

          // ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
          taxInvoiceNumber = `TX-${datePrefix}-${documentNumberToMatch}`;

          console.log('‚úÖ Tax Invoice number matched with quotation (current date format):', {
            taxInvoiceNumber,
            matchedSuffix: documentNumberToMatch,
            quotationNumber,
            dateFormat: `${datePrefix} (${day}/${month}/${yearBE} ‡∏û.‡∏®.)`
          });
        } else {
          // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏•‡∏Ç‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤ ‡πÉ‡∏ä‡πâ API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
          const response = await fetch('/api/generate-document-number', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
            },
            body: JSON.stringify({
              hasVatItems: true, // Tax Invoice ‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏™‡∏°‡∏≠
              branchCode
            })
          });

          if (response.ok) {
            const result = await response.json();
            taxInvoiceNumber = result.documentNumber;
            console.log('‚úÖ New sequential tax invoice number generated via API:', {
              taxInvoiceNumber,
              isSequential: true,
              metadata: result.metadata
            });
          } else {
            throw new Error('API call failed');
          }
        }
      } catch (error) {
        console.error('‚ùå Error generating tax invoice number, using fallback:', error);
        // Fallback: ‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡πÄ‡∏î‡∏¥‡∏°
        const currentDate = new Date();
        const year = currentDate.getFullYear() + 543; // ‡∏õ‡∏µ ‡∏û.‡∏®.
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const day = String(currentDate.getDate()).padStart(2, '0');
        const timestamp = String(Date.now()).slice(-3);

        taxInvoiceNumber = `TX-${branchCode}-${timestamp}`;
      }

      console.log('üìÑ Tax Invoice Number Generated:', {
        taxInvoiceNumber,
        numberFormat: 'TX-BRANCH-SEQ (Sequential)',
        branchCode,
        isSequential: taxInvoiceNumber.includes('-001') || taxInvoiceNumber.includes('-002') || taxInvoiceNumber.includes('-003'),
        timestamp: new Date().toISOString()
      });

      // üîß ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á - ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏ó‡∏ô‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      console.log('üîç Step 6: Calculating VAT amounts for DOWN PAYMENT ONLY...');
      const step1Data = window.globalInstallmentManager?.getStepData(1);
      const step3Data = window.globalInstallmentManager?.getStepData(3);

      // üéØ ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏ó‡∏ô‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      const downPayment = parseFloat(documentData.paymentData?.downPayment || 0);
      const docFee = parseFloat(step3Data?.doc_fee || 0);

      console.log('ÔøΩ DOWN PAYMENT CALCULATION (Tax Invoice):', {
        downPayment,
        docFee,
        note: '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏° ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
      });

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
      const baseAmount = downPayment + docFee; // ‡∏¢‡∏≠‡∏î‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ
      let vatAmount = 0;
      let totalWithTax = 0;

      // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ï‡∏≤‡∏° taxType
      console.log('üîç Step 7: Calculating VAT based on DOWN PAYMENT...');
      console.log(`üìä Tax type from step3: ${step3Data?.taxType}`);
      console.log(`üìä Base amount (down payment + doc fee): ‡∏ø${baseAmount}`);

      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏™‡∏°‡∏≠ (Tax Inclusive)
      if (true) { // step3Data?.taxType === 'inclusive'
        // ‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤
        console.log('üìä TAX INVOICE: Forced Inclusive VAT calculation');
        totalWithTax = baseAmount;
        vatAmount = Math.round((baseAmount - (baseAmount / 1.07)) * 100) / 100;
        console.log(`ÔøΩ Total with tax: ‡∏ø${totalWithTax}`);
        console.log(`üìä VAT amount (extracted from down payment): ‡∏ø${vatAmount}`);
      }
      /* *** TAX INVOICE ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö Inclusive ‡πÄ‡∏™‡∏°‡∏≠ - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ else cases ***
      } else if (step3Data?.taxType === 'exclusive' || step3Data?.taxType === 'vat') {
        // ‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏¢‡∏Å‡∏ô‡∏≠‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤ - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tax Invoice
      } else {
        // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ - ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tax Invoice
      } */
      console.log('üí∞ Tax Invoice calculation summary (DOWN PAYMENT):', {
        downPayment,
        docFee,
        baseAmount,
        vatAmount,
        totalWithTax,
        taxType: step3Data?.taxType,
        calculationMethod: step3Data?.taxType === 'inclusive' ? 'VAT included in down payment' : 'VAT added to down payment',
        note: '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'
      });

      console.log('ÔøΩ Step 8: Building tax invoice data object...');

      const taxInvoiceData = {
        taxInvoiceNumber: taxInvoiceNumber,
        documentType: 'TAX_INVOICE',
        receiptType: 'down_payment_tax_invoice',
        saleType: 'installment', // ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô
        documentNumber: taxInvoiceNumber, // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Receipt_installment
        invoiceNumber: taxInvoiceNumber,  // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Receipt_installment
        contractNo: this.contractData?.data?.contract_number || this.contractData?.quotationNumber || sessionStorage.getItem('currentQuotationNumber'),
        contractId: this.contractData?.data?._id || this.contractData?._id,
        downPaymentAmount: documentData.paymentData?.downPayment || 0,
        customerName: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
        customer: {
          name: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
          fullName: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
          prefix: documentData.customerData.prefix || '',
          first_name: documentData.customerData.first_name || '',
          last_name: documentData.customerData.last_name || '',
          taxId: documentData.customerData.tax_id || '',
          tax_id: documentData.customerData.tax_id || '',
          phone: documentData.customerData.phone_number || '',
          phone_number: documentData.customerData.phone_number || '',
          email: documentData.customerData.email || '',
          address: this.formatAddress(documentData.customerData.address) || documentData.customerData.address || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
          age: documentData.customerData.age || ''
        },
        // üîß FIX: ‡∏õ‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ (‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå)
        items: [
          {
            product: 'down_payment',
            name: `‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå (${documentData.itemsData?.[0]?.name || '‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤'} ${documentData.itemsData?.[0]?.imei ? '(IMEI: ' + documentData.itemsData[0].imei + ')' : ''})`,
            description: `*‡∏î‡∏≤‡∏ß‡∏ô‡πå ‡∏£‡∏ß‡∏° ‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ ${docFee} ‡∏ö‡∏≤‡∏ó`,
            quantity: 1,
            unitPrice: downPayment,
            totalPrice: downPayment,
            amount: downPayment,
            taxRate: step3Data?.taxType ? 7 : 0,
            taxType: step3Data?.taxType === 'inclusive' ? '‡∏†‡∏≤‡∏©‡∏µ‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î‡∏î‡∏≤‡∏ß‡∏ô‡πå' :
                     step3Data?.taxType === 'exclusive' ? '‡πÅ‡∏¢‡∏Å‡∏†‡∏≤‡∏©‡∏µ' : '‡πÑ‡∏°‡πà‡∏°‡∏µ VAT'
          }
        ],
        // üîß FIX: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç summary ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå
        summary: {
          subtotal: downPayment, // ‡πÉ‡∏ä‡πâ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏ó‡∏ô‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          docFee: docFee,
          beforeTax: downPayment + docFee, // ‡∏¢‡∏≠‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏†‡∏≤‡∏©‡∏µ = ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
          vatAmount: vatAmount,
          vat_amount: vatAmount,
          tax: vatAmount,
          totalWithTax: totalWithTax,
          netTotal: totalWithTax,
          total: totalWithTax,
          discount: 0,
          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÅ‡∏¢‡∏Å‡πÅ‡∏¢‡∏∞
          calculation_method: 'down_payment_only',
          note: '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°'
        },
        // üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
        calculation: {
          subtotal: downPayment,
          documentFee: docFee,
          beforeTax: baseAmount,
          vatRate: step3Data?.taxType ? 7 : 0,
          vatAmount: vatAmount,
          totalAmount: totalWithTax,
          taxType: step3Data?.taxType || 'none'
        },
        company: documentData.companyData || {
          name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
          address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
          taxId: '0945566000616',
          phone: '09-2427-0769'
        },
        branch: {
          name: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà',
          code: '00000',
          address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000'
        },
        signatures: {
          customer: window.globalInstallmentManager?.getCustomerSignature() || '',
          salesperson: window.globalInstallmentManager?.getSalespersonSignature() || '',
          authorized: window.globalInstallmentManager?.getAuthorizedSignature() || ''
        },
        // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Receipt_installment
        customerSignature: window.globalInstallmentManager?.getCustomerSignature() || '',
        customerSignatureUrl: window.globalInstallmentManager?.getCustomerSignature() || '',
        salespersonSignatureUrl: window.globalInstallmentManager?.getSalespersonSignature() || '',
        authorizedSignatureUrl: window.globalInstallmentManager?.getAuthorizedSignature() || '',
        employeeSignature: window.globalInstallmentManager?.getSalespersonSignature() || '',
        salespersonSignature: window.globalInstallmentManager?.getSalespersonSignature() || '',
        authorizedSignature: window.globalInstallmentManager?.getAuthorizedSignature() || '',
        // üîß FIX: ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment method ‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        paymentMethod: this.getPaymentMethodForDocument(documentData.paymentData?.paymentMethod),
        paymentDate: new Date(),
        issueDate: new Date().toISOString(),
        notes: `‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ - ‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏Å‡∏≤‡∏£‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ [${taxInvoiceNumber}] - ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${this.contractData?.data?.contract_number || 'N/A'}`,
        branchCode: documentData.branchData?.code || window.BRANCH_CODE || '00000',
        // üîß FIX: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
        employeeName: await this.getLoggedInEmployeeName(),
        staffName: await this.getLoggedInEmployeeName(),
        salesman: await this.getLoggedInEmployeeName(),
        salesperson: {
          name: await this.getLoggedInEmployeeName(),
          signature: window.globalInstallmentManager?.getSalespersonSignature() || ''
        },
        // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö‡∏£‡∏ß‡∏°‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏™‡∏°‡∏≠
        vatInclusive: true,
        vatRate: step3Data?.taxType ? 7 : 0
      };

      console.log('üìã Tax Invoice data prepared:', JSON.stringify(taxInvoiceData, null, 2));

      // üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
      console.log('üîç Tax Invoice Backend Data Debug:', {
        employeeName: taxInvoiceData.employeeName,
        staffName: taxInvoiceData.staffName,
        salesman: taxInvoiceData.salesman,
        salesperson: taxInvoiceData.salesperson,
        paymentMethod: taxInvoiceData.paymentMethod,
        originalPaymentMethod: documentData.paymentData?.paymentMethod,
        step3PaymentMethod: step3Data?.paymentMethod,
        step3CreditTerm: step3Data?.creditTerm
      });

      // üîç Debug: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      console.log('üîç Tax Invoice Customer Debug:', {
        customerData: documentData.customerData,
        formattedCustomer: taxInvoiceData.customer,
        itemsData: documentData.itemsData,
        formattedItems: taxInvoiceData.items,
        calculationData: taxInvoiceData.calculation
      });

      // üîß ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Tax Invoice ‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á - ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏ä‡πâ TAX_INVOICE TABLE ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
      console.log('üíæ MANDATORY: Saving tax invoice data to database (TAX_INVOICE TABLE ONLY)...');

      // Retry mechanism for better resilience
      let saveResponse;
      let retryCount = 0;
      const maxRetries = 2;

      while (retryCount <= maxRetries) {
        try {
          // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - ‡πÉ‡∏ä‡πâ /api/tax-invoice ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
          const saveController = new AbortController();
          const saveTimeoutId = setTimeout(() => {
            console.warn(`‚ö†Ô∏è Tax Invoice save request timeout - aborting after 30 seconds (attempt ${retryCount + 1}/${maxRetries + 1})`);
            saveController.abort();
          }, 30000); // 30 seconds timeout - increased from 15

          if (retryCount > 0) {
            console.log(`üîÑ Retry attempt ${retryCount}/${maxRetries} for Tax Invoice save...`);
            await new Promise(resolve => setTimeout(resolve, 1000 * retryCount)); // Progressive delay
          }

          console.log('üì° MANDATORY: Sending POST request to /api/tax-invoice (NO FALLBACK)...');
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö token ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á request
          const token = localStorage.getItem('authToken');
          if (!token) {
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Authentication Token ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
          }

          saveResponse = await fetch('/api/tax-invoice', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${token}`
            },
            body: JSON.stringify(taxInvoiceData),
            signal: saveController.signal
          });

          clearTimeout(saveTimeoutId);
          break; // Success - exit retry loop
        } catch (retryError) {
          if (retryError.name === 'AbortError' && retryCount < maxRetries) {
            retryCount++;
            console.warn(`‚ö†Ô∏è Request timeout on attempt ${retryCount}, retrying...`);
            continue;
          }
          throw retryError; // Max retries reached or other error
        }
      }

      try {

        console.log('üì• Tax Invoice API Response:', {
          status: saveResponse.status,
          statusText: saveResponse.statusText,
          ok: saveResponse.ok
        });

        // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö response ‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡∏ï‡πà‡∏≠ - ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
        if (saveResponse.ok) {
          const savedTaxInvoice = await saveResponse.json();
          console.log('‚úÖ MANDATORY: Tax Invoice saved to TAX_INVOICE table successfully:', savedTaxInvoice);

          // ‚úÖ VERIFY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ ID ‡∏à‡∏£‡∏¥‡∏á‡πÜ
          const savedTaxInvoiceId = savedTaxInvoice.data?._id || savedTaxInvoice._id || savedTaxInvoice.id;
          if (!savedTaxInvoiceId) {
            throw new Error('‚ùå MANDATORY ERROR: No tax invoice ID returned from database');
          }

          console.log('üÜî MANDATORY: Tax Invoice ID confirmed:', savedTaxInvoiceId);

          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó ID ‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          if (this.contractData) {
            this.contractData.taxInvoiceNumber = taxInvoiceNumber;
            this.contractData.taxInvoiceRef = taxInvoiceNumber;
            this.contractData.data = this.contractData.data || {};
            this.contractData.data.tax_invoice_no = taxInvoiceNumber;
            this.contractData.data.tax_invoice_id = savedTaxInvoiceId;
          }

          sessionStorage.setItem('currentTaxInvoiceNumber', taxInvoiceNumber);
          sessionStorage.setItem('savedTaxInvoiceId', savedTaxInvoiceId);

          console.log('‚úÖ MANDATORY: Tax Invoice database integration successful:', {
            number: taxInvoiceNumber,
            databaseId: savedTaxInvoiceId,
            table: 'TAX_INVOICE'
          });
        } else {
          // üö® MANDATORY ERROR: API call failed - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
          const errorData = await saveResponse.text();
          console.error('‚ùå MANDATORY ERROR: Tax Invoice save failed:', {
            status: saveResponse.status,
            statusText: saveResponse.statusText,
            response: errorData
          });

          throw new Error(`‚ùå MANDATORY ERROR: Tax Invoice database save failed: ${saveResponse.status} ${saveResponse.statusText} - ${errorData}`);
        }
      } catch (error) {
        console.error('‚ùå MANDATORY ERROR: Tax Invoice database save error:', error);

        // üö® MANDATORY: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏≤‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        if (error.name === 'AbortError') {
          console.error('‚ùå MANDATORY ERROR: Tax Invoice API timeout - Database save failed after 30 seconds');
          throw new Error('‚ùå MANDATORY ERROR: ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ (30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ) ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
        }

        // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
        throw error;
      }
      console.log('ÔøΩ MANDATORY: Database saved successfully, proceeding to PDF generation...');

      // üîß ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á updated API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tax Invoice
      const allStepData = window.globalInstallmentManager.getAllStepData();

      // Prepare complete data for Tax Invoice PDF generation
      const pdfRequestData = {
        // Document information
        documentNumber: taxInvoiceNumber,
        documentType: 'TAX_INVOICE',
        invoiceType: 'FULL_TAX',
        taxInvoiceNumber: taxInvoiceNumber,

        // Customer information
        customer: taxInvoiceData.customer,

        // Items
        items: taxInvoiceData.items,

        // Financial details
        downPaymentAmount: taxInvoiceData.downPaymentAmount,
        paymentMethod: taxInvoiceData.paymentMethod,

        // Summary with VAT
        summary: taxInvoiceData.summary,
        calculation: taxInvoiceData.calculation,

        // Company and branch
        company: taxInvoiceData.company,
        branch: taxInvoiceData.branch,
        branchCode: taxInvoiceData.branchCode,

        // Staff
        employeeName: taxInvoiceData.employeeName,
        salesperson: taxInvoiceData.salesperson,

        // Signatures
        customerSignatureUrl: taxInvoiceData.signatures?.customer || '',
        salespersonSignatureUrl: taxInvoiceData.signatures?.salesperson || '',
        authorizedSignatureUrl: taxInvoiceData.signatures?.authorized || '',

        // Dates
        saleDate: taxInvoiceData.issueDate,
        issueDate: taxInvoiceData.issueDate,

        // Additional info
        contractNo: taxInvoiceData.contractNo,
        notes: taxInvoiceData.notes,

        // Step data for fallback
        stepData: allStepData
      };

      const pdfResponse = await fetch('/api/pdf/installment/tax-invoice', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify(pdfRequestData)
      });

      if (!pdfResponse.ok) {
        throw new Error(`Tax Invoice PDF API error: ${pdfResponse.status}`);
      }

      // üîß Handle PDF blob response instead of JSON
      const pdfBlob = await pdfResponse.blob();
      console.log('‚úÖ Tax Invoice PDF generated:', {
        size: pdfBlob.size,
        type: pdfBlob.type
      });

      // Create blob URL for the PDF
      const pdfUrl = window.URL.createObjectURL(pdfBlob);
      console.log('‚úÖ Tax Invoice PDF URL created:', pdfUrl);
      return pdfUrl;
    } catch (error) {
      console.error('‚ùå Error in tax invoice generation:', error);

      // üö® MANDATORY: ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô MANDATORY ERROR
      if (error.message.includes('MANDATORY ERROR')) {
        console.error('üö® MANDATORY ERROR detected - stopping all operations');
        throw error; // ‡∏™‡πà‡∏á error ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÉ‡∏´‡πâ caller ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£
      }

      if (error.name === 'AbortError') {
        console.error('‚ùå Tax Invoice API timeout');
        throw new Error('‚ùå ‡∏£‡∏∞‡∏ö‡∏ö‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà');
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö error ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà MANDATORY
      console.error('‚ùå Non-mandatory error in tax invoice generation:', error);
      throw new Error(`‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    }
  }

  async generateDeliveryDocument(documentData) {
    console.log('üìÑ Generating delivery note PDF');
    console.log('üîß Delivery Note Generation - Start Time:', new Date().toISOString());

    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      if (!documentData?.customerData) {
        throw new Error('‚ùå ERROR: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏î‡πâ');
      }

      if (!documentData?.itemsData || documentData.itemsData.length === 0) {
        throw new Error('‚ùå ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏î‡πâ');
      }

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á
      const deliveryData = {
        customer: {
          name: `${documentData.customerData.prefix || ''} ${documentData.customerData.first_name || ''} ${documentData.customerData.last_name || ''}`.trim(),
          address: documentData.customerData.address || '',
          phone: documentData.customerData.phone_number || '',
          taxId: documentData.customerData.tax_id || ''
        },
        items: documentData.itemsData.map(item => ({
          id: item.id,
          name: item.name,
          brand: item.brand,
          imei: item.imei,
          quantity: item.quantity || 1,
          description: item.description
        })),
        deliveryInfo: {
          address: documentData.customerData.address || '',
          deliveryDate: new Date().toISOString(),
          specialInstructions: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á'
        },
        employee: {
          name: await this.getLoggedInEmployeeName(),
          signature: window.globalInstallmentManager?.getSalespersonSignature() || ''
        }
      };

      console.log('üìã Delivery Note data prepared:', JSON.stringify(deliveryData, null, 2));

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á
      const response = await fetch('/api/delivery-notes', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        },
        body: JSON.stringify(deliveryData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`HTTP ${response.status}: ${errorText}`);
      }

      const result = await response.json();

      if (result.success && result.data?._id) {
        const deliveryNoteUrl = `/api/delivery-notes/${result.data._id}/print`;
        console.log('‚úÖ Delivery Note created successfully:', deliveryNoteUrl);
        return deliveryNoteUrl;
      } else {
        throw new Error(result.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á');
      }

    } catch (error) {
      console.error('‚ùå Delivery Note generation failed:', error);
      throw new Error(`‚ùå ‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ${error.message}`);
    }
  }

  // ========== TAX INVOICE FALLBACK STORAGE ==========

  handleTaxInvoiceFallbackStorage(taxInvoiceNumber) {
    console.log('üîÑ Using fallback storage for Tax Invoice...');

    if (this.contractData) {
      this.contractData.taxInvoiceNumber = taxInvoiceNumber;
      this.contractData.taxInvoiceRef = taxInvoiceNumber;
      this.contractData.data = this.contractData.data || {};
      this.contractData.data.tax_invoice_no = taxInvoiceNumber;
    }

    sessionStorage.setItem('currentTaxInvoiceNumber', taxInvoiceNumber);
    sessionStorage.setItem('savedTaxInvoiceId', 'local_' + Date.now());

    console.log('üìã Tax Invoice fallback storage completed:', {
      number: taxInvoiceNumber,
      localId: sessionStorage.getItem('savedTaxInvoiceId')
    });
  }

  // ========== AUTOMATIC EMAIL SENDING ==========

  async sendEmailInBackground() {
    // Background email processing - ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ user ‡∏£‡∏≠
    console.log('üìß Starting background email process...');

    try {
      // ‡πÉ‡∏ä‡πâ sendEmailAutomatically ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà block UI
      await this.sendEmailAutomatically();
      console.log('üìß Background email completed successfully');
      return { success: true };
    } catch (error) {
      console.error('üìß Background email failed:', error);
      return { success: false, error: error.message };
    }
  }

  async sendEmailAutomatically() {
    try {
      const step2Data = window.globalInstallmentManager.getStepData(2);
      const customerEmail = step2Data?.customer?.email;

      if (!customerEmail || !this.isValidEmail(customerEmail)) {
        console.log('üìß No valid email provided, skipping automatic email');
        return;
      }

      console.log('üìß Sending automatic email to:', customerEmail);

      // Pre-check: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (!this.documentUrls.quotation && !this.documentUrls.invoice) {
        console.log('‚ö†Ô∏è No documents available for email, skipping');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á documents array ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö enhanced API ‡∏ï‡∏≤‡∏° VAT status
      const documentsToSend = [];
      const hasVatItems = this.checkHasVatItems();

      if (this.documentUrls.quotation) documentsToSend.push('quotation');
      if (this.documentUrls.invoice) documentsToSend.push('invoice');

      // üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏™‡∏°‡∏≠ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏î)
      if (this.documentUrls.receipt) {
        documentsToSend.push('receipt');
        console.log('üìß Including Receipt');
      }
      if (this.documentUrls.taxInvoice) {
        documentsToSend.push('taxInvoice');
        console.log('üìß Including Tax Invoice');
      }

      console.log('üìß Available document URLs:', this.documentUrls);
      console.log('üìß Documents to send via email:', documentsToSend);
      console.log('üìß VAT status:', { hasVatItems, documentTypes: documentsToSend });

      if (documentsToSend.length === 0) {
        console.warn('‚ö†Ô∏è No documents available for email');
        this.showToast('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á‡∏ó‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•', 'warning');
        return;
      }

      const emailData = {
        recipient: customerEmail,
        customerInfo: {
          name: `${step2Data.customer.firstName || ''} ${step2Data.customer.lastName || ''}`.trim() || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'
        },
        documents: documentsToSend,
        installmentData: {
          contractNo: this.contractData?.data?.contract_number || this.contractData?.data?.contractNo || 'N/A',
          quotationId: sessionStorage.getItem('savedQuotationId'),
          invoiceId: sessionStorage.getItem('savedInvoiceId'),
          receiptVoucherId: sessionStorage.getItem('savedReceiptId'),
          orderId: this.contractData?.data?._id || this.contractData?._id,
          customerInfo: step2Data.customer,
          totalAmount: this.contractData?.data?.totalAmount || 0,
          downPayment: this.contractData?.data?.downPayment || 0
        },
        pdfEndpoints: {
          quotation: this.documentUrls.quotation,
          invoice: this.documentUrls.invoice,
          receipt: this.documentUrls.receipt,
          taxInvoice: this.documentUrls.taxInvoice
        },
        branchCode: window.BRANCH_CODE || '00000',
        customMessage: `‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${this.contractData?.data?.contract_number || this.contractData?.data?.contractNo || 'N/A'}\n‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${new Date().toLocaleDateString('th-TH')}`
      };

      console.log('üìß Enhanced email data:', emailData);

      // ‡∏™‡πà‡∏á email ‡∏ú‡πà‡∏≤‡∏ô Enhanced API ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ timeout (‡πÉ‡∏´‡πâ‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ timeout ‡πÄ‡∏≠‡∏á)
      console.log('üìß Starting email request to enhanced API...');
      console.log('üìß Email will include:', {
        documents: emailData.documents,
        pdfEndpoints: emailData.pdfEndpoints,
        recipient: emailData.recipient
      });

      const emailStartTime = Date.now();
      console.log(`‚è∞ Email process started at: ${new Date(emailStartTime).toLocaleTimeString()}`);

      // ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ AbortController ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á timeout issues
      const response = await fetch('/api/enhanced-email/send-installment-enhanced', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || 'no-token'}`
        },
        body: JSON.stringify(emailData)
        // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á signal parameter
      });
      const emailDuration = Date.now() - emailStartTime;
      const emailEndTime = Date.now();
      console.log(`üìß Email request completed in ${emailDuration}ms`);
      console.log(`‚è∞ Email process ended at: ${new Date(emailEndTime).toLocaleTimeString()}`);
      console.log(`üéØ Email processing details: ${(emailDuration/1000).toFixed(1)}s total (PDF generation + database + email sending)`);

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json();
        } catch (e) {
          errorData = await response.text();
        }
        console.error('‚ùå Enhanced email API error details:', errorData);

        let errorMessage;
        if (typeof errorData === 'object' && errorData !== null) {
          errorMessage = errorData.message || errorData.error || JSON.stringify(errorData);
        } else {
          errorMessage = errorData || `HTTP ${response.status}: ${response.statusText}`;
        }

        throw new Error(errorMessage);
      }

      const result = await response.json();
      console.log('‚úÖ Email sent successfully:', result);

      // ‡πÅ‡∏™‡∏î‡∏á notification
      this.showToast('‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á Email ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');

    } catch (error) {
      console.error('‚ùå Error sending automatic email:', error);

      let errorMessage = error.message;
      let errorType = 'warning';

      if (error.name === 'AbortError') {
        errorMessage = '‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å - Enhanced Email Service ‡∏≠‡∏≤‡∏à‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ';
        errorType = 'info'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô info ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà error ‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á
        console.log('‚è∞ Email process was aborted. This usually happens when the Enhanced Email Service takes too long to process PDFs or send emails.');
      } else if (error.name === 'TypeError' && error.message.includes('fetch')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Email Server ‡πÑ‡∏î‡πâ';
        errorType = 'error';
      } else if (error.message.includes('404')) {
        errorMessage = '‡πÑ‡∏°‡πà‡∏û‡∏ö Email API endpoint';
        errorType = 'error';
      } else if (error.message.includes('500')) {
        errorMessage = 'Email Server ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏†‡∏≤‡∏¢‡πÉ‡∏ô';
      }

      console.log('üìß Email error details:', {
        errorName: error.name,
        errorMessage: error.message,
        stack: error.stack?.split('\n')[0]
      });

      // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ email error ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
      this.showToast('‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + errorMessage, errorType);
      console.log('üìß Email failure will not stop the contract creation process.');
    }
  }

  checkTaxInvoiceAvailability(step1Data) {
    // üîß Enhanced VAT Detection: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á taxType ‡πÅ‡∏•‡∏∞ has_vat (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô checkHasVatItems)
    const hasVatItemsByTaxType = step1Data.cartItems && step1Data.cartItems.some(item =>
      item.taxType && item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ VAT' && item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ'
    );

    const hasVatItemsByFlag = step1Data.cartItems && step1Data.cartItems.some(item =>
      item.has_vat === true || (item.vat_rate && item.vat_rate > 0)
    );

    // ‡πÉ‡∏ä‡πâ OR logic: ‡∏°‡∏µ VAT ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏û‡∏ö‡∏à‡∏≤‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏î‡∏ß‡∏¥‡∏ò‡∏µ‡∏´‡∏ô‡∏∂‡πà‡∏á
    const hasVatItems = hasVatItemsByTaxType || hasVatItemsByFlag;

    // üîç DEBUG: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö VAT items ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    console.log('üîç Enhanced Tax Invoice Availability Check:', {
      hasCartItems: !!(step1Data.cartItems),
      cartItemsCount: step1Data.cartItems?.length || 0,
      cartItems: step1Data.cartItems?.map(item => ({
        name: item.name,
        taxType: item.taxType,
        has_vat: item.has_vat,
        vat_rate: item.vat_rate,
        hasVATByTaxType: item.taxType && item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ VAT' && item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ',
        hasVATByFlag: item.has_vat === true || (item.vat_rate && item.vat_rate > 0)
      })),
      hasVatItemsByTaxType,
      hasVatItemsByFlag,
      hasVatItems,
      shouldShowTaxInvoice: hasVatItems,
      detectionMethod: hasVatItemsByTaxType ? 'taxType' : hasVatItemsByFlag ? 'has_vat/vat_rate' : 'none'
    });

    // ‡πÅ‡∏™‡∏î‡∏á Tax Invoice Row ‡πÄ‡∏™‡∏°‡∏≠ (‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏°‡∏µ VAT ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà)
    const taxInvoiceRow = document.getElementById('taxInvoiceRow');
    if (taxInvoiceRow) {
      taxInvoiceRow.style.display = 'flex';
      console.log('‚úÖ Tax invoice row shown (always visible)');
    }

    // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Tax Invoice Download Button
    const taxInvoiceBtn = document.getElementById('btnDownloadTaxInvoice');
    if (taxInvoiceBtn) {
      if (hasVatItems) {
        taxInvoiceBtn.style.display = 'block';
        console.log('‚úÖ Tax invoice download button enabled - VAT items found');
      } else {
        taxInvoiceBtn.style.display = 'none';
        console.log('‚ùå Tax invoice download button hidden - No VAT items');
      }
    }

    // ‡πÅ‡∏™‡∏î‡∏á/‡∏ã‡πà‡∏≠‡∏ô Print Tax Invoice Button
    const printTaxBtn = document.getElementById('btnPrintDownPaymentTaxInvoice');
    if (printTaxBtn) {
      if (hasVatItems) {
        printTaxBtn.style.display = 'block';
        console.log('‚úÖ Print tax invoice button enabled - VAT items found');
      } else {
        printTaxBtn.style.display = 'none';
        console.log('‚ùå Print tax invoice button hidden - No VAT items');
      }
    }
  }

  // ========== EVENT LISTENERS ==========

  setupEventListeners() {
    // Create Contract button
    const createContractBtn = document.getElementById('btnCreateContract');
    if (createContractBtn) {
      createContractBtn.addEventListener('click', () => this.createContract());
    }

    // Document download buttons
    document.getElementById('btnDownloadQuotation')?.addEventListener('click', () => this.downloadDocument('quotation'));
    document.getElementById('btnDownloadInvoice')?.addEventListener('click', () => this.downloadDocument('invoice'));

    // üÜï ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏ß‡∏° ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ (‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥)
    // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏¢‡∏Å‡πÅ‡∏ó‡∏ô

    // üÜï ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
    document.getElementById('btnDownloadReceiptOnly')?.addEventListener('click', () => this.downloadReceiptOnly());
    document.getElementById('btnDownloadTaxInvoiceOnly')?.addEventListener('click', () => this.downloadTaxInvoiceOnly());

    // Down payment receipt printing buttons
    document.getElementById('btnPrintDownPaymentReceipt')?.addEventListener('click', () => this.printDownPaymentReceipt());
    document.getElementById('btnPrintDownPaymentTaxInvoice')?.addEventListener('click', () => this.printDownPaymentTaxInvoice());

    // Email sending
    document.getElementById('btnSendEmail')?.addEventListener('click', () => this.sendDocumentsEmail());

    // Navigation buttons
    document.getElementById('btnStartOver')?.addEventListener('click', () => this.startOver());
    document.getElementById('btnGoToHistory')?.addEventListener('click', () => this.goToHistory());

    // Success modal buttons
    document.getElementById('btnPrintDocuments')?.addEventListener('click', () => this.printDocuments());
    document.getElementById('btnNewContract')?.addEventListener('click', () => this.startOver());
    document.getElementById('btnCloseSuccessModal')?.addEventListener('click', () => this.closeSuccessModal());
  }

  // ========== HELPER METHODS ==========

  getCurrentProcessingStep() {
    // Find which step is currently in 'processing' state
    const steps = ['step-stock', 'step-validate', 'step-contract', 'step-documents', 'step-email'];
    for (let step of steps) {
      const element = document.querySelector(`[data-step="${step}"]`);
      if (element && element.classList.contains('processing')) {
        return step;
      }
    }
    return 'unknown';
  }

  // ========== CONTRACT CREATION ==========

  async createContract() {
    if (this.isProcessing) return;

    this.isProcessing = true;

    // ‚è∞ Maximum timeout protection ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö entire process (6 minutes ‡∏£‡∏ß‡∏° email)
    const processStartTime = Date.now();
    console.log(`‚è∞ Process started at: ${new Date(processStartTime).toLocaleTimeString()} - Max timeout: 6 minutes`);

    const maxTimeoutId = setTimeout(() => {
      const elapsed = (Date.now() - processStartTime) / 1000;
      console.error(`‚ùå Maximum timeout reached after ${elapsed.toFixed(1)}s - forcing process completion`);
      this.isProcessing = false;
      this.hideLoadingOverlay();
      this.showToast('‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á', 'error');
    }, 360000); // 6 minutes (3 minutes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö contract + 3 minutes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö email)

    this.showLoadingOverlay('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞...', 0);

    try {
      // üîç CRITICAL: Validate globalInstallmentManager exists before proceeding
      if (!window.globalInstallmentManager) {
        throw new Error('‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà');
      }

      console.log('‚úÖ Global Installment Manager is available');
      // Step 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏∏‡∏Å‡∏≠‡∏¢‡πà‡∏≤‡∏á)
      this.updateProcessStep('step-stock', 'processing');
      this.setLoadingProgress(5, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...');
      console.log('üì¶ Checking stock availability BEFORE creating contract...');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡πÉ‡∏î‡πÜ
      let stockCheckResult;
      try {
        stockCheckResult = await this.checkStockAvailability();
        console.log('‚úÖ Stock check completed:', stockCheckResult);
      } catch (stockError) {
        console.error('‚ùå Stock check failed with error:', stockError);
        this.updateProcessStep('step-stock', 'error');
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏î‡πâ: ${stockError.message}`);
      }

      if (!stockCheckResult || !stockCheckResult.success) {
        this.updateProcessStep('step-stock', 'error');
        const errorMsg = stockCheckResult?.message || '‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠';
        throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: ${errorMsg}`);
      }

      this.updateProcessStep('step-stock', 'completed');
      this.setLoadingProgress(10, '‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß');

      // Step 2: Validate data (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß)
      this.updateProcessStep('step-validate', 'processing');
      this.setLoadingProgress(15, '‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
      await this.sleep(500);

      // Validate each step with detailed error reporting
      const validationResults = [];
      for (let step = 1; step <= 3; step++) {
        try {
          const isValid = window.globalInstallmentManager.validateStep(step);
          validationResults.push({ step, valid: isValid });

          if (!isValid) {
            const errors = window.globalInstallmentManager.getValidationErrors ?
              window.globalInstallmentManager.getValidationErrors(step) : ['‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô'];
            console.error(`‚ùå Step ${step} validation failed:`, errors);
            throw new Error(`‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${step} ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô: ${errors.join(', ')}`);
          }
        } catch (validationError) {
          console.error(`‚ùå Error validating step ${step}:`, validationError);
          throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà ${step} ‡πÑ‡∏î‡πâ: ${validationError.message}`);
        }
      }

      console.log('‚úÖ All validation checks passed:', validationResults);

      this.updateProcessStep('step-validate', 'completed');
      this.setLoadingProgress(20, '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');

      // Step 3: Create contract via API
      this.updateProcessStep('step-contract', 'processing');
      this.setLoadingProgress(30, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤...');

      console.log('üì§ Calling submitInstallment API...');
      let contractResult;

      try {
        contractResult = await window.globalInstallmentManager.submitInstallment();
        console.log('‚úÖ submitInstallment completed successfully');
      } catch (submitError) {
        console.error('‚ùå submitInstallment failed:', submitError);

        // Enhanced error handling for API submission
        let errorMessage = '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ';

        if (submitError.message) {
          if (submitError.message.includes('‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ú‡πà‡∏≤‡∏ô')) {
            errorMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ' + submitError.message;
          } else if (submitError.message.includes('‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤')) {
            errorMessage = submitError.message;
          } else if (submitError.statusCode && submitError.statusCode >= 400) {
            errorMessage = `‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (${submitError.statusCode}): ${submitError.message}`;
          } else {
            errorMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ' + submitError.message;
          }
        }

        throw new Error(errorMessage);
      }

      console.log('üîç Raw API response from submitInstallment:', {
        contractResult: contractResult,
        type: typeof contractResult,
        keys: contractResult ? Object.keys(contractResult) : 'null/undefined',
        hasData: !!(contractResult && contractResult.data),
        hasSuccess: !!(contractResult && contractResult.success)
      });

      // üîç Validate contractResult structure
      if (!contractResult) {
        throw new Error('‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå');
      }

      if (contractResult.success === false) {
        const errorMsg = contractResult.message || contractResult.error || '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏';
        throw new Error(`‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏õ‡∏è‡∏¥‡πÄ‡∏™‡∏ò‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${errorMsg}`);
      }

      // üö® CRITICAL FIX: ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      if (contractResult) {
        console.log('üîß FIXING CONTRACT DATA IMMEDIATELY after creation...');
        console.log('üìã Full contractResult structure:', JSON.stringify(contractResult, null, 2));

        try {
          // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì
          const step1Data = window.globalInstallmentManager.getStepData(1) || {};
          const step3Data = window.globalInstallmentManager.getStepData(3) || {};

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
          const cartItems = step1Data.cartItems || [];
          const itemsTotal = cartItems.reduce((sum, item) => sum + (item.totalPrice || 0), 0);
          const docFee = step3Data.docFee || 500;
          const totalAmount = itemsTotal + docFee;

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠
          const downPayment = step3Data.down_payment || 0;
          const remainingAmount = totalAmount - downPayment;

          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          const installmentPeriod = step3Data.installment_count || 12;
          const installmentAmount = step3Data.installment_amount || 0;
          const startDate = new Date();

          const nextPaymentDate = new Date(startDate);
          nextPaymentDate.setMonth(nextPaymentDate.getMonth() + 1);

          const dueDate = new Date(startDate);
          dueDate.setMonth(dueDate.getMonth() + installmentPeriod);

          // ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ contract ID ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
          let contractId = null;

          // Method 1: contractResult.installmentOrder._id
          if (contractResult.installmentOrder && contractResult.installmentOrder._id) {
            contractId = contractResult.installmentOrder._id;
            console.log('‚úÖ Found contract ID via installmentOrder._id:', contractId);
          }
          // Method 2: contractResult.installmentOrder.id
          else if (contractResult.installmentOrder && contractResult.installmentOrder.id) {
            contractId = contractResult.installmentOrder.id;
            console.log('‚úÖ Found contract ID via installmentOrder.id:', contractId);
          }
          // Method 3: contractResult._id
          else if (contractResult._id) {
            contractId = contractResult._id;
            console.log('‚úÖ Found contract ID via contractResult._id:', contractId);
          }
          // Method 4: contractResult.id
          else if (contractResult.id) {
            contractId = contractResult.id;
            console.log('‚úÖ Found contract ID via contractResult.id:', contractId);
          }
          // Method 5: contractResult.contractNumber (use as fallback)
          else if (contractResult.contractNumber) {
            console.log('‚ö†Ô∏è No direct ID found, trying to use contractNumber as reference:', contractResult.contractNumber);
            // Try to find by contract number - this might work with some APIs
            contractId = contractResult.contractNumber;
          }

          console.log('üîç Contract ID Detection Summary:', {
            found: !!contractId,
            contractId: contractId,
            installmentOrderKeys: contractResult.installmentOrder ? Object.keys(contractResult.installmentOrder) : 'not found',
            contractResultKeys: Object.keys(contractResult)
          });

          if (contractId) {
            console.log('üîß FIXING CONTRACT DATA with calculated values:', {
              contractId: contractId,
              totalAmount: totalAmount,
              dueDate: dueDate.toISOString(),
              monthlyPayment: installmentAmount,
              installmentPeriod: installmentPeriod,
              status: 'active'
            });

            // Try multiple API endpoints (‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç endpoint ‡πÅ‡∏£‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á)
            const updateEndpoints = [
              `/api/installment-orders/${contractId}`,  // ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏õ‡πá‡∏ô installment-orders (‡∏°‡∏µ s)
              `/api/installment/${contractId}`,
              `/api/loan/contracts/${contractId}`,
              `/api/contracts/${contractId}/update`
            ];

            let updateSuccess = false;

            for (let i = 0; i < updateEndpoints.length && !updateSuccess; i++) {
              const endpoint = updateEndpoints[i];
              console.log(`üîÑ Trying endpoint ${i + 1}/${updateEndpoints.length}: ${endpoint}`);

              try {
                const updateResponse = await fetch(endpoint, {
                  method: 'PATCH',
                  headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${localStorage.getItem('authToken')}`
                  },
                  body: JSON.stringify({
                    totalAmount: totalAmount,
                    dueDate: dueDate.toISOString(),
                    monthlyPayment: installmentAmount,
                    installmentPeriod: installmentPeriod,
                    status: 'active'
                  })
                });

                if (updateResponse.ok) {
                  const updateResult = await updateResponse.json();
                  console.log(`‚úÖ CONTRACT DATA FIXED successfully via endpoint ${i + 1}:`, updateResult);
                  updateSuccess = true;
                  break;
                } else {
                  console.warn(`‚ö†Ô∏è Endpoint ${i + 1} failed:`, updateResponse.status, updateResponse.statusText);
                  if (i === updateEndpoints.length - 1) {
                    const errorText = await updateResponse.text();
                    console.error(`‚ùå All endpoints failed. Last error:`, updateResponse.status, updateResponse.statusText, errorText);
                  }
                }
              } catch (fetchError) {
                console.warn(`‚ö†Ô∏è Endpoint ${i + 1} network error:`, fetchError.message);
                if (i === updateEndpoints.length - 1) {
                  console.error(`‚ùå All endpoints failed with network errors. Last error:`, fetchError);
                }
              }
            }

            if (!updateSuccess) {
              console.error('‚ùå Failed to update contract data via any endpoint');
              console.log('üìã Available endpoints tried:', updateEndpoints);
            }
          } else {
            console.error('‚ùå No contract ID found for fixing data in any expected location');
            console.log('üìã Available data for debugging:', {
              contractResult: contractResult,
              installmentOrder: contractResult.installmentOrder
            });
          }

        } catch (fixError) {
          console.error('‚ùå Error fixing contract data:', fixError);
        }
      }

      // üîß FIX ROOT CAUSE: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏•‡∏á‡πÉ‡∏ô‡∏™‡∏±‡∏ç‡∏ç‡∏≤
      if (contractResult && contractResult.data) {
        const step1Data = window.globalInstallmentManager.getStepData(1);
        const step3Data = window.globalInstallmentManager.getStepData(3);
        const contractData = contractResult.data;

        // üîß ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalAmount ‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å API ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡πá‡∏ô 0)
        const downPayment = parseFloat(step3Data?.down_payment || 0);
        const installmentPeriod = parseInt(step3Data?.installment_count || 0);
        const installmentAmount = parseFloat(step3Data?.installment_amount || 0);

        // üîß FIXED: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì totalAmount ‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ + ‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°
        let totalAmount = 0;
        if (step1Data && step1Data.cartItems && step1Data.cartItems.length > 0) {
          // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          const itemsTotal = step1Data.cartItems.reduce((sum, item) => {
            return sum + (parseFloat(item.price || item.salePrice || 0) * parseInt(item.quantity || 1));
          }, 0);

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ò‡∏£‡∏£‡∏°‡πÄ‡∏ô‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
          const docFee = parseFloat(step3Data?.doc_fee || 500);
          totalAmount = itemsTotal + docFee;

          console.log('üîß Total Amount Calculation:', {
            itemsTotal: itemsTotal,
            docFee: docFee,
            calculatedTotal: totalAmount,
            step1Items: step1Data.cartItems.length
          });
        } else {
          // Fallback: ‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏à‡∏≤‡∏Å down + ‡∏¢‡∏≠‡∏î‡∏ú‡πà‡∏≠‡∏ô
          totalAmount = downPayment + (installmentAmount * installmentPeriod);
          console.log('‚ö†Ô∏è Using fallback calculation for totalAmount:', totalAmount);
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡πà‡∏≤‡∏¢ (totalAmount - downPayment)
        const remainingAmount = Math.max(0, totalAmount - downPayment);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ä‡∏≥‡∏£‡∏∞‡∏á‡∏ß‡∏î‡∏ñ‡∏±‡∏î‡πÑ‡∏õ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
        const startDate = new Date();
        const nextPaymentDate = new Date(startDate);
        nextPaymentDate.setMonth(nextPaymentDate.getMonth() + 1);

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏≥‡∏£‡∏∞ (‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏à‡∏≤‡∏Å‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)
        const dueDate = new Date(startDate);
        dueDate.setMonth(dueDate.getMonth() + 1);

        console.log('üîß FIXING CONTRACT DATA - Adding missing critical fields:', {
          originalTotalAmount: contractData.totalAmount,
          calculatedTotalAmount: totalAmount,
          downPayment: downPayment,
          calculatedRemainingAmount: remainingAmount,
          nextPaymentDate: nextPaymentDate.toISOString(),
          dueDate: dueDate.toISOString(),
          installmentPeriod: installmentPeriod,
          monthlyPayment: installmentAmount
        });

        // üö® CRITICAL FIX: ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
        try {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö contract ID ‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
          const contractId = contractData._id || contractData.id || contractData.contractId || contractData.installmentOrder?._id;
          console.log('üîç Contract ID Detection:', {
            contractData_id: contractData._id,
            contractData_id_type: typeof contractData._id,
            contractData_contractId: contractData.contractId,
            contractData_installmentOrder: contractData.installmentOrder?._id,
            finalContractId: contractId,
            contractDataKeys: Object.keys(contractData)
          });

          if (!contractId) {
            console.error('‚ùå No contract ID found for database update:', contractData);
            throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö Contract ID ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
          }

          const updateResponse = await fetch(`/api/installment-order/${contractId}`, {
            method: 'PATCH',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify({
              totalAmount: totalAmount, // ‡πÄ‡∏û‡∏¥‡πà‡∏° totalAmount ‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÉ‡∏´‡∏°‡πà
              remainingAmount: remainingAmount,
              nextPaymentDate: nextPaymentDate.toISOString(),
              dueDate: dueDate.toISOString(),
              monthlyPayment: installmentAmount,
              installmentPeriod: installmentPeriod,
              financeAmount: remainingAmount, // ‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ú‡πà‡∏≠‡∏ô
              startDate: startDate.toISOString(),
              status: 'active' // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
            })
          });

          if (updateResponse.ok) {
            const updatedContract = await updateResponse.json();
            console.log('‚úÖ CONTRACT DATA FIXED - Database updated successfully:', {
              contractId: contractData._id,
              remainingAmount: remainingAmount,
              nextPaymentDate: nextPaymentDate.toISOString(),
              dueDate: dueDate.toISOString(),
              status: 'active'
            });

            // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô contractResult
            contractResult.data = { ...contractData, ...updatedContract.data };
          } else {
            console.error('‚ùå Failed to update contract with missing fields:', updateResponse.status);
            // ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ
          }
        } catch (updateError) {
          console.error('‚ùå Error updating contract data:', updateError);
          // ‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡πÅ‡∏°‡πâ‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ
        }
      }

      // Store contract data for documents and email with safety checks
      try {
        if (contractResult && (contractResult.data || contractResult.installmentOrder)) {
          this.contractData = contractResult;
          console.log('üíæ Contract data stored successfully');
        } else {
          console.warn('‚ö†Ô∏è Contract result exists but has unexpected structure:', contractResult);
          this.contractData = contractResult; // Store anyway, but log warning
        }
      } catch (storageError) {
        console.error('‚ùå Error storing contract data:', storageError);
        this.contractData = contractResult; // Try to store anyway
      }

      this.updateProcessStep('step-contract', 'completed');
      this.setLoadingProgress(50, '‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // Step 3: Generate documents
      this.updateProcessStep('step-documents', 'processing');
      this.setLoadingProgress(60, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£...');
      await this.generateDocuments();
      this.updateProcessStep('step-documents', 'completed');
      this.setLoadingProgress(70, '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');

      // Step 4: Update stock - ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
      this.updateProcessStep('step-stock', 'processing');
      this.setLoadingProgress(80, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤...');
      console.log('üì¶ Starting stock update process...');
      await this.updateStock(); // ‚úÖ ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß
      this.updateProcessStep('step-stock', 'completed');
      this.setLoadingProgress(90, '‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢');

      // Step 5: Prepare receipt/tax invoice for email
      this.updateProcessStep('step-email', 'processing');
      this.setLoadingProgress(90, '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•...');
      console.log('üìß Preparing receipt/tax invoice for email...');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gmail
      await this.prepareReceiptForEmail();

      this.setLoadingProgress(95, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô background...');
      console.log('üìß Starting background email sending...');

      // ‡∏™‡πà‡∏á email ‡πÅ‡∏ö‡∏ö background ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ user ‡∏£‡∏≠
      this.sendEmailInBackground()
        .then(() => {
          console.log('üìß Background email sent successfully');
          this.updateProcessStep('step-email', 'completed');
          this.showToast('‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! (‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£)', 'success');
          this.updateEmailStatus('success', '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
        })
        .catch((emailError) => {
          console.error('üìß Background email failed:', emailError);
          this.updateProcessStep('step-email', 'warning');
          this.showToast('‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß (‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î)', 'warning');
          this.updateEmailStatus('failed', '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß');
        });

      // ‡πÅ‡∏™‡∏î‡∏á initial email status
      this.updateEmailStatus('sending', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô background...');

      // ‡πÑ‡∏°‡πà‡∏£‡∏≠ email ‡πÄ‡∏™‡∏£‡πá‡∏à - ‡πÉ‡∏´‡πâ contract ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô
      this.setLoadingProgress(98, '‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÉ‡∏ô background...');

      this.setLoadingProgress(100, '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!');

      await this.sleep(1000);
      this.hideLoadingOverlay();

      // Show success
      this.contractCreated = true;
      this.showSuccessModal();
      this.enableDocumentActions();

      console.log('‚úÖ Contract created successfully:', this.contractData);

    } catch (error) {
      console.error('‚ùå Error creating contract:', error);

      // üîç Enhanced error logging for debugging
      console.error('‚ùå Detailed error information:', {
        message: error.message,
        stack: error.stack,
        name: error.name,
        cause: error.cause,
        statusCode: error.statusCode,
        details: error.details,
        originalMessage: error.originalMessage,
        currentStep: this.getCurrentProcessingStep(),
        contractData: !!this.contractData,
        globalManagerAvailable: !!window.globalInstallmentManager,
        processStartTime: processStartTime,
        elapsedTime: ((Date.now() - processStartTime) / 1000).toFixed(2) + 's'
      });

      // Clear the timeout
      if (maxTimeoutId) {
        clearTimeout(maxTimeoutId);
      }

      this.hideLoadingOverlay();

      // Enhanced error categorization and user feedback
      let userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤';
      let errorStep = 'step-contract';

      if (error.message.includes('‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°')) {
        userMessage = '‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà';
        errorStep = 'step-validate';
      } else if (error.message.includes('‡∏™‡∏ï‡πä‡∏≠‡∏Å') || error.message.includes('stock')) {
        userMessage = '‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message;
        errorStep = 'step-stock';
      } else if (error.message.includes('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô')) {
        userMessage = '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤';
        errorStep = 'step-validate';
      } else if (error.message.includes('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞')) {
        userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå: ' + error.message;
        errorStep = 'step-contract';
      } else {
        userMessage = '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + error.message;
        errorStep = 'step-contract';
      }

      // Mark failed step appropriately
      this.updateProcessStep(errorStep, 'error');
      this.updateStatusMessage(userMessage, 'error');
      this.showToast(userMessage, 'error');
    } finally {
      // ‡∏•‡πâ‡∏≤‡∏á timeout protection
      if (maxTimeoutId) {
        clearTimeout(maxTimeoutId);
      }

      const totalElapsed = (Date.now() - processStartTime) / 1000;
      console.log(`‚è∞ Total process time: ${totalElapsed.toFixed(1)}s`);

      // Ensure processing state is always reset
      this.isProcessing = false;

      // Ensure loading overlay is hidden in case of any error
      try {
        this.hideLoadingOverlay();
      } catch (hideError) {
        console.warn('‚ö†Ô∏è Could not hide loading overlay:', hideError);
      }

      console.log('üèÅ Contract creation process completed (success or failure)');
    }
  }

  // ========== STOCK UPDATE METHODS ==========

  /**
   * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å (‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏û‡∏≠‡πÑ‡∏´‡∏°)
   */
  async checkStockAvailability() {
    try {
      // üîç Safety check: Ensure globalInstallmentManager exists
      if (!window.globalInstallmentManager || typeof window.globalInstallmentManager.getStepData !== 'function') {
        console.error('‚ùå globalInstallmentManager not available for stock check');
        return { success: false, message: '‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°' };
      }

      const step1Data = window.globalInstallmentManager.getStepData(1);

      if (!step1Data || !step1Data.cartItems || step1Data.cartItems.length === 0) {
        console.warn('‚ö†Ô∏è No items to check stock');
        return { success: true, message: 'No items to check' };
      }

      console.log('üì¶ Checking stock availability for:', step1Data.cartItems);

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å (checkOnly = true ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å)
      const stockCheckData = {
        branch_code: step1Data.branchCode || window.BRANCH_CODE || '00000',
        allowNegativeStock: false,
        continueOnError: false,
        checkOnly: true, // ‚ö†Ô∏è ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: ‡∏ö‡∏≠‡∏Å API ‡∏ß‡πà‡∏≤‡πÅ‡∏Ñ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
        items: step1Data.cartItems.map(item => {
          // Map productId to product_id for backend compatibility
          const productId = item.productId || item.product_id || item.product || item.id;

          if (!productId) {
            console.error('‚ùå Missing product_id for item:', item);
            console.error('Available properties:', Object.keys(item));
          }

          return {
            product_id: productId,
            quantity: parseInt(item.quantity || 1),
            imei: item.imei || ''
          };
        })
      };

      console.log('üì¶ Stock check data:', stockCheckData);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ï‡πä‡∏≠‡∏Å (‡πÉ‡∏ä‡πâ endpoint ‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏•‡πâ‡∏ß)
      const response = await fetch('/api/stock/check-after-sale', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        },
        body: JSON.stringify(stockCheckData)
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå Stock check API error:', errorText);
        return {
          success: false,
          message: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏î‡πâ'
        };
      }

      const result = await response.json();
      console.log('üì¶ Stock check result:', result);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (result.data && result.data.results) {
        const failedItems = result.data.results.filter(item => !item.success);

        if (failedItems.length > 0) {
          const errorDetails = failedItems.map(item =>
            `‚Ä¢ ${item.product_id}: ${item.error}`
          ).join('\n');

          console.error('‚ùå Stock insufficient for:', failedItems);

          return {
            success: false,
            message: `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠:\n${errorDetails}`,
            failedItems: failedItems
          };
        }
      }

      // ‡∏ñ‡πâ‡∏≤ API return success: false
      if (!result.success) {
        return {
          success: false,
          message: result.message || '‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠'
        };
      }

      return {
        success: true,
        message: '‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠',
        data: result.data
      };

    } catch (error) {
      console.error('‚ùå Error checking stock availability:', error);
      return {
        success: false,
        message: `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ï‡πä‡∏≠‡∏Å: ${error.message}`
      };
    }
  }

  async updateStock() {
    try {
      const step1Data = window.globalInstallmentManager.getStepData(1);

      if (!step1Data || !step1Data.cartItems || step1Data.cartItems.length === 0) {
        console.warn('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å - ‡∏Ç‡πâ‡∏≤‡∏°‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ');
        return { success: true, skipped: true, message: '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å' };
      }

      console.log('üì¶ Starting stock update for items:', step1Data.cartItems);

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
      const stockUpdateData = {
        branch_code: step1Data.branchCode || window.BRANCH_CODE || '00000',
        checkOnly: false, // ‚ö†Ô∏è IMPORTANT: Set to false to actually deduct stock
        allowNegativeStock: false, // ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏ï‡∏¥‡∏î‡∏•‡∏ö
        continueOnError: false, // ‡∏´‡∏¢‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        items: step1Data.cartItems.map(item => {
          // ‡πÉ‡∏ä‡πâ product_id ‡∏ó‡∏µ‡πà‡πÅ‡∏ó‡πâ‡∏à‡∏£‡∏¥‡∏á ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà BranchStock._id
          // item.productId ‡∏Ñ‡∏∑‡∏≠ Product._id ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
          // item.id ‡∏´‡∏£‡∏∑‡∏≠ item._id ‡∏Ñ‡∏∑‡∏≠ BranchStock._id (‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ)
          const productId = item.productId || item.product_id || item.product || item.id;

          if (!productId) {
            console.error('‚ùå Missing product_id for item:', item);
            console.error('Available properties:', Object.keys(item));
          }

          console.log('üì¶ Item for stock update:', {
            originalItem: item,
            extractedProductId: productId,
            quantity: item.quantity,
            imei: item.imei
          });

          return {
            product_id: productId,
            quantity: parseInt(item.quantity || 1),
            imei: item.imei || ''
          };
        })
      };

      console.log('üì¶ Stock update data:', stockUpdateData);

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å ‡∏û‡∏£‡πâ‡∏≠‡∏° timeout protection
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000); // 30 seconds timeout

      const response = await fetch('/api/stock/check-after-sale', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        },
        body: JSON.stringify(stockUpdateData),
        signal: controller.signal
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        let errorData;
        let errorMessage = `HTTP ${response.status}: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß`;

        // ‡∏≠‡πà‡∏≤‡∏ô response body ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        try {
          const responseText = await response.text();

          // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô JSON ‡∏Å‡πà‡∏≠‡∏ô
          try {
            errorData = JSON.parse(responseText);
            if (typeof errorData === 'object' && errorData !== null) {
              errorMessage = errorData.message || errorData.error || errorData.details || responseText;
            }
          } catch (parseError) {
            // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á JSON ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ text ‡∏ï‡∏£‡∏á‡πÜ
            errorData = responseText;
            errorMessage = responseText || errorMessage;
          }
        } catch (readError) {
          console.error('‚ùå Error reading response:', readError);
          // ‡πÉ‡∏ä‡πâ error message default
        }

        console.error('‚ùå Stock update error details:', errorData);
        throw new Error(errorMessage);
      }

      const result = await response.json();
      console.log('üì¶ Stock update response:', result);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (result.data && result.data.results) {
        const failedItems = result.data.results.filter(item => !item.success);

        if (failedItems.length > 0) {
          // ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à - ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
          console.error('‚ùå Stock deduction failed for items:', failedItems);

          // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠
          const errorDetails = failedItems.map(item =>
            `‚Ä¢ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.product_id} ${item.imei ? `(${item.imei})` : ''} - ${item.error}`
          ).join('\n');

          this.displayStockUpdateDetails(result.data);
          this.updateStatusMessage(
            `‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: ‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠`,
            'error'
          );

          throw new Error(`‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÑ‡∏î‡πâ:\n${errorDetails}`);
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
      if (result.success && result.data) {
        console.log('‚úÖ Stock updated successfully:', result.data);

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó UI ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å
        this.displayStockUpdateDetails(result.data);
        this.updateStatusMessage(
          `‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: ${result.data.summary.success}/${result.data.summary.total} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`,
          'success'
        );
      }

      return result;

    } catch (error) {
      console.error('‚ùå Error updating stock:', error);

      if (error.name === 'AbortError') {
        throw new Error('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ (timeout)');
      }

      throw new Error('‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ' + error.message);
    }
  }

  async generateDocuments() {
    try {
      // üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤
      if (!this.contractData) {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤');
      }

      console.log('üìã Contract data analysis:', {
        hasContractData: !!this.contractData,
        contractDataType: typeof this.contractData,
        contractDataKeys: this.contractData ? Object.keys(this.contractData) : null,
        isSuccess: this.contractData ? this.contractData.success : null,
        hasDataField: !!(this.contractData && this.contractData.data)
      });

      // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô
      let actualData = null;

      if (this.contractData.data) {
        actualData = this.contractData.data;
      } else if (this.contractData.success && (this.contractData._id || this.contractData.contractNo)) {
        actualData = this.contractData;
      } else if (this.contractData._id || this.contractData.contractNo) {
        actualData = this.contractData;
      } else {
        console.warn('‚ö†Ô∏è Unknown API response structure, using fallback');
        actualData = this.contractData;
      }

      if (!actualData) {
        throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å API response ‡πÑ‡∏î‡πâ');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á documents object ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
      if (!actualData.documents) {
        console.log('üìÑ Creating document structure...');
        actualData.documents = {
          quotation: { status: 'pending', downloadUrl: null, error: null },
          invoice: { status: 'pending', downloadUrl: null, error: null },
          receipt: { status: 'pending', downloadUrl: null, error: null },
          taxInvoice: { status: 'pending', downloadUrl: null, error: null },
          generated: new Date().toISOString(),
          hasVatItems: this.checkHasVatItems()
        };
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô contractData
      if (!this.contractData.data) {
        this.contractData.data = actualData;
      }

      console.log('üìÑ Processing documents...');

      this.documentUrls = {};
      const documents = this.contractData.data.documents;

      // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      this.updateDocumentStatus('quotationStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      this.updateDocumentStatus('invoiceStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      this.updateDocumentStatus('receiptStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      this.updateDocumentStatus('receiptVoucherStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      this.updateDocumentStatus('deliveryNoteStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      if (documents.hasVatItems) {
        this.updateDocumentStatus('taxInvoiceStatusDoc', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡∏•‡∏∞‡∏≠‡∏±‡∏ô
      await this.generateIndividualDocuments(documents);

      console.log('üìÑ Document generation completed:', this.documentUrls);

    } catch (error) {
      console.error('‚ùå Error processing documents:', error);
      this.updateAllDocumentStatus('error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      throw error;
    }
  }

  async generateIndividualDocuments(documents) {
    try {
      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      const documentData = await this.prepareDocumentData(); // üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏° await

      // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤
      try {
        await this.sleep(500);
        this.updateDocumentStatus('quotationStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');

        const quotationUrl = await this.generateQuotationDocument(documentData);
        if (quotationUrl) {
          this.documentUrls.quotation = quotationUrl;
          documents.quotation = { status: 'ready', downloadUrl: quotationUrl, error: null };
          this.updateDocumentStatus('quotationStatus', 'ready', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î');
          console.log('‚úÖ Quotation PDF service is ready:', quotationUrl);
        } else {
          documents.quotation = { status: 'error', downloadUrl: null, error: 'No URL generated' };
          this.updateDocumentStatus('quotationStatus', 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
        }
      } catch (error) {
        console.error('‚ùå Quotation generation failed:', error);
        documents.quotation = { status: 'error', downloadUrl: null, error: error.message };
        this.updateDocumentStatus('quotationStatus', 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      // 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ
      try {
        await this.sleep(500);
        this.updateDocumentStatus('invoiceStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');

        const invoiceUrl = await this.generateInvoiceDocument(documentData);
        if (invoiceUrl) {
          this.documentUrls.invoice = invoiceUrl;
          documents.invoice = { status: 'ready', downloadUrl: invoiceUrl, error: null };
          this.updateDocumentStatus('invoiceStatus', 'ready', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î');
        }
      } catch (error) {
        console.error('‚ùå Invoice generation failed:', error);
        documents.invoice = { status: 'error', downloadUrl: null, error: error.message };
        this.updateDocumentStatus('invoiceStatus', 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      // 3. üîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏™‡∏°‡∏≠ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó)
      console.log('üìÑ MANDATORY: Creating BOTH documents (Receipt + Tax Invoice) regardless of VAT status');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô (RE-xxx)
      try {
        await this.sleep(500);
        this.updateDocumentStatus('receiptStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');

        const receiptUrl = await this.generateReceiptDocument(documentData);
        if (receiptUrl) {
          this.documentUrls.receipt = receiptUrl;
          documents.receipt = { status: 'ready', downloadUrl: receiptUrl, error: null };
          this.updateDocumentStatus('receiptStatus', 'ready', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î');
        }
      } catch (error) {
        console.error('‚ùå Receipt generation failed:', error);
        documents.receipt = { status: 'error', downloadUrl: null, error: error.message };
        this.updateDocumentStatus('receiptStatus', 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ (TX-xxx)
      try {
        await this.sleep(500);
        this.updateDocumentStatus('taxInvoiceStatusDoc', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');

        const taxInvoiceUrl = await this.generateTaxInvoiceDocument(documentData);
        if (taxInvoiceUrl) {
          this.documentUrls.taxInvoice = taxInvoiceUrl;
          documents.taxInvoice = { status: 'ready', downloadUrl: taxInvoiceUrl, error: null };
          this.updateDocumentStatus('taxInvoiceStatusDoc', 'ready', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
        }
      } catch (error) {
        console.error('‚ùå Tax Invoice generation failed:', error);
        documents.taxInvoice = { status: 'error', downloadUrl: null, error: error.message };
        this.updateDocumentStatus('taxInvoiceStatusDoc', 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      // 4. ‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô (Receipt Voucher) - ‡∏ã‡πà‡∏≠‡∏ô‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á
      /* *** ‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ ***
      try {
        await this.sleep(500);
        this.updateDocumentStatus('receiptVoucherStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');

        // For now, mark as ready since it's created with receipt
        this.updateDocumentStatus('receiptVoucherStatus', 'ready', '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß');
        documents.receiptVoucher = { status: 'ready', downloadUrl: null, error: null };
      } catch (error) {
        console.error('‚ùå Receipt Voucher status update failed:', error);
        this.updateDocumentStatus('receiptVoucherStatus', 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }
      */

      // 4. ‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á (Delivery Note) - ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏•‡∏Ç‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏à‡∏≤‡∏Å 5 ‡πÄ‡∏õ‡πá‡∏ô 4
      try {
        await this.sleep(500);
        this.updateDocumentStatus('deliveryNoteStatus', 'generating', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á...');

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏à‡∏£‡∏¥‡∏á‡∏ú‡πà‡∏≤‡∏ô API
        const deliveryNoteUrl = await this.generateDeliveryDocument(documentData);
        if (deliveryNoteUrl) {
          this.documentUrls.deliveryNote = deliveryNoteUrl;
          documents.deliveryNote = { status: 'ready', downloadUrl: deliveryNoteUrl, error: null };
          this.updateDocumentStatus('deliveryNoteStatus', 'ready', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î');
        }
      } catch (error) {
        console.error('‚ùå Delivery Note generation failed:', error);
        documents.deliveryNote = { status: 'error', downloadUrl: null, error: error.message };
        this.updateDocumentStatus('deliveryNoteStatus', 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      }

      console.log('üìã Document generation completed:', documents);

      // ÔøΩ Enhanced: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Enhanced Email Service
      try {
        console.log('üìß Saving documents to database via Enhanced Email Service...');
        await this.saveDocumentsToDatabase(documents, documentData);
        console.log('‚úÖ Documents saved to database successfully');
      } catch (databaseError) {
        console.error('‚ö†Ô∏è Database save failed (non-critical):', databaseError);
        // ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ database error ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å
      }

      // ÔøΩüîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      await this.verifyDatabasePersistence();

      return documents;

    } catch (error) {
      console.error('‚ùå Error in generateIndividualDocuments:', error);

      // ‡∏Å‡∏£‡∏ì‡∏µ error ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ error
      ['quotationStatus', 'invoiceStatus', 'receiptStatus'].forEach(statusId => {
        this.updateDocumentStatus(statusId, 'error', '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
      });

      throw error;
    }
  }

  async prepareDocumentData() {
    console.log('üìã Preparing document data with MANDATORY validation...');
    const step1Data = window.globalInstallmentManager.getStepData(1);
    const step2Data = window.globalInstallmentManager.getStepData(2);
    const step3Data = window.globalInstallmentManager.getStepData(3);

    // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡πà‡∏≠‡∏ô
    if (!step1Data || !step2Data || !step3Data) {
      throw new Error('‚ùå MANDATORY ERROR: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ');
    }

    if (!step1Data.cartItems || step1Data.cartItems.length === 0) {
      throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ');
    }

    if (!step2Data.customer) {
      throw new Error('‚ùå MANDATORY ERROR: ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ - ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏î‡πâ');
    }

    // üîß FIX: ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
    const employeeName = await this.getLoggedInEmployeeName();

    // üîß FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!employeeName) {
      throw new Error('‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
    }

    console.log('üë§ Using employee name from login only:', employeeName);

    // üîç DEBUG: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• payment method ‡∏à‡∏≤‡∏Å step3
    console.log('üí≥ Step3 Payment Method Debug:', {
      paymentMethod: step3Data.paymentMethod,
      creditTerm: step3Data.creditTerm,
      fallback: step3Data.paymentMethod || step3Data.creditTerm,
      fullStep3Data: step3Data
    });

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà clean ‡πÑ‡∏°‡πà‡∏°‡∏µ circular reference
    const cleanContractData = {
      _id: this.contractData._id,
      contract_no: this.contractData.contract_no || this.contractData.contract_number,
      contract_number: this.contractData.contract_number || this.contractData.contract_no,
      orderId: this.contractData.orderId,
      installment_id: this.contractData.installment_id,
      total_amount: this.contractData.total_amount,
      down_payment: this.contractData.down_payment,
      installment_count: this.contractData.installment_count,
      installment_amount: this.contractData.installment_amount,
      created_at: this.contractData.created_at,
      status: this.contractData.status
    };

    // Clean customer data with mandatory validation
    // Debug original step2 data
    console.log('üîç Original step2 customer data:', {
      customer: step2Data?.customer,
      customerType: step2Data?.customerType,
      address: step2Data?.customer?.address,
      addressType: typeof step2Data?.customer?.address
    });

    // üö® MANDATORY: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
    const customer = step2Data.customer;
    // Check for customer name in various field formats
    const firstName = customer.first_name || customer.firstName || '';
    const lastName = customer.last_name || customer.lastName || '';
    if (!firstName && !lastName) {
      console.error('‚ùå Customer data missing name:', customer);
      throw new Error('‚ùå MANDATORY ERROR: ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏£‡∏∑‡∏≠‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
    }

    // Check for phone number in various field names
    const phoneNumber = customer.phone_number || customer.phone || '';
    if (!phoneNumber) {
      throw new Error('‚ùå MANDATORY ERROR: ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤');
    }

    const cleanCustomerData = {
      prefix: customer.prefix || '',
      first_name: customer.first_name || customer.firstName || '',
      last_name: customer.last_name || customer.lastName || '',
      phone_number: customer.phone_number || customer.phone || '',
      email: customer.email || '',
      tax_id: customer.tax_id || customer.idCard || customer.id_card || '',
      age: customer.age || '',
      address: typeof customer.address === 'string'
        ? customer.address
        : this.formatAddress(customer.address) || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà'
    };

    // Debug processed customer data
    console.log('üîç Processed customer data:', {
      prefix: cleanCustomerData.prefix,
      first_name: cleanCustomerData.first_name,
      last_name: cleanCustomerData.last_name,
      address: cleanCustomerData.address,
      addressType: typeof cleanCustomerData.address
    });

    // Clean items data with validation
    const cleanItemsData = step1Data.cartItems.map(item => {
      if (!item.name) {
        throw new Error('‚ùå MANDATORY ERROR: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠');
      }
      if (!item.price && !item.sale_price) {
        throw new Error('‚ùå MANDATORY ERROR: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤');
      }

      return {
        id: item.id || item._id,
        name: item.name,
        brand: item.brand || '',
        model: item.model || '',
        price: item.price || item.sale_price,
        quantity: item.quantity || 1,
        totalPrice: item.totalPrice || (item.price * (item.quantity || 1)),
        imei: item.imei || '',
        image: item.image || ''
      };
    });

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    const subTotal = cleanItemsData.reduce((sum, item) => sum + item.totalPrice, 0);

    return {
      contractData: cleanContractData,
      customerData: cleanCustomerData,
      itemsData: cleanItemsData,
      paymentData: {
        selectedPlan: step3Data.selectedPlan?.name,
        downPayment: step3Data.down_payment,
        docFee: step3Data.doc_fee,
        installmentPeriod: step3Data.installment_count,
        installmentAmount: step3Data.installment_amount,
        // üîç DEBUG: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö payment method ‡∏à‡∏≤‡∏Å step3
        paymentMethod: step3Data.paymentMethod || step3Data.creditTerm,
        subTotal: subTotal,
        totalAmount: step3Data.total_amount || subTotal,
        staffName: employeeName // üîß FIX: ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login
      },
      branchData: {
        code: step1Data.branchCode || window.BRANCH_CODE,
        name: step1Data.branchName || '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å'
      },
      // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
      companyData: {
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
        taxId: '0945566000616',
        phone: '09-2427-0769'
      },
      // üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
      summaryData: {
        subtotal: step3Data.down_payment || 0, // üîß FIX: ‡πÉ‡∏ä‡πâ down payment ‡πÅ‡∏ó‡∏ô subTotal ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        docFee: step3Data.doc_fee || 0,
        totalAmount: (step3Data.down_payment || 0) + (step3Data.doc_fee || 0), // üîß FIX: down payment + doc fee
        taxType: step3Data.taxType || 'none',
        vatAmount: step3Data.vatAmount || 0
      },
      timestamp: new Date().toISOString()
    };
  }

  checkHasVatItems() {
    console.log('üîç === checkHasVatItems() Enhanced Analysis ===');

    // Method 1: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å step1Data (cartItems)
    const step1Data = window.globalInstallmentManager?.getStepData(1);

    // Method 2: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å step3Data (tax settings)
    const step3Data = window.globalInstallmentManager?.getStepData(3);

    // Method 3: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≤‡∏Å calculated VAT amount
    const calculatedVAT = this.calculateVatAmount(step1Data, step3Data);

    console.log('üîç Multi-source VAT detection:', {
      hasStep1Data: !!step1Data,
      hasStep3Data: !!step3Data,
      calculatedVAT,
      step3TaxType: step3Data?.taxType,
      hasCartItems: !!(step1Data?.cartItems),
      cartItemsLength: step1Data?.cartItems?.length || 0
    });

    // Method 1: Check cartItems for VAT indicators
    let hasVatFromItems = false;
    if (step1Data?.cartItems && Array.isArray(step1Data.cartItems)) {
      // Sub-method 1a: Check by taxType
      const hasVatItemsByTaxType = step1Data.cartItems.some(item =>
        item.taxType &&
        item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ VAT' &&
        item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ' &&
        item.taxType !== 'none' &&
        item.taxType !== ''
      );

      // Sub-method 1b: Check by has_vat flag
      const hasVatItemsByFlag = step1Data.cartItems.some(item =>
        item.has_vat === true ||
        item.has_vat === 'true' ||
        (item.vat_rate && parseFloat(item.vat_rate) > 0)
      );

      hasVatFromItems = hasVatItemsByTaxType || hasVatItemsByFlag;

      // Debug individual items
      const itemAnalysis = step1Data.cartItems.map((item, index) => ({
        index: index + 1,
        name: item.name || `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ${index + 1}`,
        taxType: item.taxType,
        has_vat: item.has_vat,
        vat_rate: item.vat_rate,
        hasVatByTaxType: item.taxType && item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ VAT' && item.taxType !== '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ' && item.taxType !== 'none',
        hasVatByFlag: item.has_vat === true || item.has_vat === 'true',
        hasVatByRate: item.vat_rate && parseFloat(item.vat_rate) > 0
      }));

      console.log('üìä Items VAT Analysis:', itemAnalysis);
      console.log('ÔøΩ Items Detection Results:', {
        byTaxType: hasVatItemsByTaxType,
        byFlag: hasVatItemsByFlag,
        combinedItems: hasVatFromItems
      });
    }

    // Method 2: Check step3 tax settings
    let hasVatFromStep3 = false;
    if (step3Data?.taxType) {
      hasVatFromStep3 = step3Data.taxType === 'inclusive' ||
                        step3Data.taxType === 'exclusive' ||
                        step3Data.taxType === 'vat' ||
                        step3Data.include_vat === true ||
                        step3Data.include_vat === 'true';

      console.log('üîç Step3 Tax Settings:', {
        taxType: step3Data.taxType,
        include_vat: step3Data.include_vat,
        hasVatFromStep3
      });
    }

    // Method 3: Check calculated VAT amount
    const hasVatFromCalculation = calculatedVAT && parseFloat(calculatedVAT) > 0;

    console.log('üîç Calculation Detection:', {
      calculatedVAT,
      hasVatFromCalculation
    });

    // üéØ Final Decision: Use OR logic across all methods
    const finalHasVat = hasVatFromItems || hasVatFromStep3 || hasVatFromCalculation;

    console.log('üéØ FINAL VAT Detection Result:', {
      method1_items: hasVatFromItems,
      method2_step3: hasVatFromStep3,
      method3_calculation: hasVatFromCalculation,
      FINAL_RESULT: finalHasVat,
      detectionSource: hasVatFromItems ? 'items' : hasVatFromStep3 ? 'step3' : hasVatFromCalculation ? 'calculation' : 'none',
      timestamp: new Date().toLocaleTimeString()
    });

    // üö® Extra validation: If frontend shows VAT but we detect none, log warning
    if (!finalHasVat && calculatedVAT && parseFloat(calculatedVAT) > 0) {
      console.warn('‚ö†Ô∏è INCONSISTENCY DETECTED: Frontend calculated VAT but backend detected no VAT items');
      console.warn('‚ö†Ô∏è Forcing VAT detection to TRUE based on calculated amount');
      return true;
    }

    return finalHasVat;
  }

  updateAllDocumentStatus(status, message) {
    this.updateDocumentStatus('quotationStatus', status, message);
    this.updateDocumentStatus('invoiceStatus', status, message);
    this.updateDocumentStatus('receiptStatus', status, message);
    this.updateDocumentStatus('receiptVoucherStatus', status, message);
    this.updateDocumentStatus('deliveryNoteStatus', status, message);
    this.updateDocumentStatus('taxInvoiceStatusDoc', status, message);
  }

  async verifyDatabasePersistence() {
    console.log('üîç Verifying database persistence for all documents...');

    const verificationResults = {
      quotation: { saved: false, id: null, number: null },
      invoice: { saved: false, id: null, number: null },
      receipt: { saved: false, id: null, number: null },
      taxInvoice: { saved: false, id: null, number: null }
    };

    try {
      // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Quotation
      const quotationId = sessionStorage.getItem('savedQuotationId');
      const quotationNumber = sessionStorage.getItem('currentQuotationNumber');
      if (quotationId && quotationNumber) {
        verificationResults.quotation = { saved: true, id: quotationId, number: quotationNumber };
        console.log('‚úÖ Quotation verified in database:', verificationResults.quotation);
      } else {
        console.log('‚ùå Quotation not found in session storage');
      }

      // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Invoice
      const invoiceId = sessionStorage.getItem('savedInvoiceId');
      const invoiceNumber = sessionStorage.getItem('currentInvoiceNumber');
      if (invoiceId && invoiceNumber) {
        verificationResults.invoice = { saved: true, id: invoiceId, number: invoiceNumber };
        console.log('‚úÖ Invoice verified in database:', verificationResults.invoice);
      } else {
        console.log('‚ùå Invoice not found in session storage');
      }

      // 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Receipt
      const receiptId = sessionStorage.getItem('savedReceiptId');
      const receiptNumber = sessionStorage.getItem('currentReceiptNumber');
      if (receiptId && receiptNumber) {
        verificationResults.receipt = { saved: true, id: receiptId, number: receiptNumber };
        console.log('‚úÖ Receipt verified in database:', verificationResults.receipt);
      } else {
        console.log('‚ö†Ô∏è Receipt not found in session storage (may be normal if no VAT items)');
      }

      // 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Tax Invoice
      const taxInvoiceId = sessionStorage.getItem('savedTaxInvoiceId');
      const taxInvoiceNumber = sessionStorage.getItem('currentTaxInvoiceNumber');
      if (taxInvoiceId && taxInvoiceNumber) {
        verificationResults.taxInvoice = { saved: true, id: taxInvoiceId, number: taxInvoiceNumber };
        console.log('‚úÖ Tax Invoice verified in database:', verificationResults.taxInvoice);
      } else {
        console.log('‚ö†Ô∏è Tax Invoice not found in session storage (may be normal if no VAT items)');
      }

      // Summary
      const savedCount = Object.values(verificationResults).filter(result => result.saved).length;
      console.log(`üìä Database persistence summary: ${savedCount}/4 documents saved`);
      console.log('üìã Detailed verification results:', verificationResults);

      // Store verification results for later use
      sessionStorage.setItem('documentVerification', JSON.stringify(verificationResults));

      return verificationResults;

    } catch (error) {
      console.error('‚ùå Error during database verification:', error);
      return verificationResults;
    }
  }

  displayStockUpdateDetails(stockData) {
    const detailsContainer = document.getElementById('stockUpdateDetails');
    const listContainer = document.getElementById('stockUpdateList');

    if (!detailsContainer || !listContainer || !stockData) return;

    const { results = [], summary = {} } = stockData;
    const updatedItems = results.filter(r => r.success);
    const failures = results.filter(r => !r.success);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡πà‡∏ß‡∏ô stock update details
    detailsContainer.style.display = 'block';

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    let html = '';

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    html += `
      <div class="mb-3 p-2 bg-white dark:bg-gray-800 rounded border">
        <div class="flex justify-between text-sm">
          <span>‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: <strong>${summary.total || 0}</strong></span>
          <span class="text-green-600">‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: <strong>${summary.success || 0}</strong></span>
          ${summary.failed > 0 ? `<span class="text-red-600">‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: <strong>${summary.failed}</strong></span>` : ''}
        </div>
      </div>
    `;

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
    if (updatedItems.length > 0) {
      html += '<div class="mb-3"><h5 class="font-semibold text-green-700 dark:text-green-300 mb-2">‚úÖ ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:</h5>';
      updatedItems.forEach(item => {
        html += `
          <div class="flex justify-between items-center py-1 px-2 bg-green-50 dark:bg-green-900/20 rounded mb-1">
            <div class="flex-1">
              <span class="font-medium">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.product_id}</span>
              ${item.imei ? `<span class="text-xs text-gray-500 ml-2">(${item.imei})</span>` : ''}
            </div>
            <div class="text-xs text-green-700 dark:text-green-300">
              ${item.name ? `<span class="font-medium">${item.name}</span>` : ''}
              <span class="ml-2">‚úì ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß</span>
            </div>
          </div>
        `;
      });
      html += '</div>';
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
    if (failures.length > 0) {
      html += '<div class="mb-3"><h5 class="font-semibold text-red-700 dark:text-red-300 mb-2">‚ùå ‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:</h5>';
      failures.forEach(item => {
        html += `
          <div class="flex justify-between items-center py-1 px-2 bg-red-50 dark:bg-red-900/20 rounded mb-1">
            <div class="flex-1">
              <span class="font-medium">‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ ID: ${item.product_id}</span>
              ${item.imei ? `<span class="text-xs text-gray-500 ml-2">(${item.imei})</span>` : ''}
            </div>
            <div class="text-xs text-red-700 dark:text-red-300">
              ${item.error}
            </div>
          </div>
        `;
      });
      html += '</div>';
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    if (updatedItems.length === 0 && failures.length === 0) {
      html += '<div class="text-center text-gray-500 py-2">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏ï‡πä‡∏≠‡∏Å</div>';
    }

    listContainer.innerHTML = html;

    console.log('üì¶ Stock update details displayed in UI');
  }

  // ========== UI UPDATES ==========

  updateProcessStep(stepId, status) {
    const stepElement = document.getElementById(stepId);
    if (!stepElement) return;

    // Remove all status classes
    stepElement.classList.remove('completed', 'processing', 'error');

    // Add new status
    stepElement.classList.add(status);

    const icon = stepElement.querySelector('.progress-step-icon');
    if (icon) {
      switch (status) {
        case 'completed':
          icon.innerHTML = '‚úì';
          break;
        case 'processing':
          icon.innerHTML = '<i class="bi bi-hourglass-split"></i>';
          break;
        case 'error':
          icon.innerHTML = '‚úó';
          break;
      }
    }
  }

  updateDocumentStatus(statusId, status, text) {
    const element = document.getElementById(statusId);
    if (!element) return;

    element.className = `document-status ${status}`;

    let icon = 'bi-clock';
    let bgColor = 'bg-gray-100';
    let textColor = 'text-gray-600';

    switch (status) {
      case 'generating':
        icon = 'bi-hourglass-split';
        bgColor = 'bg-yellow-100';
        textColor = 'text-yellow-700';
        break;
      case 'ready':
        icon = 'bi-check-circle-fill';
        bgColor = 'bg-green-100';
        textColor = 'text-green-700';
        text = '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß';
        break;
      case 'error':
        icon = 'bi-x-circle';
        bgColor = 'bg-red-100';
        textColor = 'text-red-700';
        break;
      case 'pending':
        icon = 'bi-clock';
        bgColor = 'bg-gray-100';
        textColor = 'text-gray-600';
        break;
    }

    element.className = `document-status ${status} ${bgColor} ${textColor} px-3 py-1 rounded-full inline-flex items-center gap-2`;
    element.innerHTML = `<i class="bi ${icon}"></i><span>${text}</span>`;
  }

  updateStatusMessage(message, type = 'info') {
    const element = document.getElementById('statusMessage');
    if (!element) return;

    const iconMap = {
      'info': 'bi-info-circle',
      'success': 'bi-check-circle',
      'warning': 'bi-exclamation-triangle',
      'error': 'bi-x-circle'
    };

    const colorMap = {
      'info': 'bg-blue-50 dark:bg-blue-900/20 text-blue-600',
      'success': 'bg-green-50 dark:bg-green-900/20 text-green-600',
      'warning': 'bg-yellow-50 dark:bg-yellow-900/20 text-yellow-600',
      'error': 'bg-red-50 dark:bg-red-900/20 text-red-600'
    };

    element.className = `mt-4 p-3 rounded-lg text-center ${colorMap[type]}`;
    element.innerHTML = `<i class="bi ${iconMap[type]}"></i> <span class="text-sm">${message}</span>`;
  }

  enableDocumentActions() {
    // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤
    const statusElement = document.getElementById('contractCreationStatus');
    if (statusElement) {
      statusElement.style.display = 'block';
      statusElement.className = 'mt-2 p-3 rounded-lg text-center bg-green-50 dark:bg-green-900/20 text-green-600 dark:text-green-400';
      statusElement.innerHTML = '<i class="bi bi-check-circle"></i> <span class="text-sm">‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß - ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</span>';
    }

    const documentsSection = document.getElementById('documentsSection');
    if (documentsSection) {
      documentsSection.style.display = 'block';
    }

    // ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°
    const availableDocuments = Object.keys(this.documentUrls).filter(key =>
      this.documentUrls[key] && !this.documentUrls[key].includes('placeholder')
    );

    console.log('üìÑ Available documents for download:', availableDocuments);

    // Enable download buttons only for available documents
    if (this.documentUrls.quotation) {
      const btn = document.getElementById('btnDownloadQuotation');
      if (btn) {
        btn.disabled = false;
        btn.onclick = () => this.downloadDocument('quotation');
        btn.title = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î';
      }
    }

    if (this.documentUrls.invoice) {
      const btn = document.getElementById('btnDownloadInvoice');
      if (btn) {
        btn.disabled = false;
        btn.onclick = () => this.downloadDocument('invoice');
        btn.title = '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î';
      }
    }

    // ‡∏õ‡∏∏‡πà‡∏°‡∏£‡∏ß‡∏°‡∏ñ‡∏π‡∏Å‡∏•‡∏ö‡πÅ‡∏•‡πâ‡∏ß - ‡πÉ‡∏ä‡πâ‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏¢‡∏Å‡πÅ‡∏ó‡∏ô

    // Enable email button if there are any documents
    const hasDocuments = Object.keys(this.documentUrls).length > 0;
    if (hasDocuments) {
      const emailBtn = document.getElementById('btnSendEmail');
      if (emailBtn) {
        emailBtn.disabled = false;
        emailBtn.onclick = () => this.sendDocumentsEmail();
      }
    }

    // Enable down payment buttons (these use separate API calls)
    const downReceiptBtn = document.getElementById('btnPrintDownPaymentReceipt');
    if (downReceiptBtn) {
      downReceiptBtn.disabled = false;
      downReceiptBtn.style.display = 'block';
      downReceiptBtn.onclick = () => this.printDownPaymentReceipt();
    }

    const downReceiptVoucherBtn = document.getElementById('btnPrintDownPaymentReceiptVoucher');
    if (downReceiptVoucherBtn) {
      downReceiptVoucherBtn.disabled = false;
      downReceiptVoucherBtn.style.display = 'block';
      downReceiptVoucherBtn.onclick = () => this.printDownPaymentReceiptVoucher();
    }

    const downTaxBtn = document.getElementById('btnPrintDownPaymentTaxInvoice');
    if (downTaxBtn) {
      // Show tax invoice button only if there are VAT items
      const step1Data = window.globalInstallmentManager.getStepData(1);
      const hasVatItems = step1Data.cartItems && step1Data.cartItems.some(item => item.has_vat || item.vat_rate > 0);

      if (hasVatItems) {
        downTaxBtn.style.display = 'block';
        downTaxBtn.disabled = false;
        downTaxBtn.onclick = () => this.printDownPaymentTaxInvoice();
      }
    }

    // Update create button
    const createBtn = document.getElementById('btnCreateContract');
    if (createBtn) {
      createBtn.innerHTML = '<i class="bi bi-check-circle"></i><span>‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß</span>';
      createBtn.className = 'btn btn-success btn-block';
      createBtn.disabled = true;
    }

    console.log('‚úÖ Document actions enabled. Available documents:', this.documentUrls);
  }

  // ========== LOADING & MODAL MANAGEMENT ==========

  showLoadingOverlay(title, progress = 0) {
    const overlay = document.getElementById('loadingOverlay');
    const titleElement = document.getElementById('loadingTitle');
    const progressElement = document.getElementById('loadingProgress');
    const percentageElement = document.getElementById('loadingPercentage');

    if (overlay) overlay.classList.remove('hidden');
    if (titleElement) titleElement.textContent = title;
    if (progressElement) progressElement.style.width = progress + '%';
    if (percentageElement) percentageElement.textContent = progress + '%';
  }

  setLoadingProgress(progress, message = '') {
    const progressElement = document.getElementById('loadingProgress');
    const percentageElement = document.getElementById('loadingPercentage');
    const messageElement = document.getElementById('loadingMessage');

    if (progressElement) progressElement.style.width = progress + '%';
    if (percentageElement) percentageElement.textContent = progress + '%';
    if (messageElement && message) messageElement.textContent = message;
  }

  hideLoadingOverlay() {
    const overlay = document.getElementById('loadingOverlay');
    if (overlay) overlay.classList.add('hidden');
  }

  showSuccessModal() {
    const modal = document.getElementById('successModal');
    const contractNumberElement = document.getElementById('contractNumber');
    const paymentAmountElement = document.getElementById('successPaymentAmount');
    const nextInstallmentElement = document.getElementById('nextInstallmentDate');

    if (modal) modal.classList.remove('hidden');

    if (contractNumberElement && this.contractData) {
      contractNumberElement.textContent = this.contractData.contractNo || this.contractData.contract_no || 'C' + Date.now();
    }

    if (paymentAmountElement) {
      const step3Data = window.globalInstallmentManager.getStepData(3);
      const amount = (step3Data.down_payment || 0) + (step3Data.doc_fee || 0);
      paymentAmountElement.textContent = `‡∏ø${this.formatPrice(amount)}`;
    }

    if (nextInstallmentElement) {
      const step3Data = window.globalInstallmentManager.getStepData(3);
      const today = new Date();
      const nextDate = new Date(today);
      nextDate.setMonth(nextDate.getMonth() + 1);
      nextInstallmentElement.textContent = this.formatDate(nextDate);
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß (‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ)
    this.updateDocumentStatusInModal();
  }

  // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏ô Success Modal
  updateDocumentStatusInModal() {
    try {
      const contractNo = this.contractData?.contractNo || this.contractData?.contract_no;
      if (!contractNo) return;

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏à‡∏≤‡∏Å localStorage
      const documentInfo = JSON.parse(localStorage.getItem(`installment_documents_${contractNo}`) || '{}');

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß
      const documentsStatusElement = document.getElementById('documentsStatus');
      if (documentsStatusElement) {
        let statusHTML = '<div class="mt-4 p-4 bg-green-50 rounded-lg border border-green-200">';
        statusHTML += '<h4 class="text-green-800 font-semibold mb-3 flex items-center gap-2">';
        statusHTML += '<i class="bi bi-check-circle-fill text-green-600"></i>';
        statusHTML += '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß</h4>';
        statusHTML += '<div class="grid grid-cols-1 md:grid-cols-2 gap-3">';

        // ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
        if (documentInfo.receiptNumber) {
          statusHTML += '<div class="flex items-center gap-2 p-3 bg-white rounded border border-blue-200">';
          statusHTML += '<i class="bi bi-receipt text-blue-600"></i>';
          statusHTML += '<div>';
          statusHTML += '<div class="font-medium text-blue-800">‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</div>';
          statusHTML += `<div class="text-sm text-gray-600">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${documentInfo.receiptNumber}</div>`;
          statusHTML += '</div>';
          statusHTML += '</div>';
        }

        // ‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
        if (documentInfo.taxInvoiceNumber) {
          statusHTML += '<div class="flex items-center gap-2 p-3 bg-white rounded border border-green-200">';
          statusHTML += '<i class="bi bi-file-text text-green-600"></i>';
          statusHTML += '<div>';
          statusHTML += '<div class="font-medium text-green-800">‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ</div>';
          statusHTML += `<div class="text-sm text-gray-600">‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${documentInfo.taxInvoiceNumber}</div>`;
          statusHTML += '</div>';
          statusHTML += '</div>';
        }

        statusHTML += '</div>';

        // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
        const docCount = (documentInfo.receiptNumber ? 1 : 0) + (documentInfo.taxInvoiceNumber ? 1 : 0);
        if (docCount > 0) {
          statusHTML += '<div class="mt-3 text-center text-sm text-green-700">';
          statusHTML += `<i class="bi bi-info-circle"></i> ‡∏£‡∏∞‡∏ö‡∏ö‡πÑ‡∏î‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á ${docCount} ‡πÉ‡∏ö‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÅ‡∏•‡πâ‡∏ß`;
          statusHTML += '</div>';
        }

        statusHTML += '</div>';
        documentsStatusElement.innerHTML = statusHTML;
      }

      console.log('üìã Document status updated:', {
        contractNo,
        receiptNumber: documentInfo.receiptNumber,
        taxInvoiceNumber: documentInfo.taxInvoiceNumber,
        documentsCount: (documentInfo.receiptNumber ? 1 : 0) + (documentInfo.taxInvoiceNumber ? 1 : 0)
      });

    } catch (error) {
      console.error('‚ùå Error updating document status:', error);
    }
  }

  hideSuccessModal() {
    const modal = document.getElementById('successModal');
    if (modal) modal.classList.add('hidden');
  }

  showContractCreationRequired() {
    const statusElement = document.getElementById('contractCreationStatus');
    if (statusElement) {
      statusElement.style.display = 'block';
      statusElement.className = 'mt-2 p-3 rounded-lg text-center bg-yellow-50 dark:bg-yellow-900/20 text-yellow-600 dark:text-yellow-400';
      statusElement.innerHTML = '<i class="bi bi-exclamation-triangle"></i> <span class="text-sm">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£</span>';

      // ‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        if (statusElement) {
          statusElement.style.display = 'none';
        }
      }, 5000);
    }
  }

  // ========== DOCUMENT ACTIONS ==========

  downloadDocument(type) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (!this.contractCreated) {
        this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', 'warning');
        this.showContractCreationRequired();
        return;
      }

      const url = this.documentUrls[type];
      if (!url) {
        this.showToast(`‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£${this.getDocumentTypeName(type)} ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà`, 'error');
        return;
      }

      console.log(`üì• Downloading ${type} from:`, url);

      // ‡πÄ‡∏≠‡∏≤ placeholder check ‡∏≠‡∏≠‡∏Å‡πÄ‡∏û‡∏£‡∏≤‡∏∞ PDF Service ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏•‡πâ‡∏ß
      // if (url.includes('placeholder')) {
      //   this.showToast('‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏≠‡∏û‡∏±‡∏í‡∏ô‡∏≤ Service', 'warning');
      //   return;
      // }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö receipt ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô PNG ‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      if (type === 'receipt' && (url.includes('.png') || url.includes('image'))) {
        const printWindow = window.open('', '_blank');
        if (printWindow) {
          printWindow.document.write(`
            <html>
              <head>
                <title>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</title>
                <style>
                  body { 
                    margin: 0; 
                    padding: 20px; 
                    display: flex; 
                    justify-content: center; 
                    align-items: center; 
                    min-height: 100vh; 
                    background: #f5f5f5; 
                  }
                  img { 
                    max-width: 100%; 
                    height: auto; 
                    box-shadow: 0 4px 6px rgba(0,0,0,0.1);
                    background: white;
                    padding: 10px;
                  }
                  .print-button {
                    position: fixed;
                    top: 20px;
                    right: 20px;
                    padding: 10px 20px;
                    background: #007bff;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    cursor: pointer;
                  }
                  @media print {
                    .print-button { display: none; }
                    body { background: white; }
                  }
                </style>
              </head>
              <body>
                <button class="print-button" onclick="window.print()">‡∏û‡∏¥‡∏°‡∏û‡πå</button>
                <img src="${url}" alt="‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô" onload="console.log('Receipt image loaded')" onerror="console.error('Failed to load receipt image')" />
              </body>
            </html>
          `);
          printWindow.document.close();
        }
        return;
      }

      // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö PDF files
      const link = document.createElement('a');
      link.href = url;
      link.download = this.getDocumentFilename(type);
      link.target = '_blank';

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      this.showToast(`‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î${this.getDocumentTypeName(type)}‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');

    } catch (error) {
      console.error(`‚ùå Error downloading ${type}:`, error);
      this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: ' + error.message, 'error');
    }
  }

  getDocumentFilename(type) {
    const timestamp = new Date().toISOString().slice(0, 19).replace(/[-:]/g, '').replace('T', '_');
    const fileNames = {
      'quotation': `quotation_${timestamp}.pdf`,
      'invoice': `invoice_${timestamp}.pdf`,
      'receipt': `receipt_${timestamp}.png`,
      'receipt-voucher': `receipt_voucher_${timestamp}.pdf`,
      'tax-invoice': `tax_invoice_${timestamp}.pdf`,
      'taxInvoice': `tax_invoice_${timestamp}.pdf`
    };
    return fileNames[type] || `document_${timestamp}.pdf`;
  }

  getDocumentTypeName(type) {
    const typeNames = {
      'quotation': '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤',
      'invoice': '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      'receipt': '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô',
      'receipt-voucher': '‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô',
      'tax-invoice': '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ',
      'taxInvoice': '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ'
    };
    return typeNames[type] || '‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£';
  }

  // üÜï ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏´‡∏°‡πà: ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÅ‡∏ö‡∏ö‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ (Receipt/TaxInvoice)
  async downloadPaymentDocument() {
    try {
      console.log('üß† Smart Document Download: Determining document type...');

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const hasVatItems = this.checkHasVatItems();
      const documentType = hasVatItems ? 'tax-invoice' : 'receipt';
      const documentName = hasVatItems ? '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ' : '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô';

      console.log(`üìã Document type determined: ${documentType} (${documentName})`);
      console.log(`üîç Has VAT items: ${hasVatItems}`);

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ URL ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      const url = this.documentUrls[documentType] || this.documentUrls[documentType === 'tax-invoice' ? 'taxInvoice' : 'receipt'];

      if (url && !url.includes('placeholder')) {
        console.log(`‚úÖ Using cached URL: ${url}`);
        this.downloadDocument(documentType === 'tax-invoice' ? 'taxInvoice' : 'receipt');
        return;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ URL ‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      console.log('üîÑ No cached URL available, generating new document...');
      this.showToast(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á${documentName}...`, 'info');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
      const stepData = await this.prepareDocumentData(); // üîß FIX: ‡πÄ‡∏û‡∏¥‡πà‡∏° await

      if (!stepData || !stepData.customerData) {
        this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏ï‡∏¥‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô', 'error');
        return;
      }

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà - ‡πÉ‡∏ä‡πâ endpoint ‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß
      const endpoint = '/api/pdf/installment/receipt';

      const response = await fetch(endpoint, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify({ stepData: window.globalInstallmentManager.getAllStepData() })
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status} - ${response.statusText}`);
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ response ‡πÄ‡∏õ‡πá‡∏ô PDF ‡∏´‡∏£‡∏∑‡∏≠ JSON
      const contentType = response.headers.get('content-type');

      if (contentType && contentType.includes('application/pdf')) {
        // ‡πÄ‡∏õ‡πá‡∏ô PDF - ‡∏™‡∏£‡πâ‡∏≤‡∏á blob ‡πÅ‡∏•‡∏∞‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
        const blob = await response.blob();
        const downloadUrl = window.URL.createObjectURL(blob);

        const link = document.createElement('a');
        link.href = downloadUrl;
        link.download = this.getDocumentFilename(documentType);
        link.target = '_blank';

        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î URL
        window.URL.revokeObjectURL(downloadUrl);

        this.showToast(`‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î${documentName}‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');

      } else {
        // ‡πÄ‡∏õ‡πá‡∏ô JSON - ‡∏î‡∏∂‡∏á URL
        const result = await response.json();

        if (result.success && result.url) {
          const fullUrl = result.url.startsWith('http') ? result.url : `${window.location.origin}${result.url}`;

          // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å URL ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ï‡πà‡∏≠‡πÑ‡∏õ
          if (hasVatItems) {
            this.documentUrls.taxInvoice = fullUrl;
            this.documentUrls['tax-invoice'] = fullUrl;
          } else {
            this.documentUrls.receipt = fullUrl;
          }

          // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î
          const link = document.createElement('a');
          link.href = fullUrl;
          link.download = this.getDocumentFilename(documentType);
          link.target = '_blank';

          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);

          this.showToast(`‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î${documentName}‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢`, 'success');

        } else {
          throw new Error(result.message || `‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á${documentName}‡πÑ‡∏î‡πâ`);
        }
      }

    } catch (error) {
      console.error('‚ùå Error in smart document download:', error);
      this.showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î: ${error.message}`, 'error');

      // Fallback: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°
      console.log('üîÑ Attempting fallback download...');
      const hasVatItems = this.checkHasVatItems();
      const fallbackType = hasVatItems ? 'taxInvoice' : 'receipt';

      if (this.documentUrls[fallbackType]) {
        this.downloadDocument(fallbackType);
      }
    }
  }

  // üîß NEW: ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
  async downloadReceiptTaxInvoice() {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (!this.contractCreated) {
        this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', 'warning');
        this.showContractCreationRequired();
        return;
      }

      console.log('üìÑ Starting combined receipt/tax invoice generation...');
      console.log('üîß Download Receipt/Tax Invoice - Start Time:', new Date().toISOString());

      // Check VAT status first
      const hasVatItems = this.checkHasVatItems();
      console.log('üîç VAT Detection for Combined Download:', {
        hasVatItems,
        documentType: hasVatItems ? 'Tax Invoice (TX-)' : 'Receipt (RE-)',
        timestamp: new Date().toLocaleTimeString()
      });

      this.showToast(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á${hasVatItems ? '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ' : '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô'}...`, 'info');

      // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å globalInstallmentManager
      console.log('üìã Collecting step data for combined document...');
      const allStepData = window.globalInstallmentManager.getAllStepData();
      console.log('üìã All step data for receipt/tax invoice:', {
        hasStep1: !!allStepData?.step1,
        hasStep2: !!allStepData?.step2,
        hasStep3: !!allStepData?.step3,
        step1ItemsCount: allStepData?.step1?.cartItems?.length || 0,
        step2Customer: !!allStepData?.step2?.customer,
        step3TaxType: allStepData?.step3?.taxType,
        dataSize: JSON.stringify(allStepData).length
      });
      console.log('üìã Full step data:', allStepData);

      // üîß Get Tax Invoice ID for database lookup
      const savedTaxInvoiceId = sessionStorage.getItem('savedTaxInvoiceId');
      console.log('üîç Tax Invoice ID for PDF generation:', savedTaxInvoiceId);

      // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á Receipt/Tax Invoice PDF
      console.log('üì° Sending request to /api/pdf/installment/receipt...');
      const requestStartTime = Date.now();
      const response = await fetch('/api/pdf/installment/receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify({
          stepData: allStepData,
          taxInvoiceId: savedTaxInvoiceId && savedTaxInvoiceId.startsWith('688') ? savedTaxInvoiceId : null
        })
      });

      const requestDuration = Date.now() - requestStartTime;
      console.log('üì• Combined Receipt/Tax Invoice API Response:', {
        status: response.status,
        statusText: response.statusText,
        duration: `${requestDuration}ms`,
        ok: response.ok
      });

      if (!response.ok) {
        console.error('‚ùå Combined Receipt/Tax Invoice API Error:', response);
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
      console.log('üì• Processing PDF blob...');
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);

      const link = document.createElement('a');
      link.href = url;
      link.download = `receipt_tax_invoice_${new Date().toISOString().slice(0, 19).replace(/[-:]/g, '').replace('T', '_')}.pdf`;

      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      window.URL.revokeObjectURL(url);

      this.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');

      // üîß ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï documentUrls ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gmail integration
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï URLs ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà Gmail ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ (‡∏à‡∏∞‡∏ó‡∏≥‡πÉ‡∏ô prepareReceiptForEmail)
      await this.prepareReceiptForEmail();
      console.log('üìß Updated receipt URLs for both download and Gmail integration');

    } catch (error) {
      console.error('‚ùå Error creating receipt/tax invoice:', error);
      this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ: ' + error.message, 'error');
    }
  }

  // üîß NEW: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô/‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gmail (‡πÑ‡∏°‡πà‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î)
  async prepareReceiptForEmail() {
    try {
      console.log('üìß Preparing receipt/tax invoice for email sending...');

      // ‡∏î‡∏∂‡∏á IDs ‡∏à‡∏≤‡∏Å sessionStorage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á Gmail
      const quotationId = sessionStorage.getItem('savedQuotationId');
      const invoiceId = sessionStorage.getItem('savedInvoiceId');
      const contractId = this.contractData?.data?._id || this.contractData?._id;

      console.log('üìß Retrieved IDs for Gmail integration:', {
        quotationId,
        invoiceId,
        contractId
      });

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á URL ‡∏û‡∏£‡πâ‡∏≠‡∏° query parameters ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gmail integration
      let receiptUrl = '/api/pdf/installment/receipt';

      if (quotationId) {
        receiptUrl += `?quotationId=${quotationId}`;
      } else if (invoiceId) {
        receiptUrl += `?invoiceId=${invoiceId}`;
      } else if (contractId) {
        receiptUrl += `?contractId=${contractId}`;
      }

      this.documentUrls.receipt = receiptUrl;
      this.documentUrls.taxInvoice = receiptUrl;

      console.log('üìß Receipt/Tax Invoice URLs prepared for Gmail integration:', {
        receipt: this.documentUrls.receipt,
        taxInvoice: this.documentUrls.taxInvoice
      });

    } catch (error) {
      console.error('‚ùå Error preparing receipt/tax invoice for email:', error);
      // ‡πÑ‡∏°‡πà throw error ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏•‡∏±‡∏Å
    }
  }

  getDocumentTypeName(type) {
    const names = {
      'quotation': '‡πÉ‡∏ö‡πÄ‡∏™‡∏ô‡∏≠‡∏£‡∏≤‡∏Ñ‡∏≤',
      'invoice': '‡πÉ‡∏ö‡πÅ‡∏à‡πâ‡∏á‡∏´‡∏ô‡∏µ‡πâ',
      'receipt': '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô',
      'taxInvoice': '‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ'
    };
    return names[type] || type;
  }

  async sendDocumentsEmail() {
    try {
      const step2Data = window.globalInstallmentManager.getStepData(2);
      const email = step2Data?.customer?.email;

      if (!email || !this.isValidEmail(email)) {
        this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á', 'warning');
        return;
      }

      // Check if there are documents to send
      const availableDocuments = Object.keys(this.documentUrls);
      if (availableDocuments.length === 0) {
        this.showToast('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏™‡πà‡∏á', 'warning');
        return;
      }

      this.showLoadingOverlay('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á Email...', 0);
      this.setLoadingProgress(10, '‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');

      // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏° attachment URLs
      const attachmentUrls = availableDocuments.map(type => this.documentUrls[type]);

      this.setLoadingProgress(30, '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•...');

      const emailData = {
        recipient: {
          email: email,
          name: `${step2Data.customer.firstName || ''} ${step2Data.customer.lastName || ''}`.trim()
        },
        subject: `‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ - ${this.contractData.data.contract_number || this.contractData.data.contractNo}`,
        body: `
          ‡πÄ‡∏£‡∏µ‡∏¢‡∏ô ‡∏Ñ‡∏∏‡∏ì${step2Data.customer.firstName || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤'}
          
          ‡∏ó‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß
          ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${this.contractData.data.contract_number || this.contractData.data.contractNo}
          ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤: ${new Date().toLocaleDateString('th-TH')}
          
          ‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤‡∏î‡πâ‡∏ß‡∏¢:
          ${availableDocuments.map(type => `- ${this.getDocumentTypeName(type)}`).join('\n          ')}
          
          ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
          ‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô Pattani
        `,
        attachmentUrls: attachmentUrls
      };

      this.setLoadingProgress(50, `‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á ${email}...`);

      // ‡∏™‡πà‡∏á email ‡∏ú‡πà‡∏≤‡∏ô API
      const response = await fetch('/api/installment/send-email', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || 'no-token'}`
        },
        body: JSON.stringify(emailData)
      });

      this.setLoadingProgress(80, '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•...');

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || `HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();
      this.setLoadingProgress(100, '‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

      await this.sleep(500);
      this.hideLoadingOverlay();

      console.log('‚úÖ Email sent successfully:', result);
      this.showToast('‡∏™‡πà‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏ó‡∏≤‡∏á Email ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß', 'success');

      // Update email button status
      const emailBtn = document.getElementById('btnSendEmail');
      if (emailBtn) {
        emailBtn.innerHTML = '<i class="bi bi-check-circle"></i><span>‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß</span>';
        emailBtn.disabled = true;
        emailBtn.className = 'btn btn-success btn-block';
      }

    } catch (error) {
      this.hideLoadingOverlay();
      console.error('‚ùå Error sending documents email:', error);
      this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á Email: ' + error.message, 'error');
    }
  }

  // ========== DOWN PAYMENT PRINTING ==========

  async printDownPaymentReceipt() {
    try {
      if (!this.contractData) {
        this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à', 'warning');
        return;
      }

      this.showLoadingOverlay('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå)...');

      // üîß ‡πÉ‡∏ä‡πâ unified API endpoint ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å globalInstallmentManager
      const allStepData = window.globalInstallmentManager.getAllStepData();

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å PDF Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      const response = await fetch('/api/pdf/installment/receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        },
        body: JSON.stringify({ stepData: allStepData })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå PDF
      const blob = await response.blob();
      console.log('üìÑ PDF blob received:', {
        size: blob.size,
        type: blob.type
      });

      // üîß Enhanced PDF handling with multiple fallbacks
      const url = window.URL.createObjectURL(blob);

      // Try to open in new window
      const printWindow = window.open(url, '_blank', 'width=800,height=600');

      if (printWindow) {
        // If window opened successfully, wait for load and print
        printWindow.onload = () => {
          setTimeout(() => {
            try {
              printWindow.print();
            } catch (printError) {
              console.error('‚ùå Print error:', printError);
              this.showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Ctrl+P', 'warning');
            }
          }, 1000); // Wait 1 second for PDF to load
        };

        // Also add error handler
        printWindow.onerror = (error) => {
          console.error('‚ùå PDF window error:', error);
          this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á PDF', 'error');
        };
      } else {
        // Fallback: Create download link if popup blocked
        console.log('‚ö†Ô∏è Popup blocked, creating download link...');
        const link = document.createElement('a');
        link.href = url;
        link.download = `receipt_${new Date().toISOString().slice(0, 19).replace(/[-:]/g, '').replace('T', '_')}.pdf`;
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        this.showToast('‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß', 'success');
      }

      this.hideLoadingOverlay();
      this.showToast('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Enhanced Email Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå
      try {
        console.log('üîÑ Calling Enhanced Email Service for down payment receipt...');
        await this.integrateWithEnhancedEmailService();
      } catch (enhancedError) {
        console.error('‚ö†Ô∏è Enhanced Email Service error (non-critical):', enhancedError);
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ user ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô background process
      }

    } catch (error) {
      this.hideLoadingOverlay();
      console.error('Error printing down payment receipt:', error);
      this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: ' + error.message, 'error');
    }
  }

  async printDownPaymentTaxInvoice() {
    try {
      if (!this.contractData) {
        this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ', 'warning');
        return;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏°‡∏µ VAT ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó)
      const step1Data = window.globalInstallmentManager.getStepData(1);
      const hasVatItems = step1Data.cartItems.some(item => item.has_vat || item.vat_rate > 0);

      if (!hasVatItems) {
        console.log('‚ö†Ô∏è INFO: ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ VAT ‡πÅ‡∏ï‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏ï‡∏≤‡∏°‡∏ô‡πÇ‡∏¢‡∏ö‡∏≤‡∏¢‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó');
        // ‡πÑ‡∏°‡πà return - ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏ï‡πà‡∏≠‡πÑ‡∏õ
      }

      this.showLoadingOverlay('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ (‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå)...');

      // üîß ‡πÉ‡∏ä‡πâ unified API endpoint ‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å globalInstallmentManager
      const allStepData = window.globalInstallmentManager.getAllStepData();

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å PDF Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
      const response = await fetch('/api/pdf/installment/receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        },
        body: JSON.stringify({ stepData: allStepData })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå PDF
      const blob = await response.blob();
      console.log('üìÑ Tax Invoice PDF blob received:', {
        size: blob.size,
        type: blob.type
      });

      // üîß Enhanced PDF handling with multiple fallbacks
      const taxInvoiceUrl = window.URL.createObjectURL(blob);

      console.log('‚úÖ Tax Invoice URL generated:', taxInvoiceUrl);

      // Try to open in new window
      const printWindow = window.open(taxInvoiceUrl, '_blank', 'width=800,height=600');
      if (printWindow) {
        // If window opened successfully, wait for load and print
        printWindow.onload = () => {
          setTimeout(() => {
            try {
              printWindow.print();
            } catch (printError) {
              console.error('‚ùå Print error:', printError);
              this.showToast('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏ä‡πâ Ctrl+P', 'warning');
            }
          }, 1000); // Wait 1 second for PDF to load
        };

        // Also add error handler
        printWindow.onerror = (error) => {
          console.error('‚ùå PDF window error:', error);
          this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á PDF', 'error');
        };
      } else {
        // Fallback: Create download link if popup blocked
        console.log('‚ö†Ô∏è Popup blocked, creating download link...');
        const link = document.createElement('a');
        link.href = taxInvoiceUrl;
        link.download = `tax_invoice_${new Date().toISOString().slice(0, 19).replace(/[-:]/g, '').replace('T', '_')}.pdf`;
        link.style.display = 'none';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        this.showToast('‡πÑ‡∏ü‡∏•‡πå PDF ‡∏ñ‡∏π‡∏Å‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡πâ‡∏ß', 'success');
      }

      this.hideLoadingOverlay();
      this.showToast('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ (‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Enhanced Email Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå
      try {
        console.log('üîÑ Calling Enhanced Email Service for down payment tax invoice...');
        await this.integrateWithEnhancedEmailService();
      } catch (enhancedError) {
        console.error('‚ö†Ô∏è Enhanced Email Service error (non-critical):', enhancedError);
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ user ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô background process
      }

    } catch (error) {
      this.hideLoadingOverlay();
      console.error('Error printing down payment tax invoice:', error);
      this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ: ' + error.message, 'error');
    }
  }

  async printDownPaymentReceiptVoucher() {
    try {
      if (!this.contractData) {
        this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô', 'warning');
        return;
      }

      this.showLoadingOverlay('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå)...');

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå
      const receiptVoucherData = await this.prepareDownPaymentReceiptVoucherData();

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å PDF Controller ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
      const response = await fetch('/api/pdf/installment/down-payment-receipt-voucher', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken')}`
        },
        body: JSON.stringify({ receiptVoucherData })
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå PDF
      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);

      // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏û‡∏¥‡∏°‡∏û‡πå
      const printWindow = window.open(url, '_blank');
      if (printWindow) {
        printWindow.onload = () => {
          printWindow.print();
        };
      } else {
        // Fallback ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ
        window.location.href = url;
      }

      this.hideLoadingOverlay();
      this.showToast('‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô (‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå) ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Enhanced Email Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Ñ‡πà‡∏≤‡∏î‡∏≤‡∏ß‡∏ô‡πå
      try {
        console.log('üîÑ Calling Enhanced Email Service for down payment receipt voucher...');
        await this.integrateWithEnhancedEmailService();
      } catch (enhancedError) {
        console.error('‚ö†Ô∏è Enhanced Email Service error (non-critical):', enhancedError);
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á error ‡πÉ‡∏´‡πâ user ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô background process
      }

    } catch (error) {
      this.hideLoadingOverlay();
      console.error('Error printing down payment receipt voucher:', error);
      this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô: ' + error.message, 'error');
    }
  }

  async prepareDownPaymentReceiptData() {
    const step1Data = window.globalInstallmentManager.getStepData(1);
    const step2Data = window.globalInstallmentManager.getStepData(2);
    const step3Data = window.globalInstallmentManager.getStepData(3);

    return {
      type: 'down_payment_receipt',
      contractNumber: this.contractData.contract_number,
      customer: step2Data.customer,
      items: step1Data.cartItems,
      payment: {
        downPayment: step3Data.down_payment || 0,
        docFee: step3Data.doc_fee || 0,
        method: step3Data.payment_method || 'cash'
      },
      branch: {
        code: step1Data.branchCode,
        name: step1Data.branchName || '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å'
      },
      date: new Date().toISOString()
    };
  }

  async prepareDownPaymentReceiptVoucherData() {
    const step1Data = window.globalInstallmentManager.getStepData(1);
    const step2Data = window.globalInstallmentManager.getStepData(2);
    const step3Data = window.globalInstallmentManager.getStepData(3);

    return {
      type: 'down_payment_receipt_voucher',
      contractNumber: this.contractData.contract_number,
      customer: step2Data.customer,
      items: step1Data.cartItems,
      payment: {
        downPayment: step3Data.down_payment || 0,
        docFee: step3Data.doc_fee || 0,
        method: step3Data.paymentMethod || step3Data.payment_method || 'cash',
        description: `‡πÄ‡∏á‡∏¥‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${this.contractData.contract_number}`
      },
      branch: {
        code: step1Data.branchCode,
        name: step1Data.branchName || '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å'
      },
      date: new Date().toISOString(),
      voucherType: 'installment', // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏ö‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
      referenceNumber: this.contractData.contract_number
    };
  }

  async prepareDownPaymentTaxInvoiceData() {
    const step1Data = window.globalInstallmentManager.getStepData(1);
    const step2Data = window.globalInstallmentManager.getStepData(2);
    const step3Data = window.globalInstallmentManager.getStepData(3);

    // üîç Debug: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡∏à‡∏≤‡∏Å globalInstallmentManager
    console.log('üîç RAW DATA FROM GLOBAL INSTALLMENT MANAGER:');
    console.log('Step1 Data:', step1Data);
    console.log('Step2 Data:', step2Data);
    console.log('Step3 Data:', step3Data);
    console.log('Step2 Customer:', step2Data?.customer);

    // üîß FIX: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏´‡∏•‡πà‡∏á
    let customerInfo = null;

    // ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á ‡πÜ
    if (step2Data?.customer && Object.keys(step2Data.customer).length > 0) {
      customerInfo = step2Data.customer;
      console.log('‚úÖ Using customer data from step2Data.customer');
    } else if (step1Data?.customer) {
      customerInfo = step1Data.customer;
      console.log('‚úÖ Using customer data from step1Data.customer');
    } else if (step3Data?.customer) {
      customerInfo = step3Data.customer;
      console.log('‚úÖ Using customer data from step3Data.customer');
    } else {
      // Default customer data - ‡∏à‡∏∞‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å "‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ"
      customerInfo = {
        prefix: '‡∏ô‡∏≤‡∏¢',
        first_name: '‡∏≠‡∏≤‡∏£‡∏µ‡∏ü‡∏µ‡∏ô',
        last_name: '‡∏Å‡∏≤‡∏ã‡∏≠',
        tax_id: '1941001330617',
        phone_number: '06-220-70097',
        email: 'areefin@example.com',
        address: '12 ‡∏´‡∏°‡∏π‡πà 2 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏∞‡πÅ‡∏ß‡πâ‡∏á ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏¢‡∏∞‡∏£‡∏±‡∏á ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94160',
        age: '30'
      };
      console.log('‚ö†Ô∏è Using default customer data (hardcoded for testing)');
    }

    console.log('üë§ Final customer info:', customerInfo);

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
    let vatItems = [];
    if (step1Data?.cartItems) {
      vatItems = step1Data.cartItems.filter(item => {
        // ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏†‡∏≤‡∏©‡∏µ‡∏à‡∏£‡∏¥‡∏á‡πÜ ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        return item.has_vat === true || (item.vat_rate && item.vat_rate > 0);
      });
    }

    console.log('üîç VAT ITEMS FILTERED:', vatItems);

    // üîß ‡πÉ‡∏ä‡πâ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö generateTaxInvoiceDocument
    const documentData = {
      customerData: {
        // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customerInfo ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
        prefix: customerInfo.prefix || customerInfo.title || '‡∏ô‡∏≤‡∏¢',
        first_name: customerInfo.first_name || customerInfo.firstName || '‡∏≠‡∏≤‡∏£‡∏µ‡∏ü‡∏µ‡∏ô',
        last_name: customerInfo.last_name || customerInfo.lastName || '‡∏Å‡∏≤‡∏ã‡∏≠',
        tax_id: customerInfo.tax_id || customerInfo.taxId || customerInfo.citizen_id || '1941001330617',
        phone_number: customerInfo.phone_number || customerInfo.phone || customerInfo.phoneNumber || '06-220-70097',
        email: customerInfo.email || 'customer@example.com',
        address: customerInfo.address || customerInfo.fullAddress || '12 ‡∏´‡∏°‡∏π‡πà 2 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏∞‡πÅ‡∏ß‡πâ‡∏á ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏¢‡∏∞‡∏£‡∏±‡∏á ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94160',
        age: customerInfo.age || customerInfo.ageYears || '30',
        // ‡∏£‡∏ß‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏ï‡πá‡∏°
        fullName: `${customerInfo.prefix || '‡∏ô‡∏≤‡∏¢'} ${customerInfo.first_name || '‡∏≠‡∏≤‡∏£‡∏µ‡∏ü‡∏µ‡∏ô'} ${customerInfo.last_name || '‡∏Å‡∏≤‡∏ã‡∏≠'}`,
        name: `${customerInfo.prefix || '‡∏ô‡∏≤‡∏¢'} ${customerInfo.first_name || '‡∏≠‡∏≤‡∏£‡∏µ‡∏ü‡∏µ‡∏ô'} ${customerInfo.last_name || '‡∏Å‡∏≤‡∏ã‡∏≠'}`
      },
      itemsData: vatItems.map(item => ({
        id: item.id,
        name: item.name,
        brand: item.brand,
        imei: item.imei,
        quantity: item.quantity || 1,
        price: item.price || item.sale_price,
        totalPrice: item.totalPrice || (item.price || item.sale_price) * (item.quantity || 1),
        image: item.image,
        description: item.description
      })),
      paymentData: {
        downPayment: step3Data?.down_payment || step3Data?.downPayment || 0,
        docFee: step3Data?.doc_fee || step3Data?.documentFee || 0,
        paymentMethod: step3Data?.payment_method || step3Data?.paymentMethod || 'cash',
        installmentPeriod: step3Data?.installment_count || step3Data?.installmentPeriod || 0,
        installmentAmount: step3Data?.installment_amount || step3Data?.installmentAmount || 0
      },
      companyData: {
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î',
        address: '148/91 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 6 ‡∏ï‡∏≥‡∏ö‡∏•‡∏£‡∏π‡∏™‡∏∞‡∏°‡∏¥‡πÅ‡∏• ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ 94000',
        taxId: '0945566000616',
        phone: '09-2427-0769'
      },
      branchData: {
        name: step1Data?.branchName || '‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ',
        code: step1Data?.branchCode || 'PATTANI'
      }
    };

    // üîç Debug: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
    console.log('üîç FORMATTED DOCUMENT DATA (FIXED):');
    console.log('Customer Data:', documentData.customerData);
    console.log('Items Data:', documentData.itemsData);
    console.log('Payment Data:', documentData.paymentData);
    console.log('Company Data:', documentData.companyData);
    console.log('Branch Data:', documentData.branchData);

    console.log('üìã Prepared Tax Invoice Document Data (FIXED):', documentData);

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á Tax Invoice Document
    return await this.generateTaxInvoiceDocument(documentData);
  }

  async printDocuments() {
    try {
      if (!this.contractData) {
        this.showToast('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤', 'error');
        return;
      }

      this.showLoadingOverlay('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô...');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à 80mm
      const receiptData = await this.prepare80mmReceiptData();

      console.log('üìÑ Receipt data prepared:', receiptData);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏î‡πâ‡∏ß‡∏¢ PDFoooRasterController (‡πÅ‡∏ö‡∏ö base64 image)
      const response = await fetch('/api/print-raster-receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify(receiptData)
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();

      if (!result.success || !result.data || !result.data.base64) {
        throw new Error(result.error || '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ');
      }

      console.log('‚úÖ Receipt image generated successfully');

      // ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ú‡πà‡∏≤‡∏ô PrinterService (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ) ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏Å‡∏ï‡∏¥
      if (typeof window.PrinterService !== 'undefined') {
        console.log('üñ®Ô∏è Using PrinterService for printing...');

        // ‚úÖ FIX: Initialize PrinterService if not already initialized
        if (window.PrinterService && !window.PrinterService.isInitialized) {
          console.log('üîß Initializing PrinterService...');
          await window.PrinterService.init();
        }

        await this.printWithPrinterService(result.data.base64, receiptData);
      } else {
        console.log('üñ®Ô∏è Using browser print fallback...');
        await this.printWithBrowserFallback(result.data.base64);
      }

      this.hideLoadingOverlay();
      this.showToast('‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ üñ®Ô∏è', 'success');

    } catch (error) {
      this.hideLoadingOverlay();
      console.error('Error printing 80mm receipt:', error);
      this.showToast('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏¥‡∏°‡∏û‡πå: ' + error.message, 'error');
    }
  }

  async printWithPrinterService(base64Image, receiptData) {
    try {
      console.log('üñ®Ô∏è Printing via PrinterService...');

      const result = await window.PrinterService.print(base64Image, {
        documentType: 'installment_receipt',
        contractNumber: receiptData.order_number || receiptData.contract_number,
        timestamp: new Date().toISOString(),
        branchCode: window.BRANCH_CODE || '00000'
      });

      console.log('‚úÖ PrinterService result:', result);
      return result;

    } catch (error) {
      console.error('‚ùå PrinterService error:', error);
      throw error;
    }
  }

  async printWithBrowserFallback(base64Image) {
    try {
      console.log('üñ®Ô∏è Using browser print fallback...');

      // ‡πÅ‡∏õ‡∏•‡∏á base64 ‡πÄ‡∏õ‡πá‡∏ô blob ‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á URL
      const byteCharacters = atob(base64Image);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: 'image/png' });
      const url = window.URL.createObjectURL(blob);

      // ‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå
      const printWindow = window.open('', '_blank');
      if (printWindow) {
        printWindow.document.write(`
          <html>
            <head>
              <title>‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</title>
              <style>
                body { margin: 0; padding: 0; }
                img { max-width: 100%; height: auto; }
              </style>
            </head>
            <body>
              <img src="${url}" onload="window.print(); window.close();" />
            </body>
          </html>
        `);
      }

    } catch (error) {
      console.error('‚ùå Browser print fallback error:', error);
      throw error;
    }
  }

  async prepare80mmReceiptData() {
    const step1Data = window.globalInstallmentManager.getStepData(1);
    const step2Data = window.globalInstallmentManager.getStepData(2);
    const step3Data = window.globalInstallmentManager.getStepData(3);

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user ‡πÅ‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å localStorage
    const userProfile = JSON.parse(localStorage.getItem('userProfile') || '{}');
    const branchInfo = JSON.parse(localStorage.getItem('branchInfo') || '{}');
    const authToken = localStorage.getItem('authToken');

    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏à‡∏≤‡∏Å localStorage ‡∏´‡∏£‡∏∑‡∏≠ session
    const customerSignature = localStorage.getItem('customerSignature') ||
                              window.globalInstallmentManager.customerSignatureUrl || '';
    const salespersonSignature = localStorage.getItem('salespersonSignature') ||
                                userProfile.signature ||
                                window.globalInstallmentManager.salespersonSignatureUrl || '';

    // ‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö PDFoooRasterController
    const contractNumber = this.contractData.data?.contract_number || this.contractData.contract_number || this.contractData.contractNo;
    const receiptNumber = `RCP-${contractNumber || Date.now()}`;

    return {
      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å‡∏Ç‡∏≠‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      contract_number: contractNumber,
      receipt_number: receiptNumber,
      order_number: receiptNumber,
      created_at: new Date().toISOString(),

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
      customer_name: `${step2Data.customer.prefix || ''} ${step2Data.customer.firstName || step2Data.customer.first_name || ''} ${step2Data.customer.lastName || step2Data.customer.last_name || ''}`.trim(),
      customer_phone: step2Data.customer.phone || step2Data.customer.phone_number || '',
      customerName: `${step2Data.customer.prefix || ''} ${step2Data.customer.firstName || step2Data.customer.first_name || ''} ${step2Data.customer.lastName || step2Data.customer.last_name || ''}`.trim(),
      customerPhone: step2Data.customer.phone || step2Data.customer.phone_number || '',

      customerType: step2Data.customer.customer_type || 'individual',
      customer: {
        name: `${step2Data.customer.prefix || ''} ${step2Data.customer.firstName || step2Data.customer.first_name || ''} ${step2Data.customer.lastName || step2Data.customer.last_name || ''}`.trim(),
        phone: step2Data.customer.phone || step2Data.customer.phone_number || '',
        taxId: step2Data.customer.idCard || step2Data.customer.tax_id || step2Data.customer.id_card || '',
        address: step2Data.customer.address || ''
      },

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
      items: step1Data.cartItems.map(item => ({
        name: item.name || '',
        price: item.price || item.sale_price || 0,
        quantity: item.quantity || 1,
        total: (item.price || item.sale_price || 0) * (item.quantity || 1),
        imei: item.imei || ''
      })),

      // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
      subTotal: step3Data.down_payment || 0,
      sub_total: step3Data.down_payment || 0,
      totalAmount: (step3Data.down_payment || 0) + (step3Data.doc_fee || 0),
      total: (step3Data.down_payment || 0) + (step3Data.doc_fee || 0),
      total_amount: (step3Data.down_payment || 0) + (step3Data.doc_fee || 0),
      grandTotal: (step3Data.down_payment || 0) + (step3Data.doc_fee || 0),

      discount: 0,
      discount_amount: 0,
      // üîß ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
      vatAmount: this.calculateVatAmount(step1Data, step3Data),
      vat_amount: this.calculateVatAmount(step1Data, step3Data),

      // Payment info
      payment: {
        downPayment: step3Data.down_payment || 0,
        docFee: step3Data.doc_fee || 0,
        total: (step3Data.down_payment || 0) + (step3Data.doc_fee || 0),
        method: step3Data.payment_method || 'cash'
      },

      // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ - ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
      staffName: userProfile.name || userProfile.username || null,
      salesperson: userProfile.name || userProfile.username || null,
      employee_name: userProfile.name || userProfile.username || null,
      performed_by: userProfile.name || userProfile.username || null,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
      saleDate: new Date().toISOString(),
      date: new Date().toISOString(),

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤ - ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å API
      branch: {
        code: step1Data.branchCode || window.BRANCH_CODE || branchInfo.code || 'PATTANI',
        name: step1Data.branchName || branchInfo.name || '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å',
        address: branchInfo.address || '123 ‡∏ñ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏∏‡∏°‡∏ß‡∏¥‡∏ó ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡πÄ‡∏°‡∏∑‡∏≠‡∏á ‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏Ø 10100',
        taxId: branchInfo.taxId || '0945566000616',
        tel: branchInfo.phone || branchInfo.tel || '073-374777'
      },

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó
      company: {
        name: '‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó 2 ‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á ‡πÇ‡∏°‡∏ö‡∏≤‡∏¢ ‡∏à‡∏≥‡∏Å‡∏±‡∏î'
      },

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ/‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢ - ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£ login ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏°‡∏µ fallback
      user: {
        id: userProfile.id || userProfile._id,
        name: userProfile.name || userProfile.username || null,
        signature: salespersonSignature
      },

      staffName: userProfile.name || userProfile.username || null,
      performed_by: userProfile.name || userProfile.username || null,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
      customerSignatureUrl: customerSignature,
      salespersonSignatureUrl: salespersonSignature,

      invoiceType: 'BOTH_DOCUMENTS', // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏±‡πâ‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÅ‡∏•‡∏∞‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Ç‡∏≤‡∏¢‡∏™‡∏î
      saleType: 'installment', // ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡∏≤‡∏¢‡∏ú‡πà‡∏≠‡∏ô
      size: '80mm'
    };
  }

  closeSuccessModal() {
    const modal = document.getElementById('successModal');
    if (modal) {
      modal.classList.add('hidden');
    }
  }

  // ========== NAVIGATION ==========

  startOver() {
    if (confirm('‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏•‡πâ‡∏≤‡∏á')) {
      // Clear all data
      window.globalInstallmentManager.clearAllData();

      // Navigate to step 1
      window.location.href = '../step1/step1.html';
    }
  }

  goToHistory() {
    window.location.href = '/History_installment';
  }

  redirectToIncompleteStep() {
    const nextStep = window.globalInstallmentManager.getNextStep();

    let redirectUrl = '../step1/step1.html';
    let message = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô';

    if (nextStep === 2) {
      redirectUrl = '../step2/step2.html';
      message = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô';
    } else if (nextStep === 3) {
      redirectUrl = '../step3/step3.html';
      message = '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡∏Å‡πà‡∏≠‡∏ô';
    }

    this.showToast(message, 'warning');
    setTimeout(() => window.location.href = redirectUrl, 1500);
  }

  // ========== UTILITY FUNCTIONS ==========

  formatPrice(amount) {
    return new Intl.NumberFormat('th-TH', {
      minimumFractionDigits: 2,
      maximumFractionDigits: 2
    }).format(amount || 0);
  }

  formatDate(date) {
    return new Intl.DateTimeFormat('th-TH', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    }).format(date);
  }

  formatIdCard(idCard) {
    if (!idCard || idCard.length !== 13) return idCard;
    return `${idCard.substring(0, 1)}-${idCard.substring(1, 5)}-${idCard.substring(5, 10)}-${idCard.substring(10, 12)}-${idCard.substring(12)}`;
  }

  formatAddress(address) {
    if (typeof address === 'string') return address;

    const parts = [
      address.houseNo,
      address.moo ? `‡∏´‡∏°‡∏π‡πà ${address.moo}` : '',
      address.lane ? `‡∏ã‡∏≠‡∏¢ ${address.lane}` : '',
      address.road ? `‡∏ñ‡∏ô‡∏ô ${address.road}` : '',
      address.subDistrict ? `‡∏ï‡∏≥‡∏ö‡∏• ${address.subDistrict}` : '',
      address.district ? `‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ${address.district}` : '',
      address.province ? `‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${address.province}` : '',
      address.zipcode
    ].filter(part => part);

    return parts.join(' ');
  }

  getPaymentMethodText(method) {
    // üîß FIX: ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏•‡∏∞‡πÑ‡∏ó‡∏¢
    console.log('üí≥ Converting payment method:', method);

    const methods = {
      'cash': '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
      'transfer': '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
      'card': '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
      'credit': '‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï',
      // ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡∏™‡πà‡∏á‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î': '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
      '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô': '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
      '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï': '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'
    };

    const result = methods[method] || method || '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î';
    console.log('üí≥ Payment method result:', result);
    return result;
  }

  /**
   * üîß NEW: ‡πÅ‡∏õ‡∏•‡∏á payment method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£ (‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend)
   */
  getPaymentMethodForDocument(method) {
    console.log('üí≥ Converting payment method for document:', method);

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©‡πÅ‡∏•‡∏∞‡πÑ‡∏ó‡∏¢
    const transferMethods = ['transfer', '‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô', 'bank_transfer', 'online_transfer'];
    const cashMethods = ['cash', '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î'];
    const cardMethods = ['card', 'credit_card', '‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï'];

    // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÄ‡∏•‡πá‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    const methodLower = (method || '').toString().toLowerCase();

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
    if (transferMethods.some(tm => methodLower.includes(tm.toLowerCase()))) {
      console.log('üí≥ Detected as transfer method');
      return 'transfer';
    } else if (cardMethods.some(cm => methodLower.includes(cm.toLowerCase()))) {
      console.log('üí≥ Detected as card method');
      return 'card';
    } else if (cashMethods.some(cm => methodLower.includes(cm.toLowerCase()))) {
      console.log('üí≥ Detected as cash method');
      return 'cash';
    }

    // Default fallback
    console.log('üí≥ Using default cash method for:', method);
    return 'cash';
  }

  formatAddress(addressData) {
    if (!addressData || typeof addressData !== 'object') {
      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô string ‡πÉ‡∏´‡πâ return ‡∏ï‡∏£‡∏á‡πÜ
      return addressData || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
    }

    const parts = [];

    if (addressData.houseNo) parts.push(`‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ${addressData.houseNo}`);
    if (addressData.moo) parts.push(`‡∏´‡∏°‡∏π‡πà ${addressData.moo}`);
    if (addressData.lane || addressData.soi) parts.push(`‡∏ã‡∏≠‡∏¢ ${addressData.lane || addressData.soi}`);
    if (addressData.road || addressData.street) parts.push(`‡∏ñ‡∏ô‡∏ô ${addressData.road || addressData.street}`);
    if (addressData.subDistrict) parts.push(`‡∏ï‡∏≥‡∏ö‡∏• ${addressData.subDistrict}`);
    if (addressData.district) parts.push(`‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ${addressData.district}`);
    if (addressData.province) parts.push(`‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${addressData.province}`);
    if (addressData.zipcode || addressData.postalCode) parts.push(`‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå ${addressData.zipcode || addressData.postalCode}`);

    return parts.length > 0 ? parts.join(' ') : '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
  }

  getImageUrl(imagePath) {
    console.log('[Step4-Integration] getImageUrl input:', imagePath);

    if (!imagePath) {
      console.log('[Step4-Integration] No image path provided, using default');
      return '/uploads/Logo2.png';
    }

    if (imagePath.startsWith('http')) {
      console.log('[Step4-Integration] External URL, returning as-is');
      return imagePath;
    }

    let cleanedPath = imagePath.toString().trim();

    // Convert all backslashes to forward slashes first
    cleanedPath = cleanedPath.replace(/\\/g, '/');

    // Remove duplicate /uploads/products/ segments with enhanced patterns
    const patterns = [
      /\/uploads\/products\/uploads\/products\//g,
      /uploads\/products\/uploads\/products\//g,
      /\/uploads\/products\/(?:uploads\/products\/)+/g,
      /uploads\/products\/(?:uploads\/products\/)+/g
    ];

    patterns.forEach(pattern => {
      cleanedPath = cleanedPath.replace(pattern, '/uploads/products/');
    });

    // Clean up multiple slashes
    cleanedPath = cleanedPath.replace(/\/+/g, '/');

    // Ensure path starts with /
    if (!cleanedPath.startsWith('/')) {
      cleanedPath = '/' + cleanedPath;
    }

    // If it doesn't contain uploads/products/, add it
    if (!cleanedPath.includes('uploads/products/')) {
      const filename = cleanedPath.replace(/^\/+/, '');
      cleanedPath = `/uploads/products/${filename}`;
    }

    console.log('[Step4-Integration] getImageUrl output:', cleanedPath);
    return cleanedPath;
  }

  showToast(message, type = 'info') {
    if (typeof window.showToast === 'function') {
      window.showToast(message, type);
    } else {
      console.log(`[${type.toUpperCase()}] ${message}`);
    }
  }

  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  debug() {
    return {
      isInitialized: this.isInitialized,
      contractCreated: this.contractCreated,
      isProcessing: this.isProcessing,
      contractData: this.contractData,
      documentUrls: this.documentUrls,
      canNavigate: window.globalInstallmentManager ? window.globalInstallmentManager.canNavigateToStep(4) : false
    };
  }

  isValidEmail(email) {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  // ========== HELPER METHODS ==========

  async collectCompleteStepData() {
    console.log('üìã Collecting complete step data...');

    const step1Data = window.globalInstallmentManager.getStepData(1);
    const step2Data = window.globalInstallmentManager.getStepData(2);
    const step3Data = window.globalInstallmentManager.getStepData(3);

    // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å step ‡πÅ‡∏•‡∏∞ contractData
    const completeData = {
      step1: step1Data,
      step2: step2Data,
      step3: step3Data,
      contract: this.contractData,

      // ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
      customerData: step2Data?.customer || {},
      itemsData: step1Data?.cartItems || [],
      paymentData: {
        downPayment: step3Data?.down_payment || 0,
        installmentPeriod: step3Data?.installment_count || 0,
        installmentAmount: step3Data?.installment_amount || 0,
        docFee: step3Data?.doc_fee || 0,
        totalAmount: step1Data?.totalAmount || 0,
        subTotal: step1Data?.totalAmount || 0,
        beforeTaxAmount: step1Data?.totalAmount || 0,
        // üîß ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏†‡∏≤‡∏©‡∏µ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
        vatAmount: this.calculateVatAmount(step1Data, step3Data),
        selectedPlan: step3Data?.selectedPlan?.name || '‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞',
        payment_method: step3Data?.payment_method || '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',
        staffName: step1Data?.staffName || window.USER_NAME || '‡∏û‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô'
      },
      branchData: {
        code: step1Data?.branchCode || window.BRANCH_CODE || '00000',
        name: step1Data?.branchName || '‡∏™‡∏≤‡∏Ç‡∏≤‡∏´‡∏•‡∏±‡∏Å'
      },
      contractData: {
        contract_no: this.contractData?.contract_no || this.contractData?.contract_number,
        contract_number: this.contractData?.contract_number || this.contractData?.contract_no,
        quotation_no: this.contractData?.quotationNumber || this.contractData?.quotation_no
      }
    };

    console.log('‚úÖ Complete step data collected');
    return completeData;
  }

  removeCircularReferences(data) {
    console.log('üîÑ Removing circular references from data...');

    const seen = new WeakSet();

    const replacer = (key, value) => {
      if (typeof value === 'object' && value !== null) {
        if (seen.has(value)) {
          return '[Circular Reference]';
        }
        seen.add(value);
      }

      // ‡∏Å‡∏£‡∏≠‡∏á function ‡πÅ‡∏•‡∏∞ undefined values
      if (typeof value === 'function') {
        return '[Function]';
      }

      if (value === undefined) {
        return null;
      }

      return value;
    };

    try {
      const cleanData = JSON.parse(JSON.stringify(data, replacer));
      console.log('‚úÖ Circular references removed');
      return cleanData;
    } catch (error) {
      console.warn('‚ö†Ô∏è Error removing circular references:', error);
      return data; // ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
    }
  }

  formatAddress(addressData) {
    if (!addressData) return '';

    const parts = [
      addressData.houseNo,
      addressData.moo ? `‡∏´‡∏°‡∏π‡πà ${addressData.moo}` : '',
      addressData.soi ? `‡∏ã‡∏≠‡∏¢ ${addressData.soi}` : '',
      addressData.road ? `‡∏ñ‡∏ô‡∏ô ${addressData.road}` : '',
      addressData.subDistrict ? `‡∏ï‡∏≥‡∏ö‡∏• ${addressData.subDistrict}` : '',
      addressData.district ? `‡∏≠‡∏≥‡πÄ‡∏†‡∏≠ ${addressData.district}` : '',
      addressData.province ? `‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î ${addressData.province}` : '',
      addressData.zipcode
    ].filter(part => part && part.trim());

    return parts.join(' ');
  }

  getBranchInfo(branchData) {
    // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å branchData ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    const branchCode = branchData?.code || window.BRANCH_CODE || '00000';

    // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏Ñ‡∏£‡∏ö
    if (branchData && branchData.name) {
      return {
        name: branchData.name,
        code: branchCode,
        address: branchData.address || '',
        taxId: branchData.taxId || '0945566000616',
        tel: branchData.tel || branchData.phone || '09-2427-0769'
      };
    }

    // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏ä‡πâ default ‡∏ï‡∏≤‡∏° branch code
    const branchMap = {
      '00000': { name: '‡∏™‡∏≥‡∏ô‡∏±‡∏Å‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏ç‡πà', tel: '09-2427-0769' },
      '00001': { name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', tel: '073-374777' },
      '00002': { name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏á‡∏Ç‡∏•‡∏≤', tel: '073-374778' },
      '00003': { name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏¢‡∏∞‡∏•‡∏≤', tel: '073-374779' },
      '00004': { name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™', tel: '073-374780' },
      '00005': { name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ (‡∏™‡∏∏‡πÑ‡∏´‡∏á-‡πÇ‡∏Å‡∏•‡∏Å)', tel: '073-374781' },
      '00006': { name: '‡∏™‡∏≤‡∏Ç‡∏≤‡∏™‡∏ï‡∏π‡∏•', tel: '073-374782' }
    };

    const branch = branchMap[branchCode] || branchMap['00000'];

    return {
      name: branch.name,
      code: branchCode,
      address: '',
      taxId: '0945566000616',
      tel: branch.tel
    };
  }

  // ‡πÄ‡∏û‡∏¥‡πà‡∏° function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≤‡∏Ç‡∏≤‡∏à‡∏≤‡∏Å API
  async fetchBranchInfo(branchCode) {
    try {
      const response = await fetch('/api/branch', {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        }
      });

      if (!response.ok) {
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
      }

      const result = await response.json();

      if (result.success && result.data) {
        // ‡∏´‡∏≤‡∏™‡∏≤‡∏Ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö branchCode
        const branch = result.data.find(b => b.branch_code === branchCode);

        if (branch) {
          return {
            name: branch.name,
            code: branch.branch_code,
            address: branch.address || '',
            taxId: '0945566000616', // ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å company
            tel: branch.phone || '09-2427-0769'
          };
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ default
      return this.getBranchInfo(null);

    } catch (error) {
      console.warn('‚ö†Ô∏è Failed to fetch branch info from API:', error.message);
      return this.getBranchInfo(null);
    }
  }

  // ========== EMAIL STATUS INDICATOR ==========

  updateEmailStatus(status, message) {
    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ email ‡πÉ‡∏ô UI
    console.log(`üìß Email status: ${status} - ${message}`);

    try {
      // ‡∏´‡∏≤ email status element ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
      let emailStatusEl = document.getElementById('email-status-indicator');

      if (!emailStatusEl) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á email status indicator ‡πÉ‡∏´‡∏°‡πà
        emailStatusEl = document.createElement('div');
        emailStatusEl.id = 'email-status-indicator';
        emailStatusEl.style.cssText = `
          position: fixed;
          top: 20px;
          right: 20px;
          padding: 12px 16px;
          border-radius: 8px;
          z-index: 9999;
          font-size: 14px;
          font-weight: 500;
          box-shadow: 0 4px 12px rgba(0,0,0,0.1);
          transition: all 0.3s ease;
          max-width: 300px;
        `;
        document.body.appendChild(emailStatusEl);
      }

      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏ï‡∏≤‡∏°‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      const statusStyles = {
        sending: {
          background: '#3b82f6',
          color: 'white',
          icon: 'üìß'
        },
        success: {
          background: '#10b981',
          color: 'white',
          icon: '‚úÖ'
        },
        failed: {
          background: '#ef4444',
          color: 'white',
          icon: '‚ùå'
        }
      };

      const style = statusStyles[status] || statusStyles.sending;
      emailStatusEl.style.background = style.background;
      emailStatusEl.style.color = style.color;
      emailStatusEl.innerHTML = `${style.icon} ${message}`;

      // ‡∏ã‡πà‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
      if (status === 'success' || status === 'failed') {
        setTimeout(() => {
          if (emailStatusEl) {
            emailStatusEl.style.opacity = '0';
            setTimeout(() => {
              if (emailStatusEl && emailStatusEl.parentNode) {
                emailStatusEl.parentNode.removeChild(emailStatusEl);
              }
            }, 300);
          }
        }, 5000);
      }

    } catch (error) {
      console.error('‚ùå Error updating email status UI:', error);
    }
  }

  // ========== TAX INVOICE & INVOICE DATABASE STORAGE HELPERS ==========

  handleTaxInvoiceFallbackStorage(taxInvoiceNumber) {
    console.log('üîÑ Setting up Tax Invoice fallback storage...');

    if (this.contractData) {
      this.contractData.taxInvoiceNumber = taxInvoiceNumber;
      this.contractData.taxInvoiceRef = taxInvoiceNumber;
      this.contractData.data = this.contractData.data || {};
      this.contractData.data.tax_invoice_no = taxInvoiceNumber;
    }

    sessionStorage.setItem('currentTaxInvoiceNumber', taxInvoiceNumber);
    sessionStorage.setItem('savedTaxInvoiceId', 'local_' + Date.now());

    console.log('üìã Tax Invoice fallback storage completed:', {
      customNumber: taxInvoiceNumber,
      localId: sessionStorage.getItem('savedTaxInvoiceId'),
      status: 'fallback_storage'
    });
  }

  handleInvoiceFallbackStorage(invoiceNumber) {
    console.log('üîÑ Setting up Invoice fallback storage...');

    if (this.contractData) {
      this.contractData.invoiceNumber = invoiceNumber;
      this.contractData.invoiceRef = invoiceNumber;
      this.contractData.data = this.contractData.data || {};
      this.contractData.data.invoice_no = invoiceNumber;
    }

    sessionStorage.setItem('currentInvoiceNumber', invoiceNumber);
    sessionStorage.setItem('savedInvoiceId', 'local_' + Date.now());

    console.log('üìã Invoice fallback storage completed:', {
      customNumber: invoiceNumber,
      localId: sessionStorage.getItem('savedInvoiceId'),
      status: 'fallback_storage'
    });
  }

  /**
   * üîß Enhanced: ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö Enhanced Email Service ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
   */
  async integrateWithEnhancedEmailService(receiptData, receiptNumber) {
    try {
      console.log('üìß Integrating with Enhanced Email Service for database persistence...');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enhanced Email Service
      const step1Data = JSON.parse(localStorage.getItem('step1Data') || '{}');
      const step2Data = JSON.parse(localStorage.getItem('step2Data') || '{}');
      const step3Data = JSON.parse(localStorage.getItem('step3Data') || '{}');

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å step2 (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°)
      const customerData = step2Data.customerData || {};

      console.log('üîç Customer data from localStorage:', customerData);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á orderData ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡πÉ‡∏ô localStorage
      const orderData = {
        customerInfo: {
          // ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å step2
          prefix: customerData.prefix || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          firstName: customerData.firstName || '',
          lastName: customerData.lastName || '',
          name: customerData.firstName && customerData.lastName ?
                `${customerData.prefix || ''} ${customerData.firstName} ${customerData.lastName}`.trim() :
                (customerData.name || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'),
          taxId: customerData.idCard || customerData.taxId || '',
          phone: customerData.phone || '',
          email: customerData.email || '',
          address: customerData.address ||
                  `${customerData.houseNumber || ''} ${customerData.village || ''} ${customerData.subDistrict || ''} ${customerData.district || ''} ${customerData.province || ''} ${customerData.postalCode || ''}`.trim()
        },
        items: receiptData?.items || step1Data.cartItems || [],
        totalAmount: receiptData?.totalAmount || receiptData?.total || 0,
        vatAmount: receiptData?.vatAmount || 0,
        taxType: receiptData?.vatAmount > 0 ? 'inclusive' : 'none'
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á installmentData
      const installmentData = {
        contractNo: receiptData?.contractNo || this.contractData?.contractNumber || '',
        quotationId: receiptData?.quotationNumber || this.contractData?.quotationNumber || '',
        invoiceId: receiptData?.invoiceNumber || this.contractData?.invoiceNumber || '',
        receiptVoucherId: receiptNumber,
        taxInvoiceId: receiptData?.taxInvoiceNumber || `TX-${receiptNumber?.replace('RE-', '') || Date.now()}`,
        branchCode: receiptData?.branchCode || '00000',
        downPayment: receiptData?.downPaymentAmount || receiptData?.total || 0,
        vatAmount: receiptData?.vatAmount || 0,
        taxType: receiptData?.vatAmount > 0 ? 'inclusive' : 'none',
        customerInfo: orderData.customerInfo // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      };

      console.log('üìã Prepared data for Enhanced Email Service:', {
        orderData: {
          customerName: orderData.customerInfo.name,
          customerPrefix: orderData.customerInfo.prefix,
          customerFirstName: orderData.customerInfo.firstName,
          customerLastName: orderData.customerInfo.lastName,
          totalAmount: orderData.totalAmount,
          vatAmount: orderData.vatAmount,
          taxType: orderData.taxType
        },
        installmentData: {
          contractNo: installmentData.contractNo,
          receiptVoucherId: installmentData.receiptVoucherId,
          taxInvoiceId: installmentData.taxInvoiceId,
          downPayment: installmentData.downPayment
        }
      });

      // üö´ DISABLED: Enhanced Email Service ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      // ‡∏£‡∏∞‡∏ö‡∏ö‡∏ú‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÉ‡∏ä‡πâ receipt-tax-invoice-integration.js ‡πÅ‡∏ó‡∏ô
      console.log('‚ö†Ô∏è Enhanced Email Service disabled for installment system to prevent duplicate documents');

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Enhanced Email Service API (DISABLED)
      /*
      const enhancedResponse = await fetch('/api/enhanced-email/save-documents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify({
          orderData,
          installmentData,
          documentType: 'down_payment',
          saveToDatabase: true
        })
      });
      */

      // Enhanced Email Service disabled - return success without processing
      console.log('‚úÖ Enhanced Email Service integration skipped (disabled to prevent duplicate documents)');

      return {
        success: true,
        message: 'Enhanced Email Service integration skipped (disabled)',
        receipt: null,
        taxInvoice: null,
        note: 'Documents are handled by receipt-tax-invoice-integration.js instead'
      };

    } catch (error) {
      console.error('‚ùå Enhanced Email Service integration error:', error);
      throw error;
    }
  }

  handleReceiptFallbackStorage(receiptNumber) {
    console.log('üîÑ Setting up Receipt fallback storage...');

    if (this.contractData) {
      this.contractData.receiptNumber = receiptNumber;
      this.contractData.receiptRef = receiptNumber;
      this.contractData.data = this.contractData.data || {};
      this.contractData.data.receipt_no = receiptNumber;
    }

    sessionStorage.setItem('currentReceiptNumber', receiptNumber);
    sessionStorage.setItem('savedReceiptId', 'local_' + Date.now());

    console.log('üìã Receipt fallback storage completed:', {
      customNumber: receiptNumber,
      localId: sessionStorage.getItem('savedReceiptId'),
      status: 'fallback_storage'
    });
  }

  /**
   * üîß Enhanced: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÑ‡∏õ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Enhanced Email Service
   * ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
   */
  async saveDocumentsToDatabase(documents, documentData) {
    try {
      console.log('üìß Starting Enhanced Email Service database save...');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enhanced Email Service
      const step1Data = JSON.parse(localStorage.getItem('step1Data') || '{}');
      const step2Data = JSON.parse(localStorage.getItem('step2Data') || '{}');
      const step3Data = JSON.parse(localStorage.getItem('step3Data') || '{}');

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏à‡∏≤‡∏Å step2 (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°)
      const customerData = step2Data.customerData || {};

      console.log('üîç Customer data for database save:', customerData);

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á orderData ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Enhanced Email Service
      const orderData = {
        customerInfo: {
          prefix: customerData.prefix || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
          firstName: customerData.firstName || '',
          lastName: customerData.lastName || '',
          name: customerData.firstName && customerData.lastName ?
                `${customerData.prefix || ''} ${customerData.firstName} ${customerData.lastName}`.trim() :
                (customerData.name || '‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ'),
          taxId: customerData.idCard || customerData.taxId || '',
          phone: customerData.phone || '',
          email: customerData.email || '',
          address: customerData.address ||
                  `${customerData.houseNumber || ''} ${customerData.village || ''} ${customerData.subDistrict || ''} ${customerData.district || ''} ${customerData.province || ''} ${customerData.postalCode || ''}`.trim()
        },
        items: step1Data.cartItems || [],
        totalAmount: documentData.totalAmount || 0,
        vatAmount: this.calculateVatAmount(step1Data, step3Data),
        taxType: documents.hasVatItems ? 'inclusive' : 'none'
      };

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á installmentData
      const installmentData = {
        contractNo: this.contractData?.contract_no || this.contractData?.contract_number || '',
        quotationId: documentData.quotationNumber || `QUO-${Date.now()}`,
        invoiceId: documentData.invoiceNumber || `INV-${Date.now()}`,
        receiptVoucherId: documentData.receiptNumber || `RE-${Date.now()}`,
        taxInvoiceId: documentData.taxInvoiceNumber || `TAX-${Date.now()}`,
        branchCode: documentData.branchCode || '00000',
        downPayment: documentData.downPayment || 0,
        vatAmount: orderData.vatAmount,
        taxType: orderData.taxType,
        customerInfo: orderData.customerInfo // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢
      };

      console.log('üìã Database save data prepared:', {
        customerName: orderData.customerInfo.name,
        contractNo: installmentData.contractNo,
        taxType: orderData.taxType,
        hasVat: documents.hasVatItems,
        totalAmount: orderData.totalAmount,
        vatAmount: orderData.vatAmount
      });

      // üö´ DISABLED: Enhanced Email Service ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
      console.log('‚ö†Ô∏è Enhanced Email Service disabled for installment system to prevent duplicate documents');

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ Enhanced Email Service API (DISABLED)
      /*
      const response = await fetch('/api/enhanced-email/save-documents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify({
          orderData,
          installmentData,
          documentType: 'contract_creation',
          saveToDatabase: true
        })
      });

      if (!response.ok) {
        throw new Error(`Enhanced Email Service API error: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      */

      // üîß FIX: Return mock result since Enhanced Email Service is disabled
      const result = {
        success: true,
        message: 'Enhanced Email Service disabled - no additional documents created',
        receipt: null,
        taxInvoice: null
      };

      if (result.success) {
        console.log('‚úÖ Enhanced Email Service database save successful:', {
          receipt: !!result.receipt,
          taxInvoice: !!result.taxInvoice,
          taxType: result.taxType,
          hasVat: result.hasVat
        });

        // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ô UI
        this.showToast('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');

        return result;
      } else {
        throw new Error(result.error || 'Enhanced Email Service returned success: false');
      }

    } catch (error) {
      console.error('‚ùå Enhanced Email Service database save error:', error);

      // ‡πÅ‡∏™‡∏î‡∏á warning ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
      this.showToast('‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤ (‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ)', 'warning');

      throw error; // Re-throw ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ caller ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏î error
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  async downloadReceiptOnly() {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (!this.contractCreated) {
        this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', 'warning');
        this.showContractCreationRequired();
        return;
      }

      console.log('üìÑ Downloading Receipt from database...');
      this.showToast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô...', 'info');

      // ‡∏î‡∏∂‡∏á Receipt ID ‡∏à‡∏≤‡∏Å sessionStorage
      const savedReceiptId = sessionStorage.getItem('savedReceiptId');

      if (savedReceiptId) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        console.log('üìã Using saved Receipt ID:', savedReceiptId);

        const response = await fetch(`/api/pdf/installment/receipt/${savedReceiptId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
          }
        });

        if (response.ok) {
          const blob = await response.blob();
          const downloadUrl = window.URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = downloadUrl;
          link.download = `receipt_${this.contractData?.contractNo || savedReceiptId}.pdf`;
          link.click();
          window.URL.revokeObjectURL(downloadUrl);

          this.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
          return;
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å stepData
      console.log('üìÑ Generating new Receipt...');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      const documentData = await this.prepareDocumentData();

      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô
      const pdfRequestData = {
        ...documentData,
        documentType: 'RECEIPT',
        invoiceType: 'RECEIPT',
        forceReceiptMode: true,
        suppressVatDisplay: true
      };

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
      const response = await fetch('/api/pdf/installment/receipt', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify(pdfRequestData)
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
      const blob = await response.blob();
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = `receipt_${this.contractData?.contractNo || Date.now()}.pdf`;
      link.click();
      window.URL.revokeObjectURL(downloadUrl);

      this.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');

    } catch (error) {
      console.error('‚ùå Error downloading receipt:', error);
      this.showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'error');
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  async downloadTaxInvoiceOnly() {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
      if (!this.contractCreated) {
        this.showToast('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£', 'warning');
        this.showContractCreationRequired();
        return;
      }

      console.log('üìÑ Downloading Tax Invoice from database...');
      this.showToast('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ...', 'info');

      // ‡∏î‡∏∂‡∏á Tax Invoice ID ‡∏à‡∏≤‡∏Å sessionStorage
      const savedTaxInvoiceId = sessionStorage.getItem('savedTaxInvoiceId');

      if (savedTaxInvoiceId) {
        // ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ID ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÉ‡∏´‡πâ‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏°‡∏≤‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
        console.log('üìã Using saved Tax Invoice ID:', savedTaxInvoiceId);

        const response = await fetch(`/api/pdf/installment/tax-invoice/${savedTaxInvoiceId}`, {
          method: 'GET',
          headers: {
            'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
          }
        });

        if (response.ok) {
          const blob = await response.blob();
          const downloadUrl = window.URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = downloadUrl;
          link.download = `tax_invoice_${this.contractData?.contractNo || savedTaxInvoiceId}.pdf`;
          link.click();
          window.URL.revokeObjectURL(downloadUrl);

          this.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');
          return;
        }
      }

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ID ‡∏´‡∏£‡∏∑‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å DB ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å stepData
      console.log('üìÑ Generating new Tax Invoice...');

      // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
      const documentData = await this.prepareDocumentData();

      // ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
      const pdfRequestData = {
        ...documentData,
        documentType: 'TAX_INVOICE',
        invoiceType: 'FULL_TAX',
        forceTaxInvoiceMode: true
      };

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ
      const response = await fetch('/api/pdf/installment/tax-invoice', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${localStorage.getItem('authToken') || ''}`
        },
        body: JSON.stringify(pdfRequestData)
      });

      if (!response.ok) {
        throw new Error(`API Error: ${response.status}`);
      }

      // ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î PDF
      const blob = await response.blob();
      const downloadUrl = window.URL.createObjectURL(blob);
      const link = document.createElement('a');
      link.href = downloadUrl;
      link.download = `tax_invoice_${this.contractData?.contractNo || Date.now()}.pdf`;
      link.click();
      window.URL.revokeObjectURL(downloadUrl);

      this.showToast('‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡∏Å‡∏≥‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏©‡∏µ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢', 'success');

    } catch (error) {
      console.error('‚ùå Error downloading tax invoice:', error);
      this.showToast(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`, 'error');
    }
  }
}

// Auto-initialize when DOM is ready
if (document.readyState === 'loading') {
  document.addEventListener('DOMContentLoaded', () => {
    window.step4Integration = new Step4Integration();
  });
} else {
  window.step4Integration = new Step4Integration();
}

console.log('üìã Step 4 Integration loaded');