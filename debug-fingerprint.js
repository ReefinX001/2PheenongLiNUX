/**
 * Fingerprint System Diagnostic Tool
 * ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á Node.js ‡πÅ‡∏•‡∏∞ Windows Service
 */

const ZKFingerTCPService = require('./services/zkfinger/ZKFingerTCPService');
const net = require('net');

class FingerprintDiagnostic {
    constructor() {
        this.host = '100.106.108.57';
        this.port = 8890;
        this.zkService = new ZKFingerTCPService({
            host: this.host,
            port: this.port,
            timeout: 10000
        });
    }

    async runFullDiagnostic() {
        console.log('üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠');
        console.log('=' .repeat(60));

        // 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢
        await this.testNetworkConnection();

        // 2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TCP Connection
        await this.testTcpConnection();

        // 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ZKFinger Service
        await this.testZKFingerService();

        // 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
        await this.testScanOperation();

        console.log('\n' + '=' .repeat(60));
        console.log('üèÅ ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô');
    }

    async testNetworkConnection() {
        console.log('\n1Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠‡∏Ç‡πà‡∏≤‡∏¢');
        console.log(`üì° Host: ${this.host}:${this.port}`);

        return new Promise((resolve) => {
            const socket = new net.Socket();
            const timeout = setTimeout(() => {
                socket.destroy();
                console.log('‚ùå Network connection timeout');
                console.log('   üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: IP address, firewall, network connectivity');
                resolve(false);
            }, 5000);

            socket.connect(this.port, this.host, () => {
                clearTimeout(timeout);
                console.log('‚úÖ Network connection successful');
                socket.end();
                resolve(true);
            });

            socket.on('error', (error) => {
                clearTimeout(timeout);
                console.log('‚ùå Network connection failed:', error.code);
                if (error.code === 'ECONNREFUSED') {
                    console.log('   üîß Windows Service ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠ port ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
                } else if (error.code === 'EHOSTUNREACH') {
                    console.log('   üîß ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á host ‡πÑ‡∏î‡πâ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö network');
                }
                resolve(false);
            });
        });
    }

    async testTcpConnection() {
        console.log('\n2Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö TCP Communication');

        try {
            const pingResult = await this.zkService.ping();
            if (pingResult.success) {
                console.log('‚úÖ TCP ping successful');
                console.log(`   üìÖ Response time: ${pingResult.timestamp}`);
            } else {
                console.log('‚ùå TCP ping failed');
                console.log('   üîß Service ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á ping command');
            }
        } catch (error) {
            console.log('‚ùå TCP communication error:', error.message);
            console.log('   üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Windows Service logs');
        }
    }

    async testZKFingerService() {
        console.log('\n3Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö ZKFinger Service Status');

        try {
            const status = await this.zkService.getStatus();
            console.log('üìä Service Status:');
            console.log(`   - Service Running: ${status.serviceRunning ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Device Connected: ${status.deviceConnected ? '‚úÖ' : '‚ùå'}`);
            console.log(`   - Device Handle: ${status.deviceHandle || 'N/A'}`);
            console.log(`   - Device Count: ${status.deviceCount || 'N/A'}`);

            if (!status.deviceConnected) {
                console.log('\n‚ö†Ô∏è ZK9500 Device Issues:');
                console.log('   üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö USB connection');
                console.log('   üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ZK SDK drivers');
                console.log('   üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö device permissions');
            }

            // ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô SDK
            console.log('\nüîß ‡∏ó‡∏î‡∏™‡∏≠‡∏ö SDK Initialization...');
            const initResult = await this.zkService.initializeSDK();
            if (initResult.success) {
                console.log('‚úÖ SDK initialized successfully');
            } else {
                console.log('‚ùå SDK initialization failed:', initResult.message);
            }

        } catch (error) {
            console.log('‚ùå Service status check failed:', error.message);
        }
    }

    async testScanOperation() {
        console.log('\n4Ô∏è‚É£ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏•‡∏≤‡∏¢‡∏ô‡∏¥‡πâ‡∏ß‡∏°‡∏∑‡∏≠');
        console.log('‚è∞ Timeout: 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ (‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà‡∏ô‡∏¥‡πâ‡∏ß)');

        try {
            const scanResult = await this.zkService.scanFingerprint({
                timeout: 10000,
                quality: 'high',
                saveImage: true
            });

            if (scanResult.success) {
                console.log('‚úÖ Scan operation ready');
                console.log(`   üì∏ Image path: ${scanResult.imagePath || 'N/A'}`);
                console.log(`   üß¨ Template size: ${scanResult.templateSize || 'N/A'}`);
            } else {
                console.log('‚ùå Scan failed:', scanResult.message);
            }
        } catch (error) {
            if (error.message.includes('timeout')) {
                console.log('‚è∞ Scan timeout (expected - no finger placed)');
                console.log('‚úÖ Scan mechanism is working');
            } else {
                console.log('‚ùå Scan error:', error.message);
                console.log('   üîß Device ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô');
            }
        }
    }

    async checkWindowsServiceLogs() {
        console.log('\nüìã Windows Service Logs Location:');
        console.log('   File: C:\\ZKTecoService\\logs\\service.log');
        console.log('   Images: C:\\ZKTecoService\\images\\');
        console.log('\nüí° Commands to check logs:');
        console.log('   type "C:\\ZKTecoService\\logs\\service.log"');
        console.log('   sc query "ZKTecoService"');
        console.log('   sc stop "ZKTecoService" && sc start "ZKTecoService"');
    }

    async generateReport() {
        console.log('\nüìä System Configuration Report:');
        console.log(`   Node.js TCP Host: ${this.host}`);
        console.log(`   Node.js TCP Port: ${this.port}`);
        console.log(`   Windows Service Port: ${this.port} (should match)`);
        console.log(`   Expected ZK Device: ZK9500 Fingerprint Scanner`);
        console.log(`   Service Name: ZKTecoService`);
        console.log(`   API Endpoint: /api/fingerprint/scan`);
    }
}

// ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢
async function main() {
    const diagnostic = new FingerprintDiagnostic();

    try {
        await diagnostic.runFullDiagnostic();
        await diagnostic.checkWindowsServiceLogs();
        await diagnostic.generateReport();
    } catch (error) {
        console.error('\n‚ùå Diagnostic failed:', error.message);
    }
}

// ‡∏£‡∏±‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
if (require.main === module) {
    main()
        .then(() => {
            console.log('\n‚úÖ Diagnostic completed');
            process.exit(0);
        })
        .catch((error) => {
            console.error('\n‚ùå Diagnostic error:', error);
            process.exit(1);
        });
}

module.exports = FingerprintDiagnostic;